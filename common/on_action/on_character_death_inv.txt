###Effect Sections - Navigate with ctrl + F
###Section 0.01: Foreign holdings removal before inheritance
###Section 0: Mummification 
###Section 1: Vanilla events and variable removals.
###Section 2: Vanilla inheritance rules applied to republics/tribes - do not need to touch for now
###Section 3: Inheritance rules changed for Monarchies
###Section 4: Inheritance and Succession rules for Spartan Diarchy
###Section 5: Inheritance and succession rules for Judean Diarchy

###Section 6: Various Fixes

on_character_death = {
	effect = {
    ###Section 0.01 Foreign holdings removal before inheritance
    if = {
      limit = {
        num_holdings_owned > 0
      }
      employer = {
        save_scope_as = my_country
      }
      while = {
        limit = {
          any_holdings = {
            NOT = { owner = scope:my_country }
          }
        }
        random_holdings = {
          limit = {
            NOT = { owner = scope:my_country }
          }
          save_scope_as = removing_the_holding
        }
        remove_holding = scope:removing_the_holding
      }
    }
		###Section 0: Mummification	
		if = {
			limit = {
				employer = {
					OR = {
						country_culture_group = meroitic_group
						country_culture_group = north_african
						tag = EGY
						tag = EGT
					}
				}
				is_ruler = yes
				martial >= 10
			}
			employer = {
				set_variable = {
					name = martial_mummy_candidate
					days = 180
				}
			}
			
		}
		if = {
			limit = {
				employer = {
					OR = {
						country_culture_group = meroitic_group
						country_culture_group = north_african
						tag = EGY
						tag = EGT
					}
				}
				is_ruler = yes
				zeal >= 10
			}
			employer = {
				set_variable = {
					name = zeal_mummy_candidate
					days = 180
				}
			}
			
		}
		if = {
			limit = {
				employer = {
					OR = {
						country_culture_group = meroitic_group
						country_culture_group = north_african
						tag = EGY
						tag = EGT
					}
				}
				is_ruler = yes
				charisma >= 10
			}
			employer = {
				set_variable = {
					name = charisma_mummy_candidate
					days = 180
				}
			}	
		}
		if = {
			limit = {
				employer = {
					OR = {
						country_culture_group = meroitic_group
						country_culture_group = north_african
						tag = EGY
						tag = EGT
					}
				}
				is_ruler = yes
				finesse >= 10
			}
			employer = {
				set_variable = {
					name = finesse_mummy_candidate
					days = 180
				}
			}	
		}
	
		###Section 0.1: Wagon burial (similar to mummification but for Celts) - Palando
		if = {
			limit = {
				employer = {
					primary_culture = treverian
					has_variable = wagon_burials_unlocked
				}
				is_ruler = yes
			}
			employer = {
				trigger_event = {
					id = flavor_gaul.47
					days = { 15 25 }
				}
			}
			
		}
		###Section 0.2: Mauryan content
		if = {
			#Death of Ashoka
			limit = {
				this = global_var:acting_as_ashoka
				c:MRY = { has_land = yes }
				is_ruler = yes
				employer = {
					tag = MRY
				}
			}
			c:MRY = {
				trigger_event = { id = flavor_maurya.6 }
			}
		}
			
		###Section 1: Vanilla events and variable removals.
		clear_ambition_effect = yes
		befriend_removal_effect = yes
		clear_befriending_var_effect = yes
		if = {
			limit = {
				has_variable = on_espionage_mission_origin
				var:on_espionage_mission_origin = {
					exists = this
					has_land = yes
				}
				has_variable = on_espionage_mission_recipient
				var:on_espionage_mission_recipient = {
					exists = this
					has_land = yes
				}
			}
			save_scope_as = spy
			var:on_espionage_mission_recipient = {
				save_scope_as = spied_upon
			}
			var:on_espionage_mission_origin = {
				save_scope_as = esp_o
			}
			scope:esp_o = {
				trigger_event = {
					id = country_diplomacy.46
				}
			}
		}
		remove_espionage_variables_effect = yes
		if = {
			limit = {
				has_triggered_character_modifier = disloyal_family_head_cmod
				is_general = yes
			}
			every_character_unit = {
				destroy_unit = yes
			}
		}
		if = {
			limit = {
				this = char:70
				is_ruler = no
				age <= 22
				NOT = { employer = c:EPI }
				c:EPI = { has_land = yes }
			}
			c:EPI = {
				trigger_event = { id = dhe_dde_pyrrhus.10 }
			}
		}
		if = { # Memorable Life
			limit = {
				this = char:70
				is_ruler = yes
				employer = { 
					has_land = yes
					has_variable = pyrrhus_returns_flag
				}
			}
			employer = {
				trigger_event = { id = dhe_dde_pyrrhus.35 }
				me_epi_2_saved_variables_clearer_complete = yes
				me_epi_3_saved_variables_clearer_complete = yes
			}
		}
		if = {
			limit = {
				is_ruler = yes
				employer = {
					is_monarchy = yes
					has_land = yes
				}
			}
			save_scope_as = former_ruler
			employer = {
				if = {
					limit = {
						NOR = {
							has_variable = recent_succession_crisis
							has_civil_war = yes
						}
						any_successor = {
							loyalty < 33
							is_adult = yes
							is_ruler = no
							is_pretender = yes
							is_primary_heir = no
							NOT = {
								has_character_modifier = disloyal_successor_cmod
							}
						}
					}
					every_successor = {
						limit = {
							loyalty < 33
							is_adult = yes
							is_ruler = no
							is_pretender = yes
							is_primary_heir = no
							NOT = {
								has_character_modifier = disloyal_successor_cmod
							}
						}
						if = {
							limit = {
								NOT = {
									exists = scope:successor_general_1
								}
							}
							save_scope_as = successor_general_1
						}
						else_if = {
							limit = { 
								NOT = {
									exists = scope:successor_general_2
								}
							}
							save_scope_as = successor_general_2
						}
						else_if = {
							limit = {
								NOT = {
									exists = scope:successor_general_3
								}
							}
							save_scope_as = successor_general_3
						}
						else_if = {
							limit = {
								NOT = {
									exists = scope:successor_general_4
								}
							}
							save_scope_as = successor_general_4
						}
					}
					trigger_event = {
						id = succession_crisis.1
					}
				}
			}
		}
		if = {
			limit = {
				has_variable = adventuring_from
				NOT = {
					employer = var:adventuring_from
				}
				var:adventuring_from = {
					has_land = yes
				}
			}
			if = {
				limit = {
					has_variable = next_in_succession
				}
				set_local_variable = next_in_succession
			}
			location = {
				save_scope_as = death_location
			}
			save_scope_as = dead_merc
			var:adventuring_from = {
				trigger_event = {
					id = character_events.48
				}
			}
		}

		if = {
			limit = {
				has_variable = ip_mon_47_regent_consort
				employer = {
					has_land = yes
					current_ruler = {
						is_child_of = root
					}
				}
			}
			remove_variable = ip_mon_47_regent_consort
			save_scope_as = ip_mon_47_consort
			if = {
				limit = {
					NAND = {
						this = char:287
						employer.current_ruler = char:289
					}
				}
				employer = {
					trigger_event = { id = ip_monarchy.52 }
				}
			}
			else = {
				employer.current_ruler = { 
					remove_variable = ip_mon_47_regent_child
					remove_regent_modifier_effect = yes
				}
			}
		}
		if = {
			limit = {
				has_variable = ip_mon_47_regent_child
			}
			remove_variable = ip_mon_47_regent_child
			if = {
				limit = {
					remove_regent_modifier_trigger = yes
				}
				remove_regent_modifier_effect = yes
			}
			employer = {
				trigger_event = {
					id = ip_monarchy.49
				}
			}
		}
		if = {
			limit = { has_variable = me_syr_democracy_leader }
			remove_variable = me_syr_democracy_leader
			clear_saved_scope = democracy_leader
			save_scope_as = old_democracy_leader
			employer = {
				trigger_event = { id = me_syracuse_1_democracy.2 }
			}
		}
		if = {
			limit = { has_variable = me_syr_current_tyrant_flag }
			remove_variable = me_syr_current_tyrant_flag
			save_scope_as = syracuse_old_tyrant
			employer = {
				trigger_event = {
					id = me_syracuse_1_democracy.3
					days = 1
				}
			}
		}
		if = {
			limit = { has_variable = me_syr_foreign_leader_flag }
			remove_variable = me_syr_foreign_leader_flag
			save_scope_as = me_syracuse_old_foreign_request_character_scope
			if = {
				limit = {
					any_country = { has_variable = me_syr_foreign_country_flag }
				}
				random_country = {
					limit = { has_variable = me_syr_foreign_country_flag }
					save_scope_as = me_syracuse_foreign_request_scope
				}
				scope:me_syracuse_foreign_request_scope = {
					trigger_event = { id = me_syracuse_1_democracy.12 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = me_syr_heir_flag
				c:SYR = { has_variable = death_to_tyrants_flag }
				employer = {
					tag = SYR
					OR = {
						var:ongoing_revolutionary_route = 6
						AND = {
							has_completed_mission_task = syracuse_1_6_approach_heir
							NOT = { has_completed_mission_task = syracuse_1_7_assassinate }
						}
					}
				}
			}
			remove_variable = me_syr_heir_flag
			save_scope_as = me_syr_heir_scope
			c:SYR = {
				trigger_event = { id = me_syracuse_1_democracy.73 }
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_1_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_1_flag
			if = {
				limit = { 
					employer = { has_variable = gm_1_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_1_black_sea.13 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_3_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_3_flag
			if = {
				limit = { 
					employer = { has_variable = gm_3_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_3_italiote.26 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_4_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_4_flag
			if = {
				limit = { 
					employer = { has_variable = gm_4_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_4_west.3 }
				}
			}
		}
		if = {
			limit = { has_variable = archimedes_flag }
			if = {
				limit = { 
					employer = { has_country_modifier = archimedes_modifier }
				}
				remove_country_modifier = archimedes_modifier
			}
		}
		if = {
			limit = { 
				OR = {
					AND = {
						this = char:32 
						char:288 = {
							OR = {
								is_alive = no
								NOT = { employer = c:MAC }
							}
						}
					}
					AND = {
						this = char:288
						is_previous_ruler = yes
					}
				}
				char:289 = { 
					is_alive = yes
					employer = c:MAC
				}
				char:290 = { 
					is_alive = yes 
					employer = c:MAC
				}
			}
			c:MAC = {
				trigger_event = {
					id = dhe_macedon.7
					days = { 100 200 }
				}
			}
		}
		if = {
			limit = { this = char:52 }
			c:KIO = {
				trigger_event = { id = dhe_mithridates.9 }
			}
		}
		if = {
			limit = { has_variable = betrothed_flag }
			remove_variable = betrothed_flag
		}
		
		###Section 2: Vanilla inheritance rules applied to republics/tribes
		if = {
			limit = {
				employer = {
					is_monarchy = no
				}
				is_head_of_family = yes
				exists = next_in_family
			}
			next_in_family = {
				save_scope_as = holding_target
				add_gold = family_inheritance_svalue
			}
			add_gold = {
				value = 0
				subtract = wealth
			}
		}
		else_if = {
			limit = {
				employer = {
					is_monarchy = no
				}
				is_head_of_family = no
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				save_scope_as = holding_target
				add_gold = family_individual_inheritance_svalue
			}
		}
		if = { 
			limit = { num_holdings_owned > 0 }
			if = { # Give holdings to relevant character based on above
				limit = { 
					exists = scope:holding_target 
					NOT = {
						scope:holding_target = root
					}
				}
				while = {
					limit = { num_holdings_owned > 0 }
					random_holdings = { save_scope_as = holding_transfer }
					remove_holding = scope:holding_transfer
					scope:holding_target = { add_holding = scope:holding_transfer }
				}
				scope:holding_target = {
					trigger_event = {
						id = holding_mech.1
						days = 1 #Necessary
					}
				}
			}
		}
		
		###Section 3: Inheritance rules changed for Vanilla Monarchies			
		## Give Holdings and Gold to the primary heir only if he belongs to the same family as the ruler. 	
		if = { 
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT				
					}
				}
				num_holdings_owned > 0
			}
			
			save_scope_as = ruler_with_holdings
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = scope:ruler_with_holdings
					}
					save_scope_as = holding_target
				}
			}
			
			if = {
				limit = {
					exists = scope:holding_target
				}
				
				scope:holding_target = {
					add_gold = family_inheritance_svalue
				}

				add_gold = {
					value = 0
					subtract = wealth
				}				
				
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}
		
		else_if = {
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT			
					}
				}
			}
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = ROOT
					}
					save_scope_as = next_king
				}
			}
			
			scope:next_king = {
				add_gold = family_inheritance_svalue	
			}
			
			add_gold = {
				value = 0
				subtract = wealth
			}
		}
		
		if = { 
			limit = {
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
				}
				is_head_of_family = yes
				exists = next_in_family
			}
			next_in_family = {
				add_gold = family_inheritance_svalue
			}
			add_gold = {
				value = 0
				subtract = wealth
			}
		}

		if = {
			limit = {
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
				}
				is_adult = yes
				is_head_of_family = no
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				add_gold = family_individual_inheritance_svalue
			}
		}

		if = {
			limit = {
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
				}
				is_head_of_family = yes
				num_holdings_owned > 0
				exists = next_in_family
			}
			next_in_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}
		
		if = {
			limit = {
				employer = {
					OR = {
						government = dictatorship
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
					}
				}
				is_head_of_family = no
				num_holdings_owned > 0
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				set_variable = {
					name = while_count
					value = num_holdings_owned
				}
				while = {
					count = var:while_count
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
				remove_variable = while_count
			}
		}

		###Section 4: Inheritance and Succession rules for Spartan Diarchy
		## If Primary Heir is the co-ruler, fix this edge case first 	
		if = { 
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
					any_character = {
						is_co_ruler = yes
						is_primary_heir = yes
					}
				}
			}
			
			save_scope_as = old_ruler
							
			employer = {
				ordered_character = {
					limit = {
						is_adult = yes
						is_male = yes
						has_same_family = scope:old_ruler
						NOT = { is_ruler = yes }
					}
					order_by = prominence
					save_scope_as = new_co_king
				}
				
				if = {
					limit = {
						exists = scope:new_co_king
					}
					
					scope:new_co_king = {
						add_gold = {
							value = family_inheritance_svalue
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_ruler = {
						if = {
							limit = {
								exists = scope:new_co_king
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:new_co_king = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					set_as_coruler = scope:new_co_king
					
					trigger_event = { ##Events to Make sure that the new co ruler from OG Ruler Family the family head
						id = special_spartan_event.6
					}
					
				}
				
				else_if = {
					limit = {
						NOT = { exists = scope:new_co_king }
					}
					
					create_character = {
						age = 30
						family = scope:old_ruler.family
						culture = scope:old_ruler.culture
						religion = scope:old_ruler.religion
						no_stats = yes
						hidden_effect = {
							amazing_martial_effect = yes
							average_charisma_effect = yes
							average_finesse_effect = yes
							average_zeal_effect = yes
						}
						save_scope_as = kings_family_member
					}
					
					set_as_coruler = scope:kings_family_member
					
					scope:kings_family_member = {
						add_gold = {
							value = family_inheritance_svalue
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_ruler = {
						if = {
							limit = {
								exists = scope:kings_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:kings_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { ##As Above
						id = special_spartan_event.6
					}

				}
			}
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			
		}
		
		##Celebrate New Spartan Ruler and make sure his primary heir gets the holdings/gold if its the same family		
		if = { 
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT				
					}
				}
				num_holdings_owned > 0
			}
			
			save_scope_as = old_spartan_king
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = scope:old_spartan_king
					}
					save_scope_as = holding_target
				}
			}
			
			if = {
				limit = {
					exists = scope:holding_target
				}
				
				scope:holding_target = {
					add_gold = family_inheritance_svalue
				}

				add_gold = {
					value = 0
					subtract = wealth
				}				
				
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
			
			employer = {
				trigger_event = { 
					id = special_spartan_event.3
				}
			}
		}
		
		else_if = {
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT			
					}
				}
			}
			
			save_scope_as = old_spartan_king
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = ROOT
					}
					save_scope_as = next_king
				}
			}
			
			scope:next_king = {
				add_gold = family_inheritance_svalue	
			}
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			
			employer = {
				trigger_event = { 
					id = special_spartan_event.3
				}
			}
			
		}
		
		## Sort Co Ruler succession, holdings & gold. 	
		if = { 
			limit = {
				is_co_ruler = yes
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
				}
			}
			save_scope_as = old_co_ruler
			
			next_in_family = {
				save_scope_as = temporary_head_of_family
			}
			
			employer = {
				set_variable = {
					name = money_for_new_co_ruler
					value = {
						value = root.wealth
						multiply = 0.5
					}
				}
			}	
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			employer = { 
				ordered_character = { 
					limit = {
						is_child_of = scope:old_co_ruler
						is_alive = yes
						is_male = yes
					}
					order_by = age
					save_scope_as = first_son_heir
				}		
				ordered_character = { 
					limit = {
						is_sibling_of = scope:old_co_ruler
						is_alive = yes
						is_male = yes
						NOT = { is_co_ruler = yes }
					}
					order_by = age
					save_scope_as = first_brother_heir
				}		
				ordered_character = { 
					limit = {
						is_head_of_family = yes
						is_alive = yes
						is_male = yes
						is_ruler = no
						from_ruler_family = no
					}
					order_by = wealth
					save_scope_as = new_family_coruler
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_male = yes
						has_same_family = scope:old_co_ruler
					}
					order_by = prominence
					save_scope_as = prominent_family_member
				}
				
				if = {
					limit = {
						exists = scope:first_son_heir
					}
					scope:first_son_heir = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:first_son_heir
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:first_son_heir = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}

					set_as_coruler = scope:first_son_heir
					
					trigger_event = { 
						id = special_spartan_event.9
					}	
				}
				else_if = {
					limit = {
						exists = scope:first_brother_heir
					}
					scope:first_brother_heir = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:first_brother_heir
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:first_brother_heir = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					set_as_coruler = scope:first_brother_heir
					
					trigger_event = { 
						id = special_spartan_event.9
					}
				}
				else_if = {
					limit = {
						exists = scope:temporary_head_of_family
						scope:temporary_head_of_family = {
							is_male = yes
						}
					}
					
					set_as_coruler = scope:temporary_head_of_family
		
					scope:temporary_head_of_family = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler					
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:temporary_head_of_family
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:temporary_head_of_family = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = {
						id = special_spartan_event.5
					}
				}
				else_if = {
					limit = {
						exists = scope:new_family_coruler
					}

					set_as_coruler = scope:new_family_coruler
					
					scope:new_family_coruler = {
						add_loyalty = loyalty_sparta_co_ruler
					}

					scope:temporary_head_of_family = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler					
						}
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:temporary_head_of_family
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:temporary_head_of_family = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = {
						id = special_spartan_event.5
					}
				}
				else_if = {
					limit = {
						exists = scope:prominent_family_member
					}
					
					set_as_coruler = scope:prominent_family_member
					
					scope:prominent_family_member = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:prominent_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:prominent_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { 
						id = special_spartan_event.9
					}	
					
				}
				else_if = {
					create_character = {
						culture = scope:old_co_ruler.culture
						religion = scope:old_co_ruler.religion
						no_stats = yes
						hidden_effect = {
							amazing_martial_effect = yes
							average_charisma_effect = yes
							average_finesse_effect = yes
							average_zeal_effect = yes
						}
						save_scope_as = obscure_family_member
					}
					
					set_as_coruler = scope:obscure_family_member
					
					scope:obscure_family_member = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:obscure_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:obscure_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { 
						id = special_spartan_event.9
					}
				}
			}
		}

		if = { 
			limit = {
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
				}
				is_head_of_family = yes
				exists = next_in_family
			}
			next_in_family = {
				add_gold = family_inheritance_svalue
			}
			add_gold = {
				value = 0
				subtract = wealth
			}
		}

		if = {
			limit = {
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
				}
				is_adult = yes
				is_head_of_family = no
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				add_gold = family_individual_inheritance_svalue
			}
		}

		if = {
			limit = {
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
				}
				is_head_of_family = yes
				num_holdings_owned > 0
				exists = next_in_family
			}
			next_in_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}
		
		if = {
			limit = {
				employer = {
					OR = {
						government = spartan_monarchy
						government = spartan_imperium
						government = spartan_imperial_cult
					}
				}
				is_head_of_family = no
				num_holdings_owned > 0
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}

		###Section 5: Inheritance and succession rules for Judean Diarchy
		if = { ## If Primary Heir is the co-ruler, fix this edge case first
			limit = {
				is_ruler = yes
				employer = {
					government = judean_empire
					any_character = {
						is_co_ruler = yes
						is_primary_heir = yes
					}
				}
			}
			
			save_scope_as = old_ruler
							
			employer = {
				ordered_character = {
					limit = {
						is_adult = yes
						is_male = yes
						has_same_family = scope:old_ruler
						NOT = { is_ruler = yes }
					}
					order_by = prominence
					save_scope_as = new_co_king
				}
				
				if = {
					limit = {
						exists = scope:new_co_king
					}
					
					scope:new_co_king = {
						add_gold = {
							value = family_inheritance_svalue
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_ruler = {
						if = {
							limit = {
								exists = scope:new_co_king
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:new_co_king = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					set_as_coruler = scope:new_co_king
					
					trigger_event = { ##Events to Make sure that the new co ruler from OG Ruler Family the family head
						id = special_spartan_event.6
					}
					
				}
				
				else_if = {
					limit = {
						NOT = { exists = scope:new_co_king }
					}
					
					create_character = {
						age = 30
						family = scope:old_ruler.family
						culture = scope:old_ruler.culture
						religion = scope:old_ruler.religion
						no_stats = yes
						hidden_effect = {
							average_martial_effect = yes
							average_charisma_effect = yes
							average_finesse_effect = yes
							amazing_zeal_effect = yes
							add_trait = "zadok"
						}
						save_scope_as = kings_family_member
					}
					
					set_as_coruler = scope:kings_family_member
					
					scope:kings_family_member = {
						add_gold = {
							value = family_inheritance_svalue
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_ruler = {
						if = {
							limit = {
								exists = scope:kings_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:kings_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { ##As Above
						id = special_spartan_event.6
					}

				}
			}
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			
		}
	
		##Celebrate New Judean Ruler and make sure his primary heir gets the holdings/gold if its the same family
		if = { 
			limit = {
				is_ruler = yes
				employer = {
					government = judean_empire
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT				
					}
				}
				num_holdings_owned > 0
			}
			
			save_scope_as = old_judean_king
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = scope:old_judean_king
					}
					save_scope_as = holding_target
				}
			}
			
			if = {
				limit = {
					exists = scope:holding_target
				}
				
				scope:holding_target = {
					add_gold = family_inheritance_svalue
				}

				add_gold = {
					value = 0
					subtract = wealth
				}				
				
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
			
			employer = {
				trigger_event = { 
					id = special_spartan_event.3
				}
			}
		}
		
		else_if = {
			limit = {
				is_ruler = yes
				employer = {
					government = judean_empire
					any_character = {
						is_primary_heir = yes
						has_same_family = ROOT			
					}
				}
			}
			
			save_scope_as = old_judean_king
			
			employer = {
				random_character = {
					limit = {
						is_primary_heir = yes
						has_same_family = ROOT
					}
					save_scope_as = next_king
				}
			}
			
			scope:next_king = {
				add_gold = family_inheritance_svalue	
			}
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			
			employer = {
				trigger_event = { 
					id = special_spartan_event.3
				}
			}
			
		}

		## Sort Co Ruler succession, holdings & gold. 		
		if = { 
			limit = {
				is_co_ruler = yes
				employer = {
					government = judean_empire
				}
			}
			save_scope_as = old_co_ruler
			
			next_in_family = {
				save_scope_as = temporary_head_of_family
			}
			
			employer = {
				set_variable = {
					name = money_for_new_co_ruler
					value = {
						value = root.wealth
						multiply = 0.5
					}
				}
			}	
			
			add_gold = {
				value = 0
				subtract = wealth
			}
			employer = { 
				ordered_character = { 
					limit = {
						is_child_of = scope:old_co_ruler
						is_alive = yes
						is_male = yes
					}
					order_by = age
					save_scope_as = first_son_heir
				}		
				ordered_character = { 
					limit = {
						is_sibling_of = scope:old_co_ruler
						is_alive = yes
						is_male = yes
						NOT = { is_co_ruler = yes }
					}
					order_by = age
					save_scope_as = first_brother_heir
				}		
				ordered_character = { 
					limit = {
						is_head_of_family = yes
						is_alive = yes
						is_male = yes
						is_ruler = no
						from_ruler_family = no
					}
					order_by = wealth
					save_scope_as = new_family_coruler
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_male = yes
						has_same_family = scope:old_co_ruler
					}
					order_by = prominence
					save_scope_as = prominent_family_member
				}
				
				if = {
					limit = {
						exists = scope:first_son_heir
					}
					scope:first_son_heir = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:first_son_heir
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:first_son_heir = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}

					set_as_coruler = scope:first_son_heir
					
					trigger_event = { 
						id = special_spartan_event.9
					}	
				}
				else_if = {
					limit = {
						exists = scope:first_brother_heir
					}
					scope:first_brother_heir = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:first_brother_heir
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:first_brother_heir = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					set_as_coruler = scope:first_brother_heir
					
					trigger_event = { 
						id = special_spartan_event.9
					}
				}
				else_if = {
					limit = {
						exists = scope:temporary_head_of_family
						scope:temporary_head_of_family = {
							is_male = yes
						}
					}
					
					set_as_coruler = scope:temporary_head_of_family
		
					scope:temporary_head_of_family = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler					
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:temporary_head_of_family
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:temporary_head_of_family = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = {
						id = special_spartan_event.5
					}
				}
				else_if = {
					limit = {
						exists = scope:new_family_coruler
					}

					set_as_coruler = scope:new_family_coruler
					
					scope:new_family_coruler = {
						add_loyalty = loyalty_sparta_co_ruler
					}

					scope:temporary_head_of_family = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler					
						}
					}
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:temporary_head_of_family
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:temporary_head_of_family = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = {
						id = special_spartan_event.5
					}
				}
				else_if = {
					limit = {
						exists = scope:prominent_family_member
					}
					
					set_as_coruler = scope:prominent_family_member
					
					scope:prominent_family_member = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:prominent_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:prominent_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { 
						id = special_spartan_event.9
					}	
					
				}
				else_if = {
					create_character = {
						culture = scope:old_co_ruler.culture
						religion = scope:old_co_ruler.religion
						family = scope:old_co_ruler.family
						no_stats = yes
						hidden_effect = {
							average_martial_effect = yes
							average_charisma_effect = yes
							average_finesse_effect = yes
							amazing_zeal_effect = yes
							add_trait = "zadok"
						}
						save_scope_as = obscure_family_member
					}
					
					set_as_coruler = scope:obscure_family_member
					
					scope:obscure_family_member = {
						add_gold = {
							value = employer.var:money_for_new_co_ruler
						}
						add_loyalty = loyalty_sparta_co_ruler
					}
					
					scope:old_co_ruler = {
						if = {
							limit = {
								exists = scope:obscure_family_member
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:obscure_family_member = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
					
					trigger_event = { 
						id = special_spartan_event.9
					}
				}
			}
		}

		if = { 
			limit = {
				employer = {
					government = judean_empire
				}
				is_head_of_family = yes
				exists = next_in_family
			}
			next_in_family = {
				add_gold = family_inheritance_svalue
			}
			add_gold = {
				value = 0
				subtract = wealth
			}
		}

		if = {
			limit = {
				employer = {
					government = judean_empire
				}
				is_adult = yes
				is_head_of_family = no
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				add_gold = family_individual_inheritance_svalue
			}
		}

		if = {
			limit = {
				employer = {
					government = judean_empire
				}
				is_head_of_family = yes
				num_holdings_owned > 0
				exists = next_in_family
			}
			next_in_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}
		
		if = {
			limit = {
				employer = {
					government = judean_empire
				}
				is_head_of_family = no
				num_holdings_owned > 0
				exists = family.head_of_family
				family.head_of_family = {
					employer = root.employer
				}
			}
			family.head_of_family = {
				save_scope_as = holding_target
			}
			if = {
				limit = {
					exists = scope:holding_target
				}
				while = {
					limit = {
						num_holdings_owned > 0
					}
					random_holdings = {
						save_scope_as = holding_transfer
					}
					remove_holding = scope:holding_transfer
					scope:holding_target = {
						add_holding = scope:holding_transfer
					}
				}
			}
		}
		employer = {
			calculate_succession_effect = yes
		}

		###Section 6: Various Fixes

		# Remove negative (non-congenital and non-dna-modified) health traits that effect stats from dead deified characters so apotheosis effects work correctly
		# This is so silly things like a dead guy being stressed preventing apotheosis effects from working because they reduce the character's stats.

		# traits = ["stressed", "invalid", "hemorrhagic_fever", "plague", "mentagra", "arthritis", "pox", "dysentery", "inflammation", "wounded", "gangrene", "leper", "maimed", "frail", "paralysis", "brain_damaged", "mourning", "depressed", "dementia", "cancer", "gout"]
		# for i in traits: print(f"if = {{\n\tlimit = {{\n\t\thas_trait = {i}\n\t}}\n\tremove_trait = {i}\n}}")
		if = {
			limit = {
				is_deified = yes
			}
			if = {
				limit = {
					has_trait = stressed
				}
				remove_trait = stressed
			}
			if = {
				limit = {
					has_trait = invalid
				}
				remove_trait = invalid
			}
			if = {
				limit = {
					has_trait = hemorrhagic_fever
				}
				remove_trait = hemorrhagic_fever
			}
			if = {
				limit = {
					has_trait = plague
				}
				remove_trait = plague
			}
			if = {
				limit = {
					has_trait = mentagra
				}
				remove_trait = mentagra
			}
			if = {
				limit = {
					has_trait = arthritis
				}
				remove_trait = arthritis
			}
			if = {
				limit = {
					has_trait = pox
				}
				remove_trait = pox
			}
			if = {
				limit = {
					has_trait = dysentery
				}
				remove_trait = dysentery
			}
			if = {
				limit = {
					has_trait = inflammation
				}
				remove_trait = inflammation
			}
			if = {
				limit = {
					has_trait = wounded
				}
				remove_trait = wounded
			}
			if = {
				limit = {
					has_trait = gangrene
				}
				remove_trait = gangrene
			}
			if = {
				limit = {
					has_trait = leper
				}
				remove_trait = leper
			}
			if = {
				limit = {
					has_trait = maimed
				}
				remove_trait = maimed
			}
			if = {
				limit = {
					has_trait = frail
				}
				remove_trait = frail
			}
			if = {
				limit = {
					has_trait = paralysis
				}
				remove_trait = paralysis
			}
			if = {
				limit = {
					has_trait = brain_damaged
				}
				remove_trait = brain_damaged
			}
			if = {
				limit = {
					has_trait = mourning
				}
				remove_trait = mourning
			}
			if = {
				limit = {
					has_trait = depressed
				}
				remove_trait = depressed
			}
			if = {
				limit = {
					has_trait = dementia
				}
				remove_trait = dementia
			}
			if = {
				limit = {
					has_trait = cancer
				}
				remove_trait = cancer
			}
			if = {
				limit = {
					has_trait = gout
				}
				remove_trait = gout
			}
		}
	}
}
