###Adds more variety to Egyptian female naming - Snowlet

on_reign_ending_successor = { #scope:former_ruler = the successor, because onactions..., root = country,
	effect = { 
		scope:former_ruler = {
			if = {
				limit = {
					has_character_modifier = foreign_citizen
				}
				remove_character_modifier = foreign_citizen
			}
		}
		if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				tag = EGY
				exists = fam:Lagid
				scope:former_ruler = {
					NOT = { THIS = char:43 } # Ptolemaios Keraunos
					NOT = { THIS = char:45 } # Ptolemaios Philadelphos
					is_minor_character = no
					family = root.fam:Lagid
				}
			}
			scope:former_ruler = {
				switch = {
					trigger = is_male
					yes = {
						set_firstname = Ptolemaios
						save_scope_as = ptolemaios_scope
						char:42 = { save_scope_as = ptolemaios_soter }
						employer = { trigger_event = { id = heir_events.2 } }
					}
					no = {
						random_list = {
							80 = {
								set_firstname = Kleopatra
							}
							10 = {
								set_firstname = Arsinoe
							}
							10 = {
								set_firstname = Berenice
							}
						}
						save_scope_as = kleo_scope
						employer = { trigger_event = { id = heir_events.3 } }
					}
				}
			}
		}
		else_if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				tag = SEL
				exists = fam:Seleukid
				scope:former_ruler = {
					NOT = { THIS = char:26 } # Antiochos I
					is_minor_character = no
					family = root.fam:Seleukid
					NOT = { has_variable = took_on_regnal_name }
				}
			}
			scope:former_ruler = {
				if = {
					limit = { is_male = yes }
					if = {
						limit = {
							employer = { has_variable = had_antiochos }
						}
						set_firstname = Seleukos
						save_scope_as = seleukos_scope
						employer = { remove_variable = had_antiochos }
					}
					else = {
						set_firstname = Antiochos
						save_scope_as = antiochos_scope
						employer = { set_variable = had_antiochos }
					}
					employer = { trigger_event = { id = heir_events.1 } }
				}
			}
		}
		else_if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				heritage = mithridatic_heritage
				exists = fam:Mithridatid
				scope:former_ruler = {
					family = root.fam:Mithridatid
					NOT = { THIS = char:228 } # Kitstes
				}
			}
			scope:former_ruler = {
				switch = {
					trigger = is_male
					yes = {
						save_scope_as = mithridates_scope
						random_list = {
							70 = {
								set_firstname = Mithridates
							}
							20 = {
								set_firstname = Pharnakes
							}
							10 = {
								set_firstname = Ariobarzanes
							}
						}
						employer = { trigger_event = { id = heir_events.12 } }
					}
					no = {

					}
				}
			}
		}
		else_if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				tag = BIT
				exists = fam:Zipoeteid
				scope:former_ruler = {
					NOT = { THIS = char:307 } # Bas
					NOT = { THIS = char:90 } # Boteiras
					NOT = { THIS = char:306 } # Zipoetes II
					is_male = yes
					is_minor_character = no
					family = root.fam:Zipoeteid
					NOT = { has_variable = took_on_regnal_name }
				}
			}
			scope:former_ruler = {
				if = {
					limit = { is_male = yes }
					if = {
						limit = {
							employer = { has_variable = had_nikomedes }
						}
						set_firstname = Prusias
						save_scope_as = prusias_scope
						employer = { remove_variable = had_nikomedes }
					}
					else = {
						set_firstname = Nikomedes
						save_scope_as = nikomedes_scope
						employer = { set_variable = had_nikomedes }
					}
					employer = { trigger_event = { id = heir_events.13 } }
				}
			}
		}
		else_if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				heritage = attalid_heritage
				exists = fam:Attalid
				scope:former_ruler = {
					NOT = { THIS = char:67 } # Attalos, father of Philetairos, Eumenes, and Attalos
					NOT = { THIS = char:386 } # Eumenes, father of Eumenes I
					NOT = { THIS = char:389 } # Eumenes I
					NOT = { THIS = char:390 } # Attalos, brother of Philetairos and Eumenes
					is_male = yes
					is_minor_character = no
					family = root.fam:Attalid
					NOT = { has_variable = took_on_regnal_name }
				}
			}
			scope:former_ruler = {
				if = {
					limit = {
						employer = { has_variable = had_attalos }
					}
					set_firstname = Eumenes
					save_scope_as = eumenes_scope
					employer = { remove_variable = had_attalos }
				}
				else = {
					set_firstname = Attalos
					save_scope_as = attalos_scope
					employer = { set_variable = had_attalos }
				}
				employer = { trigger_event = heir_events.14 }
			}
		}
		else_if = {
			limit = {
				NOT = { has_law = elective_succession_law }
				heritage = olbe_cilicia_heritage
				exists = fam:Teucrid
				scope:former_ruler = {
					family = root.fam:Teucrid
				}
			}
			scope:former_ruler = {
				switch = {
					trigger = is_male
					yes = {
						save_scope_as = teucer_scope
						random_list = {
							50 = {
								set_firstname = Teucer
							}
							50 = {
								set_firstname = Ajax
							}
						}
						employer = { trigger_event = { id = heir_events.15 } }
					}
					no = {

					}
				}
			}
		}
	}
}