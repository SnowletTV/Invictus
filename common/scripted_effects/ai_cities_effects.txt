ai_try_upgrading_city_to_metropolis = {
    if = {
        limit = {
            is_ai = yes
            war = no
            # Required for founding metropolises
            NOT = {
                has_law = nomadic_law_tribal
            }
            can_pay_price = price_found_metropolis
        }
        random_country_state = {
            limit = {
                capital_scope = {
                    is_state_capital = yes
                    has_city_status = yes
                    NOT = {
                        has_province_rank = city_metropolis
                    }
                    NOT = {
                        has_province_modifier = founding_metropolis_in_progress
                    }
                    total_population >= 80
                }
            }
            weight = {
                modifier = {
                    factor = 1000
                    is_capital_state = yes
                }
            }
            capital_scope = {
                owner = {
                    pay_price = price_found_metropolis
                }
                add_province_modifier = {
                    name = founding_metropolis_in_progress
                    duration = 730
                }
                trigger_event = {
                    id = state_improvement.7
                    days = 730
                }
            }
        }
    }
}

ai_choose_territory_and_found_city = {
    if = {
        limit = {
            is_ai = yes
            war = no
            ai_cities_allowed_per_country > 0
            can_pay_price = price_found_city
        }

        if = {
            limit = {
                capital_scope = {
                    has_city_status_or_founding_in_progress = no
                }
                OR = {
                    ai_cities_allowed_per_country >= 2
                    num_of_cities_in_country_plus_1 <= ai_cities_allowed_per_country
                }
            }
            pay_price = price_found_city
            capital_scope = {
                add_province_modifier = {
				    name = founding_city_in_progress
                    duration = 730
                }
                trigger_event = {
                    id = state_improvement.6
                    days = 730
                }
            }
        }
        else = {

            # Looping through all territories is expensive, and doing it multiple times is even worse.
            # Instead we loop through them once and save the information needed to local variables.
            set_local_variable = {
                name = num_of_cities
                value = 0
            }
            set_local_variable = {
                name = num_of_cities_with_2_or_more_free_slots
                value = 0
            }
            every_owned_province = {
                limit = {
                    has_city_status_or_founding_in_progress = yes
                }
                change_local_variable = {
                    name = num_of_cities
                    add = 1
                }
                if = {
                    limit = {
                        free_building_slots >= 2
                    }
                    change_local_variable = {
                        name = num_of_cities_with_2_or_more_free_slots
                        add = 1
                    }
                }
            }

            if = {
                limit = {
                    # Can make use of local_var:num_of_cities
                    num_of_cities_in_country_plus_1 <= ai_cities_allowed_per_country
                    # Don't build new cities until existing ones are developed
                    local_var:num_of_cities_with_2_or_more_free_slots = 0
                }

                # This is fired rarely and has many additional computations, so don't merge it with the preemptive loop
                every_owned_province = {
                    limit = {
                        has_city_status_or_founding_in_progress = no
                        NOT = {
                            terrain = steppes
                        }
                        num_of_cities_in_same_area_plus_1 <= ai_max_num_of_cities_in_same_area
                        num_of_cities_in_same_state_plus_1 <= ai_max_num_of_cities_in_same_state
                    }
                    add_to_local_variable_list = {
                        name = eligible_territories
                        target = this
                    }
                }

                if = {
                    limit = {
                        has_local_variable_list = eligible_territories
                        local_variable_list_size = {
                            name = eligible_territories
                            value > 0
                        }
                    }

                    # Culture priority
                    # 1) nobles
                    # 2) citizen
                    # 3) freemen
                    # 4) else: unintegrated
                    if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                is_dominant_territory_culture_rights_equal_to = {
                                    pop_type = nobles
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    is_dominant_territory_culture_rights_equal_to = {
                                        pop_type = nobles
                                    }
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                is_dominant_territory_culture_rights_equal_to = {
                                    pop_type = citizen
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    is_dominant_territory_culture_rights_equal_to = {
                                        pop_type = citizen
                                    }
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                is_dominant_territory_culture_rights_equal_to = {
                                    pop_type = freemen
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    is_dominant_territory_culture_rights_equal_to = {
                                        pop_type = freemen
                                    }
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }

                    # Remove everything below top 25% by population to reduce number of cities with barely any pops
                    set_local_variable = {
                        name = eligible_territories_cutoff_by_pops
                        value = {
                            value = 0
                            every_in_local_list = {
                                variable = eligible_territories
                                add = 1
                            }
                            multiply = 0.25
                            round = yes
                            min = 1
                        }
                    }
                    ordered_in_local_list = {
                        variable = eligible_territories
                        order_by = total_population
                        min = local_var:eligible_territories_cutoff_by_pops
                        check_range_bounds = no # In case there's only 1 territory in list
                        remove_list_local_variable = {
                            name = eligible_territories
                            target = this
                        }
                    }
                    remove_local_variable = eligible_territories_cutoff_by_pops

                    # Resource priority:
                    # 1) nor mine nor farm
                    # 2) mine (we can still use it city)
                    # 3) else: farm (lowest in prio so we don't lose food)
                    if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                NOR = {
                                    has_minable_trade_good_trigger = yes
                                    has_food_trade_good_trigger = yes
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                OR = {
                                    has_minable_trade_good_trigger = yes
                                    has_food_trade_good_trigger = yes
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                has_minable_trade_good_trigger = yes
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                has_minable_trade_good_trigger = no
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }

                    # Water priority:
                    # 1) can have port
                    # 2) major river
                    # 3) minor river
                    # 4) else: no water
                    if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                can_have_port = yes
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    can_have_port = yes
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                is_adjacent_to_major_river = yes
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    is_adjacent_to_major_river = yes
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                has_minor_river = yes
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    has_minor_river = yes
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }

                    # Terrain priority: 
                    # 1) flood_plain
                    # 2) farmland, oasis
                    # 3) plains, hills
                    # 4) forest, marsh
                    # 5) jungle, desert_hills
                    # 6) else: mountain, desert
                    if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                terrain = flood_plain
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOT = {
                                    terrain = flood_plain
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                OR = {
                                    terrain = farmland
                                    terrain = oasis
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOR = {
                                    terrain = farmland
                                    terrain = oasis
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                OR = {
                                    terrain = plains
                                    terrain = hills
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOR = {
                                    terrain = plains
                                    terrain = hills
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                OR = {
                                    terrain = forest
                                    terrain = marsh
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOR = {
                                    terrain = forest
                                    terrain = marsh
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            any_in_local_list = {
                                variable = eligible_territories
                                OR = {
                                    terrain = jungle
                                    terrain = desert_hills
                                }
                            }
                        }
                        every_in_local_list = {
                            variable = eligible_territories
                            limit = {
                                NOR = {
                                    terrain = jungle
                                    terrain = desert_hills
                                }
                            }
                            remove_list_local_variable = {
                                name = eligible_territories
                                target = this
                            }
                        }
                    }

                    # Create city in weighted random territory out of eligible
                    random_in_local_list = {
                        variable = eligible_territories
                        weight = {
                            modifier = {
                                add = total_population
                            }
                            modifier = {
                                factor = 1.5
                                is_state_capital = yes
                            }
                        }
                        root = {
                            pay_price = price_found_city
                        }
                        add_province_modifier = {
                            name = founding_city_in_progress
                            duration = 730
                        }
                        trigger_event = {
                            id = state_improvement.6
                            days = 730
                        }
                    }

                    clear_local_variable_list = eligible_territories
                }
            }

            # Garbage collection
            remove_local_variable = num_of_cities
            remove_local_variable = num_of_cities_with_2_or_more_free_slots
        }

    }
}

# Performed exactly once a year by setting a global variable, the scope that calls it doesn't matter
ai_colonize_unowned_territories = {
    if = {
        limit = {
            NOT = {
                has_global_variable = ai_colonized_unowned_territories
            }
        }
        set_global_variable = {
            name = ai_colonized_unowned_territories
            days = 365
        }

        # Check all uncolonized territories in the world, prioritizing ones with higher population first
        ordered_ownable_province = {
            limit = {
                NOT = {
                    exists = owner
                }
            }
            order_by = total_population
            # Won't loop through all territories otherwise
            min = 0
            max = 999999
            check_range_bounds = no

            # Create list of AI territories that are eligible to colonize this one
            every_neighbor_province = {
                
                # Neighbour land territories
                if = {
                    limit = {
                        is_water = no
                    }
                    if = {
                        limit = {
                            NOT = {
                                is_target_in_local_variable_list = {
                                    name = territories_to_colonize_from
                                    target = this
                                }
                            }
                        }
                        add_to_local_variable_list = {
                            name = territories_to_colonize_from
                            target = this
                        }
                    }
                }
                
                # One level deep over water
                else = {

                    # Land territories one level deep over water
                    every_neighbor_province = {
                        if = {
                            limit = {
                                is_water = no
                            }
                            if = {
                                limit = {
                                    NOT = {
                                        is_target_in_local_variable_list = {
                                            name = territories_to_colonize_from
                                            target = this
                                        }
                                    }
                                }
                                add_to_local_variable_list = {
                                    name = territories_to_colonize_from
                                    target = this
                                }
                            }
                        }

                        # Two levels deep over water
                        else = {

                            # Land territories two levels deep over water
                            every_neighbor_province = {
                                limit = {
                                    is_water = no
                                }
                                if = {
                                    limit = {
                                        NOT = {
                                            is_target_in_local_variable_list = {
                                                name = territories_to_colonize_from
                                                target = this
                                            }
                                        }
                                    }
                                    add_to_local_variable_list = {
                                        name = territories_to_colonize_from
                                        target = this
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if = {
                limit = {
                    has_local_variable_list = territories_to_colonize_from
                    local_variable_list_size = {
                        name = territories_to_colonize_from
                        value > 0
                    }
                }
                save_scope_as = territory_to_colonize
                ordered_in_local_list = {
                    variable = territories_to_colonize_from
                    limit = {
                        ai_can_colonize_from_this_territory = yes
                    }
                    order_by = total_population
                    position = 0

                    owner = {
                        add_treasury = -10
                    }
                    random_pops_in_province = {
                        limit = {
                            NOT = {
                                pop_type = slaves
                            }
                        }
                        move_pop = scope:territory_to_colonize
                    }
                    scope:territory_to_colonize = {
                        set_owned_by = prev.owner
                    }
                    set_variable = {
                        name = ai_colonized_from_this_territory
                        days = 365
                    }
                }
                clear_saved_scope = territory_to_colonize
                clear_local_variable_list = territories_to_colonize_from
            }
        }
    }
}

# Note that this may kinda steal goods due to add_trade_route probably ignoring a lot of things
ai_import_into_low_food_states = {
    if = {
        limit = {
            NOT = {
                has_global_variable = ai_imported_into_low_food_states
            }
        }
        set_global_variable = {
            name = ai_imported_into_low_food_states
            days = 365
        }

        ordered_country = {
            limit = {
                has_land = yes
                is_ai = yes
                any_country_state = {
                    unused_trade_routes > 0
                    state_has_low_food = yes
                }
            }
            order_by = country_population
            min = 0
            max = 999999
            check_range_bounds = no

            save_scope_as = importing_country
            
            every_country = {
                limit = {
                    has_land = yes
                    OR = {
                        this = scope:importing_country
                        AND = {
                            # Don't steal trade goods from players
                            is_ai = yes
                            # Required for trading
                            scope:importing_country = {
                                in_diplomatic_range = prev
                            }
                            NOT = {
                                war_with = scope:importing_country
                            }
                            # Threshold where negative opinion outweights the base value
                            opinion = {
                                target = scope:importing_country
                                value > -120
                            }
                            # Allowed to trade all the goods we are looking for
                            is_trade_goods_allowed = grain
                            is_trade_goods_allowed = cattle
                            is_trade_goods_allowed = fish
                            is_trade_goods_allowed = vegetables
                            is_trade_goods_allowed = olive
                        }
                    }
                }

                # Save states to export from to variable lists in country scope. The reason is that there may be a lot
                # of low food states in the world, so it's much better to make every country loop over its states only
                # once and save the result, rather than do it over and over again for each country with low food states
                if = {
                    limit = {
                        NOT = {
                            has_variable = ai_created_lists_of_food_states
                        }
                    }                    
                    set_variable = ai_created_lists_of_food_states
                    every_country_state = {
                        limit = {
                            # Don't steal food from states that need it themselves
                            share_of_cities_in_state < 0.1667
                            # Disloyal states can't export goods
                            state_is_disloyal = no
                        }
                        # Limit it to widely available food, don't steal relatively rare capital effects from players
                        ai_add_to_list_if_state_can_export = {
                            goods = grain
                        }
                        ai_add_to_list_if_state_can_export = {
                            goods = cattle
                        }
                        ai_add_to_list_if_state_can_export = {
                            goods = fish
                        }
                        ai_add_to_list_if_state_can_export = {
                            goods = vegetables
                        }
                        ai_add_to_list_if_state_can_export = {
                            goods = olive
                        }
                    }
                }

                # Copy country scope lists into local lists made specifically for the country with low food state
                ai_duplicate_states_that_can_export = {
                    goods = grain
                }
                ai_duplicate_states_that_can_export = {
                    goods = cattle
                }
                ai_duplicate_states_that_can_export = {
                    goods = fish
                }
                ai_duplicate_states_that_can_export = {
                    goods = vegetables
                }
                ai_duplicate_states_that_can_export = {
                    goods = olive
                }
            }

            # Check if at least any of the lists exists before proceeding
            if = {
                limit = {
                    OR = {
                        AND = {
                            has_local_variable_list = states_to_import_grain_from
                            local_variable_list_size = {
                                name = states_to_import_grain_from
                                value > 0
                            }
                        }
                        AND = {
                            has_local_variable_list = states_to_import_cattle_from
                            local_variable_list_size = {
                                name = states_to_import_cattle_from
                                value > 0
                            }
                        }
                        AND = {
                            has_local_variable_list = states_to_import_fish_from
                            local_variable_list_size = {
                                name = states_to_import_fish_from
                                value > 0
                            }
                        }
                        AND = {
                            has_local_variable_list = states_to_import_vegetables_from
                            local_variable_list_size = {
                                name = states_to_import_vegetables_from
                                value > 0
                            }
                        }
                        AND = {
                            has_local_variable_list = states_to_import_olive_from
                            local_variable_list_size = {
                                name = states_to_import_olive_from
                                value > 0
                            }
                        }
                    }
                }
                every_country_state = {
                    limit = {
                        unused_trade_routes > 0
                        state_has_low_food = yes
                    }
                    save_scope_as = importing_state
                    if = {
                        limit = {
                            is_capital_state = yes
                            trade_good_surplus = {
                                target = olive
                                value < 2
                            }
                        }
                        ai_import_goods_into_specific_state = {
                            goods = olive
                        }
                    }
                    ai_import_goods_into_specific_state = {
                        goods = grain
                    }
                    random_list = {
                        50 = {
                            ai_import_goods_into_specific_state = {
                                goods = cattle
                            }
                            ai_import_goods_into_specific_state = {
                                goods = fish
                            }
                        }
                        50 = {
                            ai_import_goods_into_specific_state = {
                                goods = fish
                            }
                            ai_import_goods_into_specific_state = {
                                goods = cattle
                            }
                        }
                    }
                    ai_import_goods_into_specific_state = {
                        goods = vegetables
                    }
                    if = {
                        limit = {
                            OR = {
                                is_capital_state = no
                                trade_good_surplus = {
                                    target = olive
                                    value >= 2
                                }
                            }
                        }
                        ai_import_goods_into_specific_state = {
                            goods = olive
                        }
                    }
                    clear_saved_scope = importing_state
                }

                # Clear combined local lists
                clear_local_variable_list = states_to_import_grain_from
                clear_local_variable_list = states_to_import_cattle_from
                clear_local_variable_list = states_to_import_fish_from
                clear_local_variable_list = states_to_import_vegetables_from
                clear_local_variable_list = states_to_import_olive_from
            }
            
            clear_saved_scope = importing_country
        }

        # After all low food states got their trade routes, clear data saved on country level
        every_country = {
            limit = {
                has_variable = ai_created_lists_of_food_states
            }
            remove_variable = ai_created_lists_of_food_states
            clear_variable_list = states_that_can_export_grain
            clear_variable_list = states_that_can_export_cattle
            clear_variable_list = states_that_can_export_fish
            clear_variable_list = states_that_can_export_vegetables
            clear_variable_list = states_that_can_export_olive
        }
    }
}

# State scope, creates states_that_can_export_$goods$ variable list in country scope
ai_add_to_list_if_state_can_export = {
    if = {
        limit = {
            trade_good_surplus = {
                target = $goods$
                value >= 2
            }
        }
        owner = {
            add_to_variable_list = {
                name = states_that_can_export_$goods$
                target = prev
            }
        }
    }
}

# Country scope, expects states_that_can_export_$goods$ variable list to be set
ai_duplicate_states_that_can_export = {
    if = {
        limit = {
            has_variable_list = states_that_can_export_$goods$
            variable_list_size = {
                name = states_that_can_export_$goods$
                value > 0
            }
        }
        every_in_list = {
            variable = states_that_can_export_$goods$
            add_to_local_variable_list = {
                name = states_to_import_$goods$_from
                target = this
            }
        }
    }
}

# State scope, requires scope:importing_state, expects local variable list states_to_import_$goods$_from
ai_import_goods_into_specific_state = {
    if = {
        limit = {
            has_local_variable_list = states_to_import_$goods$_from
            local_variable_list_size = {
                name = states_to_import_$goods$_from
                value > 0
            }
            unused_trade_routes > 0
        }

        set_local_variable = {
            name = importing_state_unused_trade_routes
            value = unused_trade_routes
        }

        ordered_in_local_list = {
            variable = states_to_import_$goods$_from
            # Need to re-check because this could change after previous routes
            limit = {
                trade_good_surplus = {
                    target = $goods$
                    value >= 2
                }
                scope:importing_state = {
                    can_create_trade_route = {
                        target = prev
                        goods = $goods$
                    }
                }
            }
            order_by = reverse_outgoing_trade_routes
            min = 0
            max = importing_state_unused_trade_routes
            check_range_bounds = no

            scope:importing_state = {
                add_trade_route = {
                    target = prev
                    goods = $goods$
                }
            }
        }

        remove_local_variable = importing_state_unused_trade_routes
    }
}

ai_manually_move_pops_to_cities = {
    if = {
        limit = {
            is_advanced_ai_enabled = yes
            NOT = {
                has_global_variable = game_rule_advanced_ai_move_population
            }
            is_ai = yes
            war = no
            treasury >= ai_wartime_fund_to_build
        }
        random_owned_province = {
            limit = {
                has_city_status = yes
                # Target population is actually higher, see below
                trigger_if = {
                    limit = {
                        owner = {
                            is_tribal = no
                        }
                    }
                    total_population < population_cap_75_percent
                }
                trigger_else = {
                    total_population < population_cap_65_percent
                }
                state = {
                    state_has_low_food = no
                }
            }
            weight = {
                modifier = {
                    factor = territory_population_until_cap
                }
            }

            save_scope_as = underpopulated_city

            every_neighbor_province = {
                limit = {
                    exists = owner
                    owner = {
                        this = prev.owner
                    }
                    ai_can_move_pops_from_territory = yes
                }
                add_to_local_variable_list = {
                    name = territories_to_move_pops_from
                    target = this
                }
            }
            state = {
                every_state_province = {
                    limit = {
                        NOT = {
                            this = scope:underpopulated_city
                        }
                        ai_can_move_pops_from_territory = yes
                    }
                    add_to_local_variable_list = {
                        name = territories_to_move_pops_from
                        target = this
                    }
                }
            }

            if = {
                limit = {
                    has_non_empty_local_variable_list = {
                        name = territories_to_move_pops_from
                    }
                }

                set_local_variable = {
                    name = num_pops_to_move
                    value = {
                        # 10 percent more than entry trigger so we don't move 1 pop
                        if = {
                            limit = {
                                owner = {
                                    is_tribal = no
                                }
                            }
                            value = population_cap_85_percent
                        }
                        else = {
                            value = population_cap_75_percent
                        }
                        value = population_cap_75_percent 
                        subtract = total_population
                        min = 3
                        max = population_cap_40_percent
                        round = yes
                    }
                }

                while = {
                    count = local_var:num_pops_to_move

                    random_in_local_list = {
                        variable = territories_to_move_pops_from
                        # Recheck after previous moves
                        limit = {
                            owner = {
                                treasury >= 10
                            }
                            ai_can_move_pops_from_territory = yes
                        }
                        weight = {
                            modifier = {
								factor = total_population
							}
                        }
                        random_pops_in_province = {
                            limit = {
                                ai_pops_are_allowed_to_be_moved = yes
                            }
                            if = {
                                limit = {
                                    pop_type = tribesmen
                                }
                                country = {
                                    add_treasury = {
                                        value = 0
                                        subtract = tribesmen_move_cost_svalue
                                    }
                                }
                            }
                            else = {
                                country = {
                                    add_treasury = {
                                        value = 0
                                        subtract = slaves_move_cost_svalue
                                    }
                                }
                            }
                            move_pop = scope:underpopulated_city
                        }
                    }
                }

                remove_local_variable = num_pops_to_move

                clear_local_variable_list = territories_to_move_pops_from
            }

            clear_saved_scope = underpopulated_city
        }
    }
}