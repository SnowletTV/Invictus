# Mega effect because all this stuff is highly interdependent and uses every_country_state which so better to combine
ai_handle_forts_and_state_capitals = {
    if = {
        limit = {
            OR = {
                $periodic$ = 0
                NOT = {
                    has_variable = cached_border_states
                }
            }
            has_land = yes
        }
        set_variable = {
            name = cached_border_states
            days = 710 # 1 year + 11.5 months - every 2 years
        }

        clear_variable_list = country_border_states
        every_country_state = {
            ai_cache_if_state_is_borderland = yes
        }

        if = {
            limit = {
                is_ai = yes
            }
            ai_consolidate_capital_forts = yes
            if = {
                limit = {
                    war = no
                }
                every_country_state = {
                    ai_move_state_capitals_to_optimal = yes
                    ai_optimize_forts = yes
                }
            }
        }
    }
}

ai_cache_if_state_is_borderland = {
    if = {
        limit = {
            save_temporary_scope_as = evaluated_state
            OR = {
                any_state_province = {
                    OR = {
                        has_city_status = yes
                        has_province_modifier = lesser_pass_modifier
                    }
                }
                area = {
                    any_area_province = {
                        percent > 0.3333
                        exists = state
                        state = scope:evaluated_state
                    }
                }
            }
            OR = {
                any_state_province = {
                    OR = {
                        is_coastal = yes
                        is_adjacent_to_major_river = yes
                    }
                }
                area = {
                    # Any state in same area neighboring to evaluated is not ruled by us
                    any_area_state = {
                        owner = {
                            NOR = {
                                this = scope:evaluated_state.owner
                                AND = {
                                    is_subject_of = scope:evaluated_state.owner
                                    is_permanent_subject = yes
                                }
                            }
                        }
                        state_is_neighbor_of_including_unowned = {
                            state = scope:evaluated_state
                        }
                    }
                }
                area = {
                    any_neighbor_area = {
                        OR = {
                            # Any state in neighbor areas neighboring to evaluated is not ruled by us
                            any_area_state = {
                                owner = {
                                    NOR = {
                                        this = scope:evaluated_state.owner
                                        AND = {
                                            is_subject_of = scope:evaluated_state.owner
                                            is_permanent_subject = yes
                                        }
                                    }
                                }
                                state_is_neighbor_of_including_unowned = {
                                    state = scope:evaluated_state
                                }
                            }
                            # Neighbor area is fully unowned but can be used for army movement
                            AND = {
                                any_area_state = {
                                    count = 0
                                }
                                any_area_province = {
                                    is_water = no
                                }
                            }
                        }
                    }
                }
            }
        }
        owner = {
            add_to_variable_list = {
                name = country_border_states
                target = prev
            }
        }
    }
}

ai_move_state_capitals_to_optimal = {
    if = {
        limit = {
            # Vanilla requirements for moving state capital
            is_capital_state = no
            capital_scope.state_loyalty >= 50
            # Additional requirements to not ruin state loyalty
            OR = {
                AND = {
                    capital_scope.state_loyalty >= 70
                    monthly_state_loyalty_without_policy >= 0
                }
                AND = {
                    capital_scope.state_loyalty >= 80
                    monthly_state_loyalty_without_policy >= -0.05
                }
                AND = {
                    capital_scope.state_loyalty >= 90
                    monthly_state_loyalty_without_policy >= -0.10
                }
            }
            # Current capital is not the one we moved to recently
            NOT = {
                capital_scope = {
                    has_variable = ai_moved_state_capital_to_this
                }
            }
        }
        ordered_state_province = {
            order_by = territory_priority_for_state_capital
            position = 0
            
            if = {
                limit = {
                    is_state_capital = no
                }
                add_state_loyalty = {
                    value = province_capital_price_svalue
                    multiply = -1
                }
                state = {
                    set_state_capital = prev
                }
                set_variable = {
                    name = ai_moved_state_capital_to_this
                    days = 1825 # 5 years cooldown
                }
            }
        }
    }
}

ai_optimize_forts = {
    if = {
        limit = {
            state_is_disloyal = no
        }
        ordered_state_province = {
            limit = {
                ai_fort_level_is_higher_than_wanted = yes
            }
            order_by = {
                # Start from lower lvl forts, as first level eats up a lot of limit
                value = 0
                subtract = fort_level_including_construction
                # Prefer cancelling ongoing constructions over removing existing forts
                if = {
                    limit = {
                        has_specific_construction = fortress_building
                    }
                    add = 1000
                }
            }
            min = 0

            while = {
                limit = {
                    ai_fort_level_is_higher_than_wanted = yes
                    # Only remove fort if can immediately start building another one to keep num of them consistent
                    trigger_if = {
                        limit = {
                            has_specific_construction = fortress_building
                        }
                        owner = {
                            treasury_after_cancelling_fort >= country_fortress_building_cost
                        }
                    }
                    trigger_else = {
                        owner = {
                            treasury_after_removing_fort >= country_fortress_building_cost
                        }
                    }
                }

                if = {
                    limit = {
                        has_specific_construction = fortress_building
                    }
                    cancel_building_construction = fortress_building
                }
                else = {
                    remove_building_level = fortress_building
                }

                # Try building a fort to replace it, starting from the same state
                state = {
                    if = {
                        limit = {
                            any_state_province = {
                                ai_can_rebuild_fort_to_territory = yes
                            }
                        }
                        if = {
                            limit = {
                                capital_scope = {
                                    ai_can_rebuild_fort_to_territory = yes
                                }
                            }
                            capital_scope = {
                                start_building_construction = fortress_building
                            }
                        }
                        else = {
                            random_state_province = {
                                limit = {
                                    ai_can_rebuild_fort_to_territory = yes
                                }
                                start_building_construction = fortress_building
                            }
                        }
                    }
                    # If same state doesn't fit, search for it country wide
                    else = {
                        owner = {
                            # First check capital TERRITORY so it's never defenseless
                            if = {
                                limit = {
                                    capital_scope = {
                                        ai_can_rebuild_fort_to_territory = yes
                                    }
                                }
                                capital_scope = {
                                    start_building_construction = fortress_building
                                }
                            }
                            # Otherwise go for other states, preferring border
                            else = {
                                random_country_state = {
                                    limit = {
                                        state_is_disloyal = no
                                        any_state_province = {
                                            ai_can_rebuild_fort_to_territory = yes
                                        }
                                    }
                                    weight = {
                                        modifier = {
                                            add = 100
                                            state_is_border = yes
                                        }
                                    }
                                    random_state_province = {
                                        limit = {
                                            ai_can_rebuild_fort_to_territory = yes
                                        }
                                        start_building_construction = fortress_building
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

ai_consolidate_capital_forts = {
    if = {
        limit = {
            capital_scope = {
                fort_level_including_construction > 0
            }
        }
        capital_scope.state = {
            while = {
                limit = {
                    state_fort_limit_used > state_fort_limit_svalue
                    any_state_province = {
                        is_capital = no
                        OR = {
                            NOT = {
                                exists = controller
                            }
                            controller = owner
                        }
                        fort_level_including_construction > 0
                    }
                }
                ordered_state_province = {
                    limit = {
                        is_capital = no
                        OR = {
                            NOT = {
                                exists = controller
                            }
                            controller = owner
                        }
                    }
                    order_by = fort_level_including_construction
                    position = 0

                    if = {
                        limit = {
                            has_specific_construction = fortress_building
                        }
                        cancel_building_construction = fortress_building
                    }
                    remove_building_level = fortress_building
                }
            }
        }
    }
}