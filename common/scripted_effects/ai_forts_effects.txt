# To use in territory_is_ownable trigger, as checking presence in global list is blazing fast
create_list_of_ownable_territories = {
    if = {
        limit = {
            NOT = {
                has_non_empty_global_variable_list = {
                    name = ownable_territories
                }
            }
        }
        every_ownable_province = {
            add_to_global_variable_list = {
                name = ownable_territories
                target = this
            }
        }
    }
}

ai_mark_acquired_fort_territory = {
    if = {
        limit = {
            # Sanity checks just in case
            exists = owner
            exists = state

            # There's a fort waiting to get optimized
            num_of_fortress_building > 0

            # Is territory of AI country
            owner = {
                is_ai = yes
                has_land = yes
            }

            # Is not in an ongoing war with a country that the territory was taken away from
            save_temporary_scope_as = territory_with_changed_owner
            NOT = {
                owner = {
                    any_countries_at_war_with = {
                        scope:territory_with_changed_owner = {
                            is_previous_owner = prev
                        }
                    }
                }
            }
        }
        set_variable = {
            name = ai_acquired_territory_with_fort
            days = 30
        }
        state = {
            set_variable = {
                name = ai_has_acquired_fort_territory
                days = 30
            }
        }
    }
}

# Mega effect because all this stuff is highly interdependent and uses every_country_state which so better to combine
ai_handle_forts_and_state_capitals = {
    if = {
        limit = {
            OR = {
                $periodic$ = 0
                NOT = {
                    has_variable = ai_handled_forts_and_state_capitals
                }
            }
            has_land = yes
        }
        # Base fort build time is 720 days, so wouldn't expect changes more often than that for periodic
        set_variable = {
            name = ai_handled_forts_and_state_capitals
            days = 710 # 1 year + 11.5 months - every 2 years
        }

        # In first round of state effects gather country wide data and prepare states for fort optimization
        every_country_state = {

            if = {
                limit = {
                    state_is_disloyal = no
                    owner = {
                        is_ai = yes
                        war = no
                    }
                }
                ai_move_state_capital_to_optimal = yes
            }

            ai_cache_fort_optimization_data = yes

            if = {
                limit = {
                    state_is_disloyal = no
                    owner = {
                        is_ai = yes
                        war = no
                    }
                }
                every_state_province = {
                    ai_free_building_slots_for_forts = yes
                }
            }

            # If there are newly acquired territories with forts, cache budget data if hasn't yet
            if = {
                limit = {
                    has_variable = ai_has_acquired_fort_territory
                    OR = {
                        NOT = {
                            has_local_variable = country_tax_income_without_modifiers
                        }
                        NOT = {
                            has_local_variable = fort_maintenance_without_modifiers
                        }
                    }
                }
                owner = {
                    ai_cache_tax_income_and_fort_budget = yes
                }
            }
        }

        if = {
            limit = {
                is_ai = yes
            }
            # In the second round of state effects perform destroying, cancelling, rebuilding of forts
            set_local_variable = {
                name = num_rebuilt_forts_this_iteration
                value = 0
            }

            ordered_country_state = {
                limit = {
                    OR = {
                        state_is_disloyal = no
                        has_variable = ai_has_acquired_fort_territory
                    }
                }
                order_by = {
                    value = state_priority_by_id
                    # Prefer states with newly acquired territories with forts as the most urgent ones
                    if = {
                        limit = {
                            has_variable = ai_has_acquired_fort_territory
                        }
                        add = 10000
                    }
                    # Prefer non-perimeter states first so they rebuild their forts in perimeter states
                    if = {
                        limit = {
                            state_is_perimeter_of_its_country = no
                        }
                        add = 1000
                    }
                }
                min = 0
                
                ai_optimize_positioning_of_forts = yes
            }

            remove_local_variable = num_rebuilt_forts_this_iteration
        }

        # Clear everything cached in ai_cache_fort_optimization_data except persistent cache
        every_country_state = {
            remove_variable = state_fort_limit_was_exceeded
            remove_variable = state_is_occupied_or_under_attack
            remove_variable = cached_redoubt_territory_of_state
            if = {
                limit = {
                    has_variable = ai_has_acquired_fort_territory
                }
                every_state_province = {
                    remove_variable = ai_acquired_territory_with_fort
                }
            }
        }
        clear_variable_list = country_perimeter_states
        every_in_local_list = {
            variable = territories_allowed_to_build_fort
            remove_variable = territory_priority_for_rebuilding_fort
        }
        clear_local_variable_list = territories_allowed_to_build_fort
        remove_local_variable = country_tax_income_without_modifiers
        remove_local_variable = fort_maintenance_without_modifiers
    }
}

ai_cache_fort_optimization_data = {
    if = {
        limit = {
            OR = {
                state_is_disloyal = no
                has_variable = ai_has_acquired_fort_territory
            }
            owner = {
                is_ai = yes
            }
        }
        set_variable = {
            name = state_fort_limit_was_exceeded
            value = {
                if = {
                    limit = {
                        state_fort_limit_used > state_fort_limit_svalue
                    }
                    value = 1
                }
                else = {
                    value = 0
                }
            }
        }
            
        set_variable = {
            name = state_is_occupied_or_under_attack
            value = {
                if = {
                    limit = {
                        # Blocking trigger because otherwise we won't proceed with the state anyways
                        OR = {
                            var:state_fort_limit_was_exceeded = 1
                            has_variable = ai_has_acquired_fort_territory
                        }
                        owner = {
                            war = yes
                        }
                        OR = {
                            # Check capital first for performance as it's targeted the most often
                            capital_scope = {
                                OR = {
                                    has_siege = yes
                                    AND = {
                                        exists = owner
                                        exists = controller
                                        NOT = {
                                            owner = controller
                                        }
                                    }
                                    any_unit_in_province = {
                                        unit_owner = {
                                            war_with = prev.unit_location.owner
                                        }
                                    }
                                }
                            }
                            any_state_province = {
                                NOT = {
                                    is_state_capital = yes
                                }
                                OR = {
                                    has_siege = yes
                                    AND = {
                                        exists = owner
                                        exists = controller
                                        NOT = {
                                            owner = controller
                                        }
                                    }
                                    any_unit_in_province = {
                                        unit_owner = {
                                            war_with = prev.unit_location.owner
                                        }
                                    }
                                }
                            }
                        }
                    }
                    value = 1
                }
                else = {
                    value = 0
                }
            }
        }
    }

    if = {
        limit = {
            OR = {
                is_capital_state = yes
                AND = {
                    save_temporary_scope_as = potential_perimeter_state

                    # State must have any kind of significance to be a part of country's defense perimeter
                    OR = {
                        any_state_province = {
                            OR = {
                                has_city_status = yes
                                ai_territory_is_good_for_defense = yes
                            }
                        }
                        area = {
                            any_area_province = {
                                percent >= 0.3333
                                exists = state
                                state = scope:potential_perimeter_state
                            }
                        }
                    }

                    OR = {
                        # Navigable waters nearby means state must always be protected
                        any_state_province = {
                            OR = {
                                is_coastal = yes
                                is_adjacent_to_major_river = yes
                            }
                        }

                        # Any state in same area neighboring to evaluated is not ruled by us
                        area = {
                            any_area_state = {
                                NOT = {
                                    ruled_by_country = {
                                        ruler = scope:potential_perimeter_state.owner
                                    }
                                }
                                state_is_neighbor_of_including_unowned = {
                                    state = scope:potential_perimeter_state
                                }
                            }
                        }

                        # Any state in neighbor areas neighboring to evaluated is not ruled by us
                        area = {
                            any_neighbor_area = {
                                OR = {
                                    any_area_state = {
                                        NOT = {
                                            ruled_by_country = {
                                                ruler = scope:potential_perimeter_state.owner
                                            }
                                        }
                                        state_is_neighbor_of_including_unowned = {
                                            state = scope:potential_perimeter_state
                                        }
                                    }
                                    # Neighbor area is fully unowned but can be used for army movement
                                    AND = {
                                        any_area_state = {
                                            count = 0
                                        }
                                        any_area_province = {
                                            is_water = no
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        owner = {
            add_to_variable_list = {
                name = country_perimeter_states
                target = prev
            }
        }
    }

    # Clear old persistent cache of territories wanting fort tiers
    clear_variable_list = ai_territories_to_build_giga_fort
    clear_variable_list = ai_territories_to_build_mega_fort
    clear_variable_list = ai_territories_to_build_single_fort

    ordered_state_province = {
        limit = {
            ai_territory_can_have_fort = yes
        }
        order_by = territory_priority_for_state_redoubt
        position = 0
        check_range_bounds = no
        
        save_scope_as = redoubt_territory_of_state

        prev = {
            set_variable = {
                name = cached_redoubt_territory_of_state
                value = scope:redoubt_territory_of_state
                days = 730
            }
        }

        # Set up new persistent cache, only redoubts need forts so we don't check other territories
        if = {
            limit = {
                ai_needs_giga_fort_in_territory = yes
            }
            prev = {
                add_to_variable_list = {
                    name = ai_territories_to_build_giga_fort
                    target = scope:redoubt_territory_of_state
                }
            }
        }
        else_if = {
            limit = {
                ai_needs_mega_fort_in_territory = yes
            }
            prev = {
                add_to_variable_list = {
                    name = ai_territories_to_build_mega_fort
                    target = scope:redoubt_territory_of_state
                }
            }
        }
        else_if = {
            limit = {
                ai_needs_single_fort_in_territory = yes
            }
            prev = {
                add_to_variable_list = {
                    name = ai_territories_to_build_single_fort
                    target = scope:redoubt_territory_of_state
                }
            }
        }

        if = {
            limit = {
                state = {
                    state_is_disloyal = no
                }
                owner = {
                    is_ai = yes
                }
            }
            if = {
                limit = {
                    num_of_fortress_building_projected < 1
                    state = {
                        state_is_perimeter_of_its_country = yes
                    }
                    ai_territory_allowed_to_build_fort = yes
                }
                add_to_local_variable_list = {
                    name = territories_allowed_to_build_fort
                    target = this
                }
                # Cache priority so it's not calculated for every rebuilding
                set_variable = {
                    name = territory_priority_for_rebuilding_fort
                    value = territory_priority_for_rebuilding_fort
                }
            }
        }

        clear_saved_scope = redoubt_territory_of_state
    }
}

ai_cache_tax_income_and_fort_budget = {
    set_local_variable = {
        name = country_tax_income_without_modifiers
        value = modifier:global_tax_income
    }
    set_local_variable = {
        name = fort_maintenance_without_modifiers
        value = 0
    }

    every_country_state = {
        set_local_variable = {
            name = state_fort_maintenance_multiplier
            value = {
                value = 1
                add = {
                    value = state_fort_limit_used
                    subtract = state_fort_limit_svalue
                    min = 0
                    multiply = 0.25
                }
            }
        }

        every_state_province = {
            owner = {
                change_local_variable = {
                    name = country_tax_income_without_modifiers
                    add = prev.modifier:tax_income
                }
            }

            if = {
                limit = {
                    num_of_fortress_building > 0
                }
                owner = {
                    change_local_variable = {
                        name = fort_maintenance_without_modifiers
                        add = {
                            value = prev.num_of_fortress_building
                            if = {
                                limit = {
                                    prev = {
                                        is_capital = yes
                                    }
                                }
                                subtract = 1
                                min = 0
                            }
                            multiply = define:NCountry|FORT_MAINTENANCE
                            multiply = local_var:state_fort_maintenance_multiplier
                        }
                    }
                }
            }
        }

        remove_local_variable = state_fort_maintenance_multiplier
    }
}

ai_move_state_capital_to_optimal = {
    if = {
        limit = {
            # Vanilla requirements for moving state capital
            is_capital_state = no
            # state_level_loyalty >= 50 # Commented out because we are checking the same thing later

            # Additional requirements to not make state disloyal
            state_level_loyalty >= 65
            monthly_state_loyalty_without_policy >= monthly_state_loyalty_to_move_capital

            # Current capital is not the one we moved to recently
            NOT = {
                capital_scope = {
                    has_variable = ai_moved_state_capital_to_this
                }
            }
        }

        # Try all state provinces without filtering out current capital to check if it's highest by priority
        ordered_state_province = {
            order_by = territory_priority_for_state_capital
            position = 0
            
            # If it's not, then change state capital
            if = {
                limit = {
                    is_state_capital = no
                }
                add_state_loyalty = {
                    value = province_capital_price_territory_scope
                    multiply = -1
                }
                state = {
                    set_state_capital = prev
                }
                set_variable = {
                    name = ai_moved_state_capital_to_this
                    days = 1825 # 5 years cooldown
                }
            }
        }
    }
}

# For cities it must be done through a script, because setting negative building weight leads to mass destroying
ai_free_building_slots_for_forts = {
    if = {
        limit = {
            has_city_status = yes
            state = {
                state_is_disloyal = no
            }
        }

        set_local_variable = {
            name = previous_free_building_slots
            value = {
                value = free_building_slots
                subtract = 1
            }
        }

        while = {
            limit = {
                local_var:previous_free_building_slots < free_building_slots
                NOT = {
                    ai_has_enough_building_slots_for_fort = {
                        and_some_more = 0
                    }
                }
            }

            set_local_variable = {
                name = previous_free_building_slots
                value = free_building_slots
            }

            # Cancel ongoing construction if a random modifier building
            if = {
                limit = {
                    OR = {
                        has_specific_construction = library_building
                        has_specific_construction = commerce_building
                        has_specific_construction = military_building
                        has_specific_construction = town_hall_building
                    }
                }
                random_list = {
                    25 = {
                        trigger = {
                            has_specific_construction = library_building
                        }
                        cancel_building_construction = library_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = commerce_building
                        }
                        cancel_building_construction = commerce_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = military_building
                        }
                        cancel_building_construction = military_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = town_hall_building
                        }
                        cancel_building_construction = town_hall_building
                    }
                }
            }

            # Cancel ongoing construction if a random ratio building
            else_if = {
                limit = {
                    OR = {
                        has_specific_construction = academy_building
                        has_specific_construction = court_building
                        has_specific_construction = forum_building
                        has_specific_construction = workshop_building
                    }
                }
                random_list = {
                    25 = {
                        trigger = {
                            has_specific_construction = academy_building
                        }
                        cancel_building_construction = academy_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = court_building
                        }
                        cancel_building_construction = court_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = forum_building
                        }
                        cancel_building_construction = forum_building
                    }
                    25 = {
                        trigger = {
                            has_specific_construction = workshop_building
                        }
                        cancel_building_construction = workshop_building
                    }
                }
            }

            # Destroy random existing modifier building
            else_if = {
                limit = {
                    OR = {
                        num_of_library_building > 0
                        num_of_commerce_building > 0
                        num_of_military_building > 0
                        num_of_town_hall_building > 0
                    }
                }
                random_list = {
                    25 = {
                        trigger = {
                            num_of_library_building > 0
                        }
                        remove_building_level = library_building
                    }
                    25 = {
                        trigger = {
                            num_of_commerce_building > 0
                        }
                        remove_building_level = commerce_building
                    }
                    25 = {
                        trigger = {
                            num_of_military_building > 0
                        }
                        remove_building_level = military_building
                    }
                    25 = {
                        trigger = {
                            num_of_town_hall_building > 0
                        }
                        remove_building_level = town_hall_building
                    }
                }
            }

            # Destroy random existing ratio building
            else_if = {
                limit = {
                    OR = {
                        num_of_academy_building > 0
                        num_of_court_building > 0
                        num_of_forum_building > 0
                        num_of_workshop_building > 0
                    }
                }
                random_list = {
                    25 = {
                        trigger = {
                            num_of_academy_building > 0
                        }
                        remove_building_level = academy_building
                    }
                    25 = {
                        trigger = {
                            num_of_court_building > 0
                        }
                        remove_building_level = court_building
                    }
                    25 = {
                        trigger = {
                            num_of_forum_building > 0
                        }
                        remove_building_level = forum_building
                    }
                    25 = {
                        trigger = {
                            num_of_workshop_building > 0
                        }
                        remove_building_level = workshop_building
                    }
                }
            }
        }
    }
}

ai_optimize_positioning_of_forts = {
    if = {
        limit = {
            OR = {
                state_is_disloyal = no
                has_variable = ai_has_acquired_fort_territory
            }
            OR = {
                owner = {
                    war = no
                }
                AND = {
                    OR = {
                        var:state_fort_limit_was_exceeded = 1
                        has_variable = ai_has_acquired_fort_territory
                    }
                    var:state_is_occupied_or_under_attack = 0
                }
            }
        }

        ordered_state_province = {
            # Simple limit by having fort, most conditions are checked in while loop
            limit = {
                num_of_fortress_building_projected > 0
            }
            order_by = {
                # Start from lower lvl forts, as first level eats up a lot of limit
                value = 0
                subtract = num_of_fortress_building_projected
                # Prefer newly acquired territories with forts as the most urgent ones
                if = {
                    limit = {
                        has_variable = ai_acquired_territory_with_fort
                    }
                    add = 10000
                }
                # Prefer cancelling ongoing constructions over removing existing forts
                if = {
                    limit = {
                        has_specific_construction = fortress_building
                    }
                    add = 1000
                }
                # Prefer removing forts from territories other than redoubt first
                if = {
                    limit = {
                        ai_territory_is_redoubt_of_state = no
                    }
                    add = 100
                }
            }
            min = 0

            set_local_variable = {
                name = previous_free_building_slots
                value = {
                    value = free_building_slots
                    subtract = 1
                }
            }
            save_scope_as = territory_under_fort_optimization

            while = {
                limit = {
                    local_var:previous_free_building_slots < free_building_slots
                }

                set_local_variable = {
                    name = ai_should_optimize_territory_fort
                    value = {
                        if = {
                            limit = {
                                ai_should_rebuild_territory_fort = yes
                            }
                            value = 2
                        }
                        else_if = {
                            limit = {
                                ai_should_reduce_territory_fort = yes
                            }
                            value = 1
                        }
                        else = {
                            value = 0
                        }
                    }
                }

                set_local_variable = {
                    name = previous_free_building_slots
                    value = free_building_slots
                }

                if = {
                    limit = {
                        local_var:ai_should_optimize_territory_fort > 0
                    }
                    if = {
                        limit = {
                            has_specific_construction = fortress_building
                        }
                        cancel_building_construction = fortress_building
                    }
                    else = {
                        remove_building_level = fortress_building
                        # Primitive for now, maybe should include proper calculations later?
                        if = {
                            limit = {
                                has_local_variable = fort_maintenance_without_modifiers
                            }
                            change_local_variable = {
                                name = fort_maintenance_without_modifiers
                                subtract = define:NCountry|FORT_MAINTENANCE
                            }
                        }
                    }
                }

                # Rebuild forts if possible to keep num of them consistent with what vanilla AI decided
                if = {
                    limit = {
                        local_var:ai_should_optimize_territory_fort = 2
                        # Fort was actually cancelled or removed
                        local_var:previous_free_building_slots < free_building_slots
                        has_non_empty_local_variable_list = {
                            name = territories_allowed_to_build_fort
                        }
                        owner = {
                            # Don't rebuild during wars to not exhaust treasury and because it's too long
                            war = no
                            treasury >= treasury_for_rebuilding_more_forts
                        }
                    }

                    ordered_in_local_list = {
                        variable = territories_allowed_to_build_fort
                        limit = {
                            ai_can_rebuild_fort_to_territory = yes
                        }
                        order_by = {
                            # Cached version of priority script value
                            value = var:territory_priority_for_rebuilding_fort
                            # Higher priority for building in the same state
                            if = {
                                limit = {
                                    state = scope:territory_under_fort_optimization.state
                                }
                                add = 20000000
                            }
                        }
                        position = 0

                        start_building_construction = fortress_building
                        
                        # Rebuild only once in any given territory
                        remove_list_local_variable = {
                            name = territories_allowed_to_build_fort
                            target = this
                        }
                        remove_variable = territory_priority_for_rebuilding_fort
                    }
                }

                remove_local_variable = ai_should_optimize_territory_fort
            }

            remove_local_variable = previous_free_building_slots
            clear_saved_scope = territory_under_fort_optimization
        }
    }
}