ai_build_roads_with_custom_pathing = {
    if = {
        limit = {
            is_ai = yes
            has_land = yes
            war = no
            any_country_state = {
                count > 1
            }
            ai_country_allowed_to_build_roads = yes
            ai_country_can_afford_to_build_10_roads = yes
        }

        ai_determine_junctions_of_own_areas = yes

        save_scope_as = current_road_building_country

        set_local_variable = {
            name = ai_country_build_roads_price_cached
            value = ai_country_build_roads_price
        }

        # Used in various priority values to check distance from junction to country capital
        capital_scope = {
            save_scope_as = target_province
        }

        # Calculate state distance from capital in neighbour levels to use in priority value
        capital_scope.state = {
            ai_determine_state_depth_level = {
                variable = state_capital_distance
            }
        }

        set_local_variable = {
            name = not_enough_gold_for_road_building
            value = 0
        }

        ordered_governorships = {
            limit = {
                exists = capital_scope
                capital_scope.state = {
                    state_contains_junction_of_its_area = yes
                }

                any_governorship_state = {
                    count >= min_junctions_in_governorship_for_roads
                    state_contains_junction_of_its_area = yes
                }
            }
            order_by = capital_scope.territory_priority_by_closeness_to_capital
            min = 0
            max = 999999
            check_range_bounds = no

            # Recheck of we haven't run out of money after previous road building
            if = {
                limit = {
                    local_var:not_enough_gold_for_road_building = 0
                }
                ai_fetch_principals_and_build_roads = yes
            }
        }

        # Recheck of we haven't run out of money after previous road building
        if = {
            limit = {
                local_var:not_enough_gold_for_road_building = 0
            }
            ordered_country_state = {
                limit = {
                    state_contains_junction_of_its_area = yes
                }
                order_by = state_priority_by_closeness_to_capital
                min = 0
                max = 999999
                check_range_bounds = no

                # Recheck of we haven't run out of money after previous road building
                if = {
                    limit = {
                        local_var:not_enough_gold_for_road_building = 0
                    }
                    ai_fetch_junctions_and_build_roads = {
                        specific = 0
                        state = scope:target_province.state
                        processed = 0
                    }
                }
            }
        }

        # Clear state distance from capital
        every_in_local_list = {
            variable = clear_state_capital_distance
            capital_scope = {
                remove_variable = state_capital_distance
            }
        }
        clear_local_variable_list = clear_state_capital_distance

        every_in_local_list = {
            variable = principals_with_processed_list
            clear_variable_list = already_processed_principals
        }
        clear_local_variable_list = principals_with_processed_list

        every_in_local_list = {
            variable = junctions_with_processed_list
            clear_variable_list = already_processed_junctions
        }
        clear_local_variable_list = junctions_with_processed_list

        # Garbage collection
        clear_saved_scope = current_road_building_country
        remove_local_variable = ai_country_build_roads_price_cached
        clear_saved_scope = target_province
    }
}

ai_determine_junctions_of_own_areas = {
    every_country_state = {
        limit = {
            area = {
                NOT = {
                    any_area_province = {
                        has_variable = area_junction_territory
                    }
                }
            }
        }
        area = {
            ordered_area_province = {
                limit = {
                    territory_is_junction_of_its_area = yes
                }
                order_by = territory_priority_by_id
                position = 0
                
                set_variable = area_junction_territory
            }
        }
    }
    every_subject = {
        limit = {
            is_permasubject = yes
        }
        every_country_state = {
            limit = {
                area = {
                    NOT = {
                        any_area_province = {
                            has_variable = area_junction_territory
                        }
                    }
                }
            }
            area = {
                ordered_area_province = {
                    limit = {
                        territory_is_junction_of_its_area = yes
                    }
                    order_by = territory_priority_by_id
                    position = 0
                    
                    set_variable = area_junction_territory
                }
            }
        }
    }
}

ai_fetch_principals_and_build_roads = {
    capital_scope.state = {
        save_scope_as = current_destination_principal

        ai_determine_principals_for_roads = yes
        ai_determine_state_depth_level = {
            variable = state_depth_level
        }
        ai_build_roads_between_principals = yes

        clear_local_variable_list = principals_for_road_building

        every_in_local_list = {
            variable = clear_state_depth_level
            capital_scope = {
                remove_variable = state_depth_level
            }
        }
        clear_local_variable_list = clear_state_depth_level

        clear_saved_scope = current_destination_principal
    }
}

ai_determine_principals_for_roads = {
    region = {
        ordered_neighbor_region = {
            # Minimal filter so we don't check oceans etc.
            limit = {
                any_region_governorship = {
                    count > 0
                    exists = capital_scope
                }
            }
            order_by = region_priority_by_id
            min = 0
            max = 999999
            check_range_bounds = no

            ordered_region_governorship = {
                limit = {
                    owned_by_road_builder_or_permasubject = yes

                    exists = capital_scope
                    capital_scope.state = {
                        state_contains_junction_of_its_area = yes
                    }
                    
                    any_governorship_state = {
                        count >= min_junctions_in_governorship_for_roads
                        state_contains_junction_of_its_area = yes
                    }

                    any_governorship_state = {                        
                        state_contains_junction_of_its_area = yes
                        save_temporary_scope_as = neighbor_governorship_state
                        area = {
                            any_neighbor_area = {
                                any_area_state = {
                                    # No need to check owner if we know it's in governorship of road building country 
                                    governorship = scope:current_destination_principal.governorship
                                    state_contains_junction_of_its_area = yes
                                    state_is_neighbor_of = {
                                        state = scope:neighbor_governorship_state
                                    }
                                }
                            }
                        }
                    }
                }
                order_by = governorship_priority_by_id
                min = 0
                max = 999999
                check_range_bounds = no

                capital_scope.state = {
                    # Try connecting with this principal only if this pair wasn't processed before
                    if = {
                        limit = {
                            NOR = {
                                AND = {
                                    has_non_empty_variable_list = {
                                        name = already_processed_principals
                                    }
                                    is_target_in_variable_list = {
                                        name = already_processed_principals
                                        target = scope:current_destination_principal
                                    }
                                }
                                scope:current_destination_principal = {
                                    has_non_empty_variable_list = {
                                        name = already_processed_principals
                                    }
                                    is_target_in_variable_list = {
                                        name = already_processed_principals
                                        target = prev
                                    }
                                }
                            }
                        }
                        add_to_local_variable_list = {
                            name = principals_for_road_building
                            target = this
                        }
                    }
                }
            }
        }
    }
}

ai_determine_junctions_for_roads = {
    if = {
        limit = {
            $specific$ = 1
        }
        $state$ = {
            ai_add_state_junction_to_road_list = {
                processed = $processed$
            }
        }
    }
    else = {
        area = {
            ordered_neighbor_area = {
                limit = {
                    any_area_state = {
                        # Must be owned either by the country itself or its subject with subject_can_cancel = no
                        owned_by_road_builder_or_permasubject = yes
                        # Junction is located in this state
                        state_contains_junction_of_its_area = yes
                        # Is adjacent to current state by land path
                        state_is_neighbor_of = {
                            state = scope:current_destination_junction.state
                        }
                    }
                }
                order_by = area_priority_by_closeness_to_capital
                min = 0
                max = 999999
                check_range_bounds = no

                ordered_area_state = {
                    limit = {
                        owned_by_road_builder_or_permasubject = yes
                    }
                    order_by = state_priority_by_closeness_to_capital
                    min = 0
                    max = 999999
                    check_range_bounds = no

                    ai_add_state_junction_to_road_list = {
                        processed = $processed$
                    }
                }
            }
        }
    }
}

ai_add_state_junction_to_road_list = {
    ordered_state_province = {
        limit = {
            territory_is_junction_of_its_area = yes
        }
        order_by = territory_priority_by_id
        position = 0
        check_range_bounds = no

        # Try connecting with this junction only if this pair wasn't processed before
        if = {
            limit = {
                OR = {
                    $processed$ = 1
                    NOR = {
                        AND = {
                            has_non_empty_variable_list = {
                                name = already_processed_junctions
                            }
                            is_target_in_variable_list = {
                                name = already_processed_junctions
                                target = scope:current_destination_junction
                            }
                        }
                        scope:current_destination_junction = {
                            has_non_empty_variable_list = {
                                name = already_processed_junctions
                            }
                            is_target_in_variable_list = {
                                name = already_processed_junctions
                                target = prev
                            }
                        }
                    }
                }
            }
            add_to_local_variable_list = {
                name = junctions_for_road_building
                target = this
            }
        }
    }
}

ai_fetch_junctions_and_build_roads = {
    ordered_state_province = {
        limit = {
            territory_is_junction_of_its_area = yes
        }
        order_by = province_id
        position = 0
        check_range_bounds = no

        save_scope_as = current_destination_junction

        ai_determine_junctions_for_roads = {
            specific = $specific$
            state = $state$
            processed = $processed$
        }
        ai_determine_territory_depth_level = yes
        ai_build_roads_between_junctions = yes

        clear_local_variable_list = junctions_for_road_building

        every_in_local_list = {
            variable = clear_territory_depth_level
            remove_variable = territory_depth_level
        }
        clear_local_variable_list = clear_territory_depth_level

        clear_saved_scope = current_destination_junction
    }
}

ai_build_roads_between_principals = {
    ordered_in_local_list = {
        variable = principals_for_road_building
        limit = {
            capital_scope = {
                has_variable = state_depth_level
            }
        }
        order_by = state_priority_by_distance_from_capital
        min = 0
        max = 999999
        check_range_bounds = no

        # Recheck of we haven't run out of money after previous road building
        if = {
            limit = {
                local_var:not_enough_gold_for_road_building = 0
            }

            # Start with the destination junction and find a path to current state junction
            save_scope_as = current_road_building_state

            # Save all processed states to a list so we wont't walk them more than once
            capital_scope = {
                set_variable = {
                    name = order_of_road_building_in_state
                    value = num_states_chosen_for_road_building
                }
            }
            add_to_local_variable_list = {
                name = states_chosen_for_road_building
                target = this
            }

            # Emergency exist for edge cases to prevent while loop from going on 1000 times
            set_local_variable = {
                name = found_new_state_for_roads
                value = 1
            }

            while = {
                limit = {
                    local_var:found_new_state_for_roads > 0
                    scope:current_road_building_state = {
                        state_depth_level_svalue > 0
                    }
                }

                # Reset it to 0 on every iteration, update to 1 after finding new state
                set_local_variable = {
                    name = found_new_state_for_roads
                    value = 0
                }

                scope:current_road_building_state.area = {
                    every_neighbor_area = {
                        every_area_state = {
                            add_to_local_variable_list = {
                                name = all_states_of_neighboring_areas
                                target = this
                            }
                        }
                    }

                    ordered_in_local_list = {
                        variable = all_states_of_neighboring_areas
                        limit = {
                            state_is_suitable_for_road_building = yes
                        }
                        order_by = state_priority_for_road_building
                        position = 0
                        check_range_bounds = no

                        capital_scope = {
                            set_variable = {
                                name = order_of_road_building_in_state
                                value = num_states_chosen_for_road_building
                            }
                        }
                        
                        # Save current state as previous to track pairs, then set this one as current
                        scope:current_road_building_state = {
                            save_scope_as = previous_road_state
                        }
                        save_scope_as = current_road_building_state

                        # Mark that we were able to find some new state and while loop can continue
                        set_local_variable = {
                            name = found_new_state_for_roads
                            value = 1
                        }

                        # Save all processed states to a list so we wont't walk them more than once
                        add_to_local_variable_list = {
                            name = states_chosen_for_road_building
                            target = this
                        }
                    }

                    clear_local_variable_list = all_states_of_neighboring_areas
                }
            }

            if = {
                limit = {
                    local_var:found_new_state_for_roads > 0
                }
                ordered_in_local_list = {
                    variable = states_chosen_for_road_building
                    order_by = capital_scope.var:order_of_road_building_in_state
                    min = 0
                    max = 999999
                    check_range_bounds = no

                    if = {
                        limit = {
                            exists = scope:state_for_junction_connection
                        }
                        ai_fetch_junctions_and_build_roads = {
                            specific = 1
                            state = scope:state_for_junction_connection
                            processed = 1
                        }
                    }

                    save_scope_as = state_for_junction_connection
                }
                clear_saved_scope = state_for_junction_connection
            }
            
            every_in_local_list = {
                variable = states_chosen_for_road_building
                limit = {
                    capital_scope = {
                        has_variable = order_of_road_building_in_state
                    }
                }
                capital_scope = {
                    remove_variable = order_of_road_building_in_state
                }
            }



            # Mark that we already (or rather will very soon) processed this pair of principals
            add_to_variable_list = {
                name = already_processed_principals
                target = scope:current_destination_principal
            }
            scope:current_destination_principal = {
                add_to_variable_list = {
                    name = already_processed_principals
                    target = prev
                }
            }
            # Save it to list so we don't need to every_owned_province to clear already_processed_principals
            add_to_local_variable_list = {
                name = principals_with_processed_list
                target = this
            }
            add_to_local_variable_list = {
                name = principals_with_processed_list
                target = scope:current_destination_principal
            }




            # Garbage collection
            clear_saved_scope = current_road_building_state
            clear_saved_scope = previous_road_state
            clear_local_variable_list = states_chosen_for_road_building
            remove_local_variable = found_new_state_for_roads
        }
    }
}

ai_build_roads_between_junctions = {
    ordered_in_local_list = {
        variable = junctions_for_road_building
        limit = {
            has_variable = territory_depth_level
        }
        order_by = territory_priority_by_distance_from_capital
        min = 0
        max = 999999
        check_range_bounds = no

        # Recheck of we haven't run out of money after previous road building
        if = {
            limit = {
                local_var:not_enough_gold_for_road_building = 0
            }

            # Start with the destination junction and find a path to current state junction
            save_scope_as = current_road_building_territory

            # Save all processed territories to a list so we wont't walk them more than once
            add_to_local_variable_list = {
                name = territories_chosen_for_road_building
                target = this
            }

            # Emergency exist for edge cases to prevent while loop from going on 1000 times
            set_local_variable = {
                name = found_new_territory_for_road
                value = 1
            }

            while = {
                limit = {
                    local_var:found_new_territory_for_road > 0
                    scope:current_road_building_territory = {
                        territory_depth_level_svalue > 0
                    }
                }

                # Reset it to 0 on every iteration, update to 1 after finding new territory
                set_local_variable = {
                    name = found_new_territory_for_road
                    value = 0
                }

                scope:current_road_building_territory = {
                    ordered_neighbor_province = {
                        limit = {
                            territory_is_suitable_for_road_building = yes
                        }
                        order_by = territory_priority_for_road_building
                        position = 0
                        check_range_bounds = no

                        if = {
                            limit = {
                                NOT = {
                                    has_road_towards = scope:current_road_building_territory
                                }
                            }
                            add_to_variable_list = {
                                name = will_have_road_towards
                                target = scope:current_road_building_territory
                            }
                        }
                        
                        # Save current territory as previous to track pairs, then set this one as current
                        scope:current_road_building_territory = {
                            save_scope_as = previous_road_building_territory
                        }
                        save_scope_as = current_road_building_territory

                        # Mark that we were able to find some new territory and while loop can continue
                        set_local_variable = {
                            name = found_new_territory_for_road
                            value = 1
                        }

                        # Save all processed territories to a list so we wont't walk them more than once
                        add_to_local_variable_list = {
                            name = territories_chosen_for_road_building
                            target = this
                        }
                    }
                }
            }

            if = {
                limit = {
                    scope:current_road_building_country = {
                        trigger_if = {
                            limit = {
                                is_advanced_ai_enabled = yes
                                NOT = {
                                    has_global_variable = game_rule_advanced_ai_mercenaries
                                }
                            }
                            treasury >= ai_wartime_fund_and_planned_roads
                        }
                        trigger_else = {
                            treasury >= cumulated_cost_of_planned_roads
                        }
                    }
                }
                every_in_local_list = {
                    variable = territories_chosen_for_road_building
                    limit = {
                        has_non_empty_variable_list = {
                            name = will_have_road_towards
                        }
                    }
                    save_scope_as = territory_to_build_road_from
                    every_in_list = {
                        variable = will_have_road_towards
                        scope:territory_to_build_road_from = {
                            add_road_towards = prev
                        }
                        scope:current_road_building_country = {
                            add_treasury = {
                                value = 0
                                subtract = ai_country_build_roads_price
                            }
                        }
                    }
                    clear_saved_scope = territory_to_build_road_from
                }
            }
            else = {
                # Script level flag that we ran out of money and should stop trying to build any roads
                set_local_variable = {
                    name = not_enough_gold_for_road_building
                    value = 1
                }
            }

            if = {
                limit = {
                    scope:current_road_building_country = {
                        ai_country_can_afford_to_build_10_roads = no
                    }
                }
                # Script level flag that we ran out of money and should stop trying to build any roads
                set_local_variable = {
                    name = not_enough_gold_for_road_building
                    value = 1
                }
            }
            
            every_in_local_list = {
                variable = territories_chosen_for_road_building
                limit = {
                    has_non_empty_variable_list = {
                        name = will_have_road_towards
                    }
                }
                clear_variable_list = will_have_road_towards
            }
            
            # Mark that we already (or rather will very soon) processed this pair of junctions
            add_to_variable_list = {
                name = already_processed_junctions
                target = scope:current_destination_junction
            }
            scope:current_destination_junction = {
                add_to_variable_list = {
                    name = already_processed_junctions
                    target = prev
                }
            }
            # Save it to list so we don't need to every_owned_province to clear already_processed_junctions
            add_to_local_variable_list = {
                name = junctions_with_processed_list
                target = this
            }
            add_to_local_variable_list = {
                name = junctions_with_processed_list
                target = scope:current_destination_junction
            }

            # Garbage collection
            clear_saved_scope = current_road_building_territory
            clear_saved_scope = previous_road_building_territory
            clear_local_variable_list = territories_chosen_for_road_building
            remove_local_variable = found_new_territory_for_road
        }
    }
}





ai_determine_state_depth_level = {
    # Initiate state depth calculations starting from destination junction
    capital_scope = {
        set_variable = {
            name = $variable$
            value = 0
        }
    }
    add_to_local_variable_list = {
        name = states_of_current_level
        target = this
    }

    # Save it to list so we don't need to every_owned_province to clear state_depth_level
    add_to_local_variable_list = {
        name = clear_$variable$
        target = this
    }

    # Track it separately in local variable to use it easily as while limit and to set new variables
    set_local_variable = {
        name = current_state_depth_level
        value = 0
    }

    # Try all neigbours level by level, forming state depth map to use in pathfinding algorithm later
    while = {
        limit = {
            has_non_empty_local_variable_list = {
                name = states_of_current_level
            }
            OR = {
                NOT = {
                    has_non_empty_local_variable_list = {
                        name = principals_for_road_building
                    }
                }
                any_in_local_list = {
                    variable = principals_for_road_building
                    NOT = {
                        has_variable = $variable$
                    }
                }
            }
        }

        ordered_in_local_list = {
            variable = states_of_current_level
            order_by = state_priority_by_id
            min = 0
            max = 999999
            check_range_bounds = no

            save_scope_as = current_state

            area = {
                ordered_neighbor_area = {
                    order_by = area_priority_by_territory_ids
                    min = 0
                    max = 999999
                    check_range_bounds = no

                    ordered_area_state = {
                        limit = {
                            NOT = {
                                capital_scope = {
                                    has_variable = $variable$
                                }
                            }
                            
                            owned_by_road_builder_or_permasubject = yes

                            state_is_neighbor_of = {
                                state = scope:current_state
                            }
                        }
                        order_by = area.area_priority_by_territory_ids
                        min = 0
                        max = 999999
                        check_range_bounds = no
                        
                        # Set corresponding depth level as state variable
                        capital_scope = {
                            set_variable = {
                                name = $variable$
                                value = {
                                    value = local_var:current_state_depth_level
                                    add = 1
                                }
                            }
                        }
                        # Add to list of the states whose neighbours will be processed in the next iteration
                        add_to_local_variable_list = {
                            name = states_of_next_level
                            target = this
                        }
                        # Save it to list so we don't need to every_owned_province to clear state_depth_level
                        add_to_local_variable_list = {
                            name = clear_$variable$
                            target = this
                        }
                    }
                }
            }

            clear_saved_scope = current_state
        }

        # Set next level states as current level for the next iteration 
        clear_local_variable_list = states_of_current_level
        every_in_local_list = {
            variable = states_of_next_level
            add_to_local_variable_list = {
                name = states_of_current_level
                target = this
            }
        }
        clear_local_variable_list = states_of_next_level

        # Increment local variable with current state depth level
        change_local_variable = {
            name = current_state_depth_level
            add = 1
        }
    }

    # Garbage collection
    clear_local_variable_list = states_of_current_level
    remove_local_variable = current_state_depth_level
}

ai_determine_territory_depth_level = {
    # Initiate territory depth calculations starting from destination junction
    set_variable = {
        name = territory_depth_level
        value = 0
    }
    add_to_local_variable_list = {
        name = territories_of_current_level
        target = this
    }

    # Save it to list so we don't need to every_owned_province to clear territory_depth_level
    add_to_local_variable_list = {
        name = clear_territory_depth_level
        target = this
    }

    # Track it separately in local variable to use it easily as while limit and to set new variables
    set_local_variable = {
        name = current_territory_depth_level
        value = 0
    }

    # Try all neigbours level by level, forming territory depth map to use in pathfinding algorithm later
    while = {
        limit = {
            local_var:current_territory_depth_level < road_building_junction_search_depth
            # If all the junctions were already found, there's no need to go deeper, so save performance
            OR = {
                NOT = {
                    has_non_empty_local_variable_list = {
                        name = junctions_for_road_building
                    }
                }
                any_in_local_list = {
                    variable = junctions_for_road_building
                    NOT = {
                        has_variable = territory_depth_level
                    }
                }
            }
        }

        ordered_in_local_list = {
            variable = territories_of_current_level
            order_by = territory_priority_by_id
            min = 0
            max = 999999
            check_range_bounds = no

            ordered_neighbor_province = {
                limit = {
                    # Only land territories that armies can walk on
                    is_water = no
                    NOT = {
                        terrain = impassable_terrain
                    }
                    # Not processed previously
                    NOT = {
                        has_variable = territory_depth_level
                    }
                    OR = {
                        # Uncolonized and uninhabitable territories
                        NOT = {
                            exists = owner
                        }
                        # Must be owned either by the country itself or its subject with subject_can_cancel = no
                        owned_by_road_builder_or_permasubject = yes
                    }
                }
                order_by = territory_priority_by_id
                min = 0
                max = 999999
                check_range_bounds = no
                
                # Set corresponding depth level as territory variable
                set_variable = {
                    name = territory_depth_level
                    value = {
                        value = local_var:current_territory_depth_level
                        add = 1
                    }
                }
                # Add to list of the territories whose neighbours will be processed in the next iteration
                add_to_local_variable_list = {
                    name = territories_of_next_level
                    target = this
                }
                # Save it to list so we don't need to every_owned_province to clear territory_depth_level
                add_to_local_variable_list = {
                    name = clear_territory_depth_level
                    target = this
                }
            }
        }

        # Set next level territories as current level for the next iteration 
        clear_local_variable_list = territories_of_current_level
        every_in_local_list = {
            variable = territories_of_next_level
            add_to_local_variable_list = {
                name = territories_of_current_level
                target = this
            }
        }
        clear_local_variable_list = territories_of_next_level

        # Increment local variable with current territory depth level
        change_local_variable = {
            name = current_territory_depth_level
            add = 1
        }
    }

    # Garbage collection
    clear_local_variable_list = territories_of_current_level
    remove_local_variable = current_territory_depth_level
}