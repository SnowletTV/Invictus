ai_manage_wartime_fund = {
    if = {
        limit = {
            is_ai = yes
        }
        if = {
            limit = {
                war = yes
            }
            if = {
                limit = {
                    # Guarantees that var:ai_wartime_fund exists and is positive
                    ai_wartime_fund_withdraw > 0
                }
                # Cache due to treasury and fund values depending on each other
                set_local_variable = {
                    name = ai_wartime_fund_withdraw_cached
                    value = ai_wartime_fund_withdraw
                }
                # Perform withdraw from the fund
                add_treasury = local_var:ai_wartime_fund_withdraw_cached
                change_variable = {
                    name = ai_wartime_fund
                    subtract = local_var:ai_wartime_fund_withdraw_cached
                }
                # Clear the cache
                remove_local_variable = ai_wartime_fund_withdraw_cached
            }

            if = {
                limit = {
                    ai_is_facing_comparable_threat = yes
                }
                ai_hire_mercenaries = yes
            }
        }
        else_if = {
            limit = {
                # Deposit goes negative to make it easy with add_treasury
                ai_wartime_fund_deposit < 0
            }
            if = {
                limit = {
                    NOT = {
                        has_variable = ai_wartime_fund
                    }
                }
                set_variable = {
                    name = ai_wartime_fund
                    value = 0
                }
            }
            # Cache due to treasury and fund values depending on each other
            set_local_variable = {
                name = ai_wartime_fund_deposit_cached
                value = ai_wartime_fund_deposit
            }
            # Perform deposit to the fund
            add_treasury = local_var:ai_wartime_fund_deposit_cached
            change_variable = {
                name = ai_wartime_fund
                add = {
                    value = local_var:ai_wartime_fund_deposit_cached
                    multiply = -1
                }
            }
            # Clear the cache
            remove_local_variable = ai_wartime_fund_deposit_cached
        }
        # Don't keep useless variables in memory
        if = {
            limit = {
                has_variable = ai_wartime_fund
                var:ai_wartime_fund <= 0
            }
            remove_variable = ai_wartime_fund
        }
    }
    else_if = {
        limit = {
            ai_wartime_fund_current > 0
        }
        add_treasury = ai_wartime_fund_current
        remove_variable = ai_wartime_fund
    }
}

ai_hire_mercenaries = {
    if = {
        limit = {
            num_mercenaries_employed_svalue < modifier:max_mercenary_stacks
            exists = c:MER
        }
        save_scope_as = hiring_country
        scope:hiring_country.capital_scope = {
            save_scope_as = target_province
        }

        c:MER = {
            ordered_character = {
                limit = {
                    country_can_hire_mercenary = yes
                    NOT = {
                        any_character_unit = {
                            unit_size > scope:hiring_country.ai_max_mercenary_cohorts
                        }
                    }
                }
                order_by = distance_from_province
                position = 0
                check_range_bounds = no

                change_mercenary_employer = scope:hiring_country
                scope:hiring_country = {
                    pay_price = recruit_mercenary
                }
            }
        }

        clear_local_variable_list = mercenaries_in_diplomatic_range
        clear_saved_scope = target_province
        clear_saved_scope = hiring_country
    }
}