territory_is_ownable = {
    # Hard to oversell how much faster this is compared to the other way
    trigger_if = {
        limit = {
            has_non_empty_global_variable_list = {
                name = ownable_territories
            }
        }
        is_target_in_global_variable_list = {
            name = ownable_territories
            target = this
        }
    }
    trigger_else = {
        any_ownable_province = {
            this = prev
        }
    }
}

state_is_perimeter_of_its_country = {
    owner = {
        has_non_empty_variable_list = {
            name = country_perimeter_states
        }
        is_target_in_variable_list = {
            name = country_perimeter_states
            target = prev
        }
    }
}

all_perimeter_states_have_redoubt_fort = {
    has_non_empty_variable_list = {
        name = country_perimeter_states
    }
    NOT = {
        any_in_list = {
            variable = country_perimeter_states
            ai_state_redoubt_territory_has_fort = no
        }
    }
}

all_perimeter_states_have_any_forts = {
    trigger_if = {
        limit = {
            has_local_variable = all_perimeter_states_have_any_forts
        }
        local_var:all_perimeter_states_have_any_forts = 1
    }
    trigger_else = {
        has_non_empty_variable_list = {
            name = country_perimeter_states
        }
        NOT = {
            any_in_list = {
                variable = country_perimeter_states
                NOT = {
                    any_state_province = {
                        num_of_fortress_building_projected > 0
                    }
                }
            }
        }
    }
}

ai_allowed_to_build_fort_in_territory = {
    OR = {
        # Is redoubt territory of capital state so we prioritize building fort here if there's none
        AND = {
            state = {
                is_capital_state = yes
            }
            ai_territory_is_redoubt_of_state = yes
        }
        # Allow to build in territories other than capital state redoubt only if it has fort or cannot have it
        owner = {
            capital_scope.state = {
                ai_state_redoubt_territory_has_fort = yes
            }
        }
    }

    OR = {
        # Is redoubt territory of state so we build prioritize building fort here if there's none
        ai_territory_is_redoubt_of_state = yes
        # Allow to build in territories other than state redoubt only if it has fort or cannot have it
        state = {
            ai_state_redoubt_territory_has_fort = yes
        }
    }

    # Territory hasn't reached its target for num of forts
    ai_fort_level_is_lower_than_wanted = yes

    # Building more than level 1 is allowed only in capital redoubt or if all perimeter states have forts
    OR = {
        num_of_fortress_building_projected < 1
        AND = {
            state = {
                is_capital_state = yes
            }
            ai_territory_is_redoubt_of_state = yes
        }
        owner = {
            all_perimeter_states_have_redoubt_fort = yes
        }
    }
}

ai_wants_giga_fort_in_territory = {
    is_capital = yes
}

ai_wants_mega_fort_in_territory = {
    # Reserve at least 5 of fort limit for redoubt it it wants mega or giga fort
    trigger_if = {
        limit = {
            state = {
                is_capital_state = yes
            }
        }
        OR = {
            is_capital = yes
            owner.capital_scope = {
                ai_territory_can_have_fort = no
            }
            state.state_fort_limit_svalue >= 10
        }
    }
    trigger_else = {
        always = yes
    }

    # Only build mega forts in capital state and on perimeter as they are a huge budget drain
    exists = state
    state = {
        OR = {
            is_capital_state = yes
            state_is_perimeter_of_its_country = yes
        }
    }

    territory_priority_for_having_fort >= priority_threshold_for_mega_fort
    ai_territory_is_redoubt_of_state = yes
}

ai_wants_single_fort_in_territory = {
    # Build forts in capital state and all perimeter ones to defend country border
    trigger_if = {
        limit = {
            exists = state
            state = {
                OR = {
                    is_capital_state = yes
                    state_is_perimeter_of_its_country = yes
                }
            }
        }
        OR = {
            ai_territory_is_redoubt_of_state = yes
            AND = {
                territory_priority_for_having_fort >= priority_threshold_for_single_fort
                ai_territory_is_outwork_of_state = yes
            }
        }
    }
    trigger_else = {
        territory_priority_for_having_fort >= priority_threshold_for_single_fort
        ai_territory_is_redoubt_of_state = yes
    }
    
    # Reserve at least 5 of fort limit for redoubt it it wants mega or giga fort
    trigger_if = {
        limit = {
            state = {
                OR = {
                    # Check capital TERRITORY first for performance as usually redoubt is there
                    capital_scope = {
                        ai_territory_is_redoubt_of_state = yes
                        OR = {
                            ai_wants_giga_fort_in_territory = yes
                            ai_wants_mega_fort_in_territory = yes
                        }
                    }
                    # Check all state territories to find redoubt
                    any_state_province = {
                        ai_territory_is_redoubt_of_state = yes
                        OR = {
                            ai_wants_giga_fort_in_territory = yes
                            ai_wants_mega_fort_in_territory = yes
                        }
                    }
                }
            }
        }
        OR = {
            is_capital = yes
            owner.capital_scope = {
                ai_territory_can_have_fort = no
            }
            state.state_fort_limit_svalue >= 8
        }
    }
    trigger_else = {
        always = yes
    }
}

ai_territory_can_have_fort = {
    # Ensure nothing weird happened and there are any slots at all
    num_of_total_building_slots > 0
    OR = {
        # If it has fort already, it probably can have it?
        num_of_fortress_building_projected > 0
        # Ports are not occupying all building slots - they are higher in priority
        can_have_port = no
        port_level_including_construction < num_of_total_building_slots
    }
}

ai_fort_level_is_higher_than_wanted = {
    trigger_if = {
        limit = {
            ai_wants_giga_fort_in_territory = yes
        }
        num_of_fortress_building_projected > level_of_giga_fort_wanted
    }
    trigger_else_if = {
        limit = {
            ai_wants_mega_fort_in_territory = yes
        }
        num_of_fortress_building_projected > level_of_mega_fort_wanted
    }
    trigger_else_if = {
        limit = {
            ai_wants_single_fort_in_territory = yes
        }
        num_of_fortress_building_projected > 1
    }
    trigger_else = {
        num_of_fortress_building_projected > 0
    }
}

ai_fort_level_is_lower_than_wanted = {
    trigger_if = {
        limit = {
            ai_wants_giga_fort_in_territory = yes
        }
        num_of_fortress_building_projected < level_of_giga_fort_wanted
    }
    trigger_else_if = {
        limit = {
            ai_wants_mega_fort_in_territory = yes
        }
        num_of_fortress_building_projected < level_of_mega_fort_wanted
    }
    trigger_else_if = {
        limit = {
            ai_wants_single_fort_in_territory = yes
        }
        num_of_fortress_building_projected < 1
    }
    trigger_else = {
        always = no
    }
}

# This and ai_can_rebuild_fort_to_territory can't be true simultaneously for a given territory, incl with 1 less fort
ai_should_reduce_territory_fort = {
    OR = {
        # Territory has more fort levels that we want it to have
        ai_fort_level_is_higher_than_wanted = yes
        AND = {
            # Only do this sort of optimization if basic country defense is set up
            owner = {
                all_perimeter_states_have_any_forts = yes
            }
            # This is non-redoubt territory with fort, while redoubt doesn't have it
            num_of_fortress_building_projected > 0
            ai_territory_is_redoubt_of_state = no
            state = {
                ai_state_redoubt_territory_has_fort = no
            }
        }
    }
}

# This and ai_should_reduce_territory_fort can't be true simultaneously for a given territory, incl with 1 less fort
# Requires local_var:all_perimeter_states_have_any_forts to be set for performance
ai_can_rebuild_fort_to_territory = {
    # There's no fort yet and there are free slots to build it
    free_building_slots > 0
    num_of_fortress_building_projected < 1
    # Territory has less fort levels that we want it to have
    ai_fort_level_is_lower_than_wanted = yes
    # We won't exceed state fort limit by building it here
    state.state_fort_limit_svalue >= state_fort_limit_with_1_more_level
    # Only rebuild in redoubt territories, unless basic country defense is set up and state redoubt territory has fort
    OR = {
        ai_territory_is_redoubt_of_state = yes
        AND = {
            owner = {
                all_perimeter_states_have_any_forts = yes
            }
            state = {
                ai_state_redoubt_territory_has_fort = yes
            }
        }
    }
}

# Covers gates, mountain passes, their desert alternatives, and probably various modifiers from missions etc.
ai_territory_is_deadly_to_armies = {
    OR = {
        modifier:attrition > 0
        modifier:local_hostile_attrition > 0
    }
    OR = {
        modifier:supply_limit < 0
        modifier:supply_limit_modifier < 0
        modifier:local_combat_width_modifier < 0
    }
}

ai_territory_is_good_for_defense = {
    OR = {
        ai_territory_is_deadly_to_armies = yes
        AND = {
            save_temporary_scope_as = potential_defense_territory
            any_neighbor_province = {
                ai_territory_is_deadly_to_armies = yes
                territory_is_ownable = no
                NOT = {
                    any_neighbor_province = {
                        NOT = {
                            this = scope:potential_defense_territory
                        }
                        owner = scope:potential_defense_territory.owner
                        territory_priority_by_population > scope:potential_defense_territory.territory_priority_by_population
                    }
                }
            }
        }
    }
}

ai_territory_is_redoubt_of_state = {
    trigger_if = {
        limit = {
            state.capital_scope = {
                ai_territory_can_have_fort = yes
            }
        }
        is_state_capital = yes
    }
    trigger_else = {
        is_state_capital = no
        ai_territory_can_have_fort = yes
        save_temporary_scope_as = potential_redoubt_territory
        NOT = {
            state = {
                any_state_province = {
                    NOT = {
                        this = scope:potential_redoubt_territory
                    }
                    is_state_capital = no
                    ai_territory_can_have_fort = yes
                    territory_priority_for_state_redoubt > scope:potential_redoubt_territory.territory_priority_for_state_redoubt
                }
            }
        }
    }
}

ai_territory_is_outwork_of_state = {
    # State capital is always redoubt if it can have fort
    is_state_capital = no
    ai_territory_can_have_fort = yes

    save_temporary_scope_as = potential_outwork_territory

    # If state capital is redoubt, non-capital territory with highest outwork priority becomes outwork
    trigger_if = {
        limit = {
            state.capital_scope = {
                ai_territory_is_redoubt_of_state = yes
            }
        }
        NOT = {
            state = {
                any_state_province = {
                    NOT = {
                        this = scope:potential_outwork_territory
                    }
                    is_state_capital = no
                    ai_territory_can_have_fort = yes
                    territory_priority_for_state_outwork > scope:potential_outwork_territory.territory_priority_for_state_outwork
                }
            }
        }
    }

    # Otherwise non-capital territory with second highest outwork priority becomes outwork
    trigger_else = {
        state = {
            any_state_province = {
                # There's specifically 1 territory with higher priority, which becomes redoubt
                count = 1
                NOT = {
                    this = scope:potential_outwork_territory
                }
                is_state_capital = no
                ai_territory_can_have_fort = yes
                territory_priority_for_state_outwork > scope:potential_outwork_territory.territory_priority_for_state_outwork
            }
        }
    }
}

ai_state_redoubt_territory_has_fort = {
    # Check state capital first because usually redoubt is there
    trigger_if = {
        limit = {
            capital_scope = {
                ai_territory_is_redoubt_of_state = yes
            }
        }
        capital_scope = {
            num_of_fortress_building_projected > 0
        }
    }
    # Otherwise loop through all state province if it's not capital
    trigger_else = {
        any_state_province = {
            is_state_capital = no
            num_of_fortress_building_projected > 0
            ai_territory_is_redoubt_of_state = yes
        }
    }
}

ai_state_outwork_territory_has_fort = {
    any_state_province = {
        is_state_capital = no
        num_of_fortress_building_projected > 0
        ai_territory_is_outwork_of_state = yes
    }
}