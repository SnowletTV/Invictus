territory_is_ownable = {
    # Hard to oversell how much faster this is compared to the other way
    trigger_if = {
        limit = {
            has_non_empty_global_variable_list = {
                name = ownable_territories
            }
        }
        is_target_in_global_variable_list = {
            name = ownable_territories
            target = this
        }
    }
    trigger_else = {
        any_ownable_province = {
            this = prev
        }
    }
}

state_meets_perimeter_requirements = {
    OR = {
        is_capital_state = yes
        AND = {
            save_temporary_scope_as = potential_perimeter_state

            # State must have any kind of significance to be a part of country's defense perimeter
            OR = {
                any_state_province = {
                    OR = {
                        has_city_status = yes
                        ai_territory_is_good_for_defense = yes
                    }
                }
                area = {
                    any_area_province = {
                        percent >= 0.3333
                        exists = state
                        state = scope:potential_perimeter_state
                    }
                }
            }

            OR = {
                # Navigable waters nearby means state must always be protected
                any_state_province = {
                    OR = {
                        is_coastal = yes
                        AND = {
                            is_adjacent_to_major_river = yes

                            # Exclude rivers not connected to ocean
                            NOR = {
                                # Rha (Volga)
                                area = area:atara_area
                                area = area:transhyrcania_area
                                area = area:alania_orientalis_area
                                # raha_ulterior_area
                                this = p:8962
                                this = p:8965
                                this = p:8969
                                # sarmatia_eschate_area
                                this = p:9076
                                this = p:9080
                                this = p:9081
                                # thyssagetia_orientalis_area
                                this = p:9093
                                area = area:thyssagetia_occidentalis_area
                                area = area:sarmatia_hyperborealis_area

                                # Velho
                                area = area:velho_area

                                # Rha (Volga) at north
                                area = area:dyakovo_area
                            }
                        }
                    }
                }

                # Any state in same area neighboring to evaluated is not ruled by us
                area = {
                    any_area_state = {
                        NOT = {
                            ruled_by_country = {
                                ruler = scope:potential_perimeter_state.owner
                            }
                        }
                        state_is_neighbor_of_including_unowned = {
                            state = scope:potential_perimeter_state
                        }
                    }
                }

                # Any state in neighbor areas neighboring to evaluated is not ruled by us
                area = {
                    any_neighbor_area = {
                        OR = {
                            any_area_state = {
                                NOT = {
                                    ruled_by_country = {
                                        ruler = scope:potential_perimeter_state.owner
                                    }
                                }
                                state_is_neighbor_of_including_unowned = {
                                    state = scope:potential_perimeter_state
                                }
                            }
                            # Neighbor area is fully unowned but can be used for army movement
                            AND = {
                                any_area_state = {
                                    count = 0
                                }
                                any_area_province = {
                                    is_water = no
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

state_is_perimeter_of_its_country = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner

    has_non_empty_local_variable_list = {
        name = cached_perimeter_states_of_country
    }
    is_target_in_local_variable_list = {
        name = cached_perimeter_states_of_country
        target = prev
    }
}

# Used to determine if state should be included in a list for fort rebuilding, is not checked in vanilla AI building 
ai_territory_allowed_to_build_fort = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state

    # Basic requirements for building fort and no ongoing construction at the moment
    free_building_slots > 0
    can_build_building = fortress_building
    NOT = {
        has_specific_construction = fortress_building
    }

    # Only rebuild forts to redoubts of perimeter states
    ai_territory_is_redoubt_of_state = yes
    state = {
        state_is_perimeter_of_its_country = yes
    }

    # Rebuilding over level 1 is allowed only in capital redoubt
    trigger_if = {
        limit = {
            state = {
                is_capital_state = yes
            }
        }
        num_of_fortress_building_projected < level_of_mega_fort_wanted
    }
    trigger_else = {
        num_of_fortress_building_projected < 1
    }

    # Territory hasn't reached its target for num of forts
    ai_fort_level_is_lower_than_wanted = yes
}

# Only wanted by civilized great powers to make their capitals stand out
ai_needs_giga_fort_in_territory = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state

    is_capital = yes
    OR = {
        owner = {
            trigger_if = {
                limit = {
                    is_tribal = no
                }
                num_of_territories_svalue >= 300
            }
            trigger_else = {
                rank >= great_power
            }
        }
        num_of_fortress_building_projected >= level_of_giga_fort_wanted
    }
}

ai_needs_mega_fort_in_territory = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state
    
    # Wanted in capital by everyone other than civilized great powers, who want giga instead
    trigger_if = {
        limit = {
            is_capital = yes
            NOR = {
                owner = {
                    trigger_if = {
                        limit = {
                            is_tribal = no
                        }
                        num_of_territories_svalue >= 300
                    }
                    trigger_else = {
                        rank >= great_power
                    }
                }
                num_of_fortress_building_projected >= level_of_giga_fort_wanted
            }
        }
        always = yes
    }
    # Only build mega forts in capital state and on perimeter as they are a huge budget drain
    trigger_else_if = {
        limit = {
            state = {
                state_is_perimeter_of_its_country = yes
            }
        }
        # Only build mega forts in redoubts with high fort importance, otherwise it's not worth the investment
        ai_territory_is_redoubt_of_state = yes
        territory_priority_for_having_fort >= priority_threshold_for_mega_fort
    }
    trigger_else = {
        always = no
    }
}

ai_needs_single_fort_in_territory = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state

    # Only want forts in redoubts
    ai_territory_is_redoubt_of_state = yes

    OR = {
        # Build forts in capital state and all perimeter ones to defend country border
        state = {
            state_is_perimeter_of_its_country = yes
        }
        # For non-perimeter states it must be redoubt with high fort importance
        territory_priority_for_having_fort >= priority_threshold_for_mega_fort
    }
}

# Uses persistent cache based on corresponding "needs" triggers
ai_wants_giga_fort_in_territory = {
    ai_fort_level_wanted_in_territory = level_of_giga_fort_wanted
}
ai_wants_mega_fort_in_territory = {
    ai_fort_level_wanted_in_territory = level_of_mega_fort_wanted
}
ai_wants_single_fort_in_territory = {
    ai_fort_level_wanted_in_territory = 1
}
ai_wants_high_tier_fort_in_territory = {
    OR = {
        ai_wants_giga_fort_in_territory = yes
        ai_wants_mega_fort_in_territory = yes
    }
}

ai_fort_level_is_higher_than_wanted = {
    num_of_fortress_building_projected > ai_fort_level_wanted_in_territory
}

ai_fort_level_is_lower_than_wanted = {
    num_of_fortress_building_projected < ai_fort_level_wanted_in_territory
}

ai_has_enough_building_slots_for_fort = {    
    # We count mega forts same as giga here for simplicity and giga being more of an extra than necessity
    trigger_if = {
        limit = {
            ai_wants_high_tier_fort_in_territory = yes
        }
        trigger_if = {
            limit = {
                $and_some_more$ = 1
            }
            free_building_slots > building_slots_required_for_mega_fort
        }
        trigger_else = {
            free_building_slots >= building_slots_required_for_mega_fort
        }
    }
    trigger_else_if = {
        limit = {
            ai_wants_single_fort_in_territory = yes
        }
        trigger_if = {
            limit = {
                $and_some_more$ = 1
            }
            free_building_slots > building_slots_required_for_single_fort
        }
        trigger_else = {
            free_building_slots >= building_slots_required_for_single_fort
        }
    }
    trigger_else = {
        always = yes
    }
}

ai_territory_can_have_fort = {
    # Ensure nothing weird happened and there are any slots at all
    num_of_total_building_slots > 0
    OR = {
        # If it has fort already, it probably can have it?
        num_of_fortress_building_projected > 0
        # Ports are not occupying all building slots - they are higher in priority
        can_have_port = no
        port_level_including_construction < num_of_total_building_slots
    }
}

ai_territory_is_redoubt_of_state = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state

    trigger_if = {
        limit = {
            state = {
                ai_state_has_redoubt_territory = yes
            }
        }
        this = state.var:cached_redoubt_territory_of_state
    }
    trigger_else = {
        always = no
    }
}

ai_should_rebuild_territory_fort = {
    # Mandatory checks for fort decision making to rule out error log spam in edge cases
    exists = owner
    exists = state

    # Don't rebuild forts from territories we just acquired
    NOT = {
        has_variable = ai_acquired_territory_with_fort
    }

    # There's a territory where we can rebuild fort to
    has_non_empty_local_variable_list = {
        name = territories_allowed_to_build_fort
    }
    any_in_local_list = {
        variable = territories_allowed_to_build_fort
        ai_can_rebuild_fort_to_territory = yes
    }

    # Guarantee that we would end up with enough money for rebuilding
    trigger_if = {
        limit = {
            has_specific_construction = fortress_building
        }
        owner = {
            treasury_after_cancelling_fort >= treasury_for_rebuilding_more_forts
        }
    }
    trigger_else = {
        owner = {
            treasury_after_removing_fort >= treasury_for_rebuilding_more_forts
        }
    }

    # Rebuild only forts that exceed wanted level
    ai_fort_level_is_higher_than_wanted = yes

    # Don't rebuild forts of capital state redoubt
    OR = {
        state = {
            is_capital_state = no
        }
        ai_territory_is_redoubt_of_state = no
    }

    # Only rebuild if either...
    OR = {
        # ...this is high level fort so it won't be left unprotected...
        num_of_fortress_building_projected > 1
        # ...or it's not a perimeter state so it can do without forts...
        state = {
            state_is_perimeter_of_its_country = no
        }
        # ...or there is some other territory with fort in same state...
        ai_territory_state_has_other_fort = yes
        # ...or we are doing rebuilding to redoubt of the same state
        any_in_local_list = {
            variable = territories_allowed_to_build_fort
            state = scope:territory_under_fort_optimization.state
            ai_can_rebuild_fort_to_territory = yes
        }
    }
}

# Is checked only if rebuilding trigger is false, prioritization is done via ordered_state_province
ai_should_reduce_territory_fort = {
    OR = {

        # Non-redoubt territories where state is not perimeter or has other non-projected fort
        AND = {
            ai_territory_is_redoubt_of_state = no
            OR = {
                state = {
                    state_is_perimeter_of_its_country = no
                }
                ai_territory_state_has_other_fort = yes
            }
        }

        # Borders shifted, country gained some forts in the process, fort budget is exceeded
        AND = {
            owner = {
                has_variable = ai_country_acquired_fort_territory
            }
            local_var:fort_maintenance_without_modifiers > country_fort_maintenance_budget
            OR = {
                # Downgrade all newly acquired high level forts to single ignoring any conditions
                AND = {
                    has_variable = ai_acquired_territory_with_fort
                    num_of_fortress_building > 1
                }
                # Reduce all non-perimeter forts to wanted levels if affected by perimeter shifting
                AND = {
                    ai_fort_level_is_higher_than_wanted = yes
                    state = {
                        state_is_perimeter_of_its_country = no
                        # Either the state itself or any of its neighbors acquired fort territories
                        OR = {
                            has_variable = ai_state_acquired_fort_territory
                            any_neighbor_area = {
                                any_area_state = {
                                    owner = scope:territory_under_fort_optimization.owner
                                    has_variable = ai_state_acquired_fort_territory
                                    state_is_neighbor_of = {
                                        state = scope:territory_under_fort_optimization.state
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        # State is above fort limit
        state = {
            state_fort_limit_used > state_fort_limit_svalue
        }
    }
}

# Counts only non-projected forts
ai_territory_state_has_other_fort = {
    save_temporary_scope_as = initial_territory_of_checked_state
    state = {
        OR = {
            AND = {
                ai_state_has_redoubt_territory = yes
                var:cached_redoubt_territory_of_state = {
                    num_of_fortress_building > 0
                }
            }
            any_state_province = {
                NOT = {
                    this = scope:initial_territory_of_checked_state
                }
                num_of_fortress_building > 0
            }
        }
    }
}

ai_can_rebuild_fort_to_territory = {
    NOT = {
        this = scope:territory_under_fort_optimization
    }
    OR = {
        # Same state rebuilding, so state fort limit is unchanged
        state = scope:territory_under_fort_optimization.state
        # Don't exceed state fort limit as it's very expensive
        state.state_fort_limit_svalue >= state_fort_limit_with_1_more_level
    }
}

# Covers gates, mountain passes, their desert alternatives, and probably various modifiers from missions etc.
ai_territory_is_deadly_to_armies = {
    OR = {
        modifier:attrition > 0
        modifier:local_hostile_attrition > 0
    }
    OR = {
        modifier:supply_limit < 0
        modifier:supply_limit_modifier < 0
        modifier:local_combat_width_modifier < 0
    }
}

ai_territory_is_good_for_defense = {
    OR = {
        ai_territory_is_deadly_to_armies = yes
        AND = {
            save_temporary_scope_as = potential_defense_territory
            any_neighbor_province = {
                ai_territory_is_deadly_to_armies = yes
                territory_is_ownable = no
                NOT = {
                    any_neighbor_province = {
                        NOT = {
                            this = scope:potential_defense_territory
                        }
                        owner = scope:potential_defense_territory.owner
                        territory_priority_by_population > scope:potential_defense_territory.territory_priority_by_population
                    }
                }
            }
        }
    }
}

ai_state_has_redoubt_territory = {
    has_variable = cached_redoubt_territory_of_state
}