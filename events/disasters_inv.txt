namespace = disasters_inv

###Floods
disasters_inv.1 = { #flood in flood_plain
	type = country_event
	title = disasters_inv.1.t
	desc = disasters_inv.1.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:the_day_after.governor
	goto_location = scope:the_day_after

	trigger = {
		any_owned_province = {
			terrain = flood_plain
		}
		NOT = {
			has_variable = floods_cooldown
		}
	}

	immediate = {
		random_owned_province = {
			limit = {
				terrain = flood_plain
				total_population >= 4
			}
			save_scope_as = the_day_after
			add_province_modifier = {
				name = flood_initial_damage
				duration = 730
			}
			ordered_pops_in_province = {
				order_by = pop_hapiness
				max = {
					value = total_population
					multiply = 0.15
				}
				kill_pop = yes
			}
			custom_tooltip = disasters_inv_destroyed_building
			hidden_effect = {
				random_list = {
					1 = {
						trigger = { has_building = commerce_building }
						remove_building_level = commerce_building
					}
					1 = {
						trigger = { has_building = library_building }
						remove_building_level = library_building
					}
					1 = {
						trigger = { has_building = theathre_building }
						remove_building_level = theathre_building
					}
					1 = {
						trigger = { has_building = academy_building }
						remove_building_level = academy_building
					}
					1 = {
						trigger = { has_building = population_building } # granary
						remove_building_level = population_building
					}
					1 = {
						trigger = { has_building = forum_building }
						remove_building_level = forum_building
					}
					1 = {
						trigger = { has_building = workshop_building }
						remove_building_level = workshop_building
					}
					1 = {
						trigger = { has_building = port_building }
						remove_building_level = port_building
					}
					8 = {}
				}
			}
		}
	}

	option = { #secure the area
		name = disasters_inv.1.a
		current_ruler = {
			add_popularity = 5
		}
		add_treasury = {
			subtract = has_monthly_income
			multiply = 6
			max = -200
			min = -50
		}
		trigger_event = {
			id = disasters_inv.3
			days = { 10 20 }
		}
	}

	option = { #greedy bastard
		name = disasters_inv.1.b
		hidden_effect = {
			if = {
				limit = {
					scope:the_day_after = {
						any_neighbor_province = {
							exists = owner
							owner = root
							OR = {
								terrain = flood_plain
								terrain = farmland
								terrain = plains
							}
						}
					}
				}
				random = {
					chance = 50
					trigger_event = {
						id = disasters_inv.2
						days = { 1 7 }
					}
				}
			}
		}
	}

	after = {
		set_variable = {
			name = floods_cooldown
			days = 9125 #25yrs
		}
	}
}

disasters_inv.2 = { #spread of the flood
	type = country_event
	title = disasters_inv.2.t
	desc = disasters_inv.2.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:the_day_after.governor
	goto_location = scope:the_day_after

	immediate = {
		if = {
			limit = {
				scope:the_day_after = {
					any_neighbor_province = {
						exists = owner
						owner = root
						OR = {
							terrain = flood_plain
							terrain = farmland
							terrain = plains
						}
					}
				}
			}
			scope:the_day_after = {
				every_neighbor_province = {
					add_province_modifier = {
						name = flood_reduced_damage
						duration = 365
					}
					hidden_effect = {
						random_list = {
							1 = {
								trigger = { has_building = commerce_building }
								remove_building_level = commerce_building
							}
							1 = {
								trigger = { has_building = library_building }
								remove_building_level = library_building
							}
							1 = {
								trigger = { has_building = theathre_building }
								remove_building_level = theathre_building
							}
							1 = {
								trigger = { has_building = academy_building }
								remove_building_level = academy_building
							}
							1 = {
								trigger = { has_building = population_building } # granary
								remove_building_level = population_building
							}
							1 = {
								trigger = { has_building = forum_building }
								remove_building_level = forum_building
							}
							1 = {
								trigger = { has_building = workshop_building }
								remove_building_level = workshop_building
							}
							1 = {
								trigger = { has_building = port_building }
								remove_building_level = port_building
							}
							8 = {}
						}
					}
				}
			}
		}
	}

	option = {
		name = disasters_inv.2.a
		trigger_event = {
			id = disasters_inv.3
			days = { 1 7 }
		}
	}
}

disasters_inv.3 = { #flood receding
	type = country_event
	title = disasters_inv.3.t
	desc = disasters_inv.3.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:the_day_after.governor
	goto_location = scope:the_day_after

	option = {
		name = disasters_inv.3.a
	}
}

###Avalanche
disasters_inv.4 = { #Avalanche
	type = country_event
	title = disasters_inv.4.t
	desc = disasters_inv.4.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:snowball.governor
	goto_location = scope:snowball

	trigger = {
		any_owned_province = {
			terrain = mountain
		}
		NOT = {
			has_variable = avalanche_cooldown
		}
	}

	immediate = {
		random_owned_province = {
			limit = {
				terrain = mountain
				total_population >= 4
			}
			if = {
				limit = {
					NOT = {
						has_variable = starting_point
					}
				}
				set_variable = {
					name = starting_point
					days = 2
				}
			}
			switch = {
				trigger = has_variable
				starting_point = {
					save_scope_as = snowball
				}
				recurring_disaster = {}
			}
			add_province_modifier = {
				name = hit_by_avalanche
				duration = 730
			}
			ordered_pops_in_province = {
				order_by = pop_hapiness
				max = {
					value = total_population
					multiply = 0.35
				}
				kill_pop = yes
			}
			if = {
				limit = {
					any_unit_in_province = {
						exists = yes
					}
				}
				every_unit_in_province = {
					damage_unit_percent = 0.06
					damage_unit_morale_percent = 0.12
				}
			}
			custom_tooltip = disasters_inv_destroyed_building
			hidden_effect = {
				random_list = {
					1 = {
						trigger = { has_building = commerce_building }
						remove_building_level = commerce_building
					}
					1 = {
						trigger = { has_building = library_building }
						remove_building_level = library_building
					}
					1 = {
						trigger = { has_building = theathre_building }
						remove_building_level = theathre_building
					}
					1 = {
						trigger = { has_building = academy_building }
						remove_building_level = academy_building
					}
					1 = {
						trigger = { has_building = population_building } # granary
						remove_building_level = population_building
					}
					1 = {
						trigger = { has_building = forum_building }
						remove_building_level = forum_building
					}
					1 = {
						trigger = { has_building = workshop_building }
						remove_building_level = workshop_building
					}
					1 = {
						trigger = { has_building = port_building }
						remove_building_level = port_building
					}
					8 = {}
				}
			}
		}
	}

	option = {
		name = disasters_inv.4.a
	}

	after = {
		if = {
			limit = {
				scope:snowball = {
					any_neighbor_province = {
						terrain = mountain
						NOT = {
							has_province_modifier = hit_by_avalanche
						}
					}
				}
			}
			scope:snowball = {
				clear_saved_scope = snowball
				random_neighbor_province = {
					limit = {
						terrain = mountain
						NOT = {
							has_province_modifier = hit_by_avalanche
						}
					}
					save_scope_as = snowball
					set_variable = {
						name = recurring_disaster
						days = 7
					}
					random = {
						chance = 50
						owner = {
							trigger_event = {
								id = disasters_inv.4
								days = { 3 5 }
							}
						}
					}
				}
			}
		}
		else = {
			set_variable = {
				name = avalanche_cooldown
				days = 9125 #25 yrs
			}
		}
	}
}

###Landslide
disasters_inv.5 = { #landslide
	type = country_event
	title = disasters_inv.5.t
	desc = disasters_inv.5.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:mudstick.governor
	goto_location = scope:mudstick

	trigger = {
		any_owned_province = {
			terrain = hills
		}
		NOT = {
			has_variable = hills_cooldown
		}
	}

	immediate = {
		random_owned_province = {
			limit = {
				terrain = hills
				total_population >= 4
			}
			save_scope_as = mudstick
			add_province_modifier = {
				name = the_land_slides_into_your_dms
				duration = 730
			}
			if = {
				limit = {
					any_unit_in_province = {
						exists = yes
					}
				}
				every_unit_in_province = {
					damage_unit_percent = 0.06
					damage_unit_morale_percent = 0.12
				}
			}
			if = {
				limit = {
					has_building = fortress_ramparts_building
				}
				ordered_pops_in_province = {
					order_by = pop_hapiness
					max = {
						value = total_population
						multiply = 0.05
					}
					kill_pop = yes
				}
			}
			else = {
				ordered_pops_in_province = {
					order_by = pop_hapiness
					max = {
						value = total_population
						multiply = 0.15
					}
					kill_pop = yes
				}
			}
			custom_tooltip = disasters_inv_destroyed_building
			hidden_effect = {
				random_list = {
					1 = {
						trigger = { has_building = commerce_building }
						remove_building_level = commerce_building
					}
					1 = {
						trigger = { has_building = library_building }
						remove_building_level = library_building
					}
					1 = {
						trigger = { has_building = theathre_building }
						remove_building_level = theathre_building
					}
					1 = {
						trigger = { has_building = academy_building }
						remove_building_level = academy_building
					}
					1 = {
						trigger = { has_building = population_building } # granary
						remove_building_level = population_building
					}
					1 = {
						trigger = { has_building = forum_building }
						remove_building_level = forum_building
					}
					1 = {
						trigger = { has_building = workshop_building }
						remove_building_level = workshop_building
					}
					1 = {
						trigger = { has_building = port_building }
						remove_building_level = port_building
					}
					8 = {}
				}
			}
		}
	}

	option = { #Prepare for further damage
		name = disasters_inv.5.a
		current_ruler = {
			add_popularity = 5
			add_trait = disciplined
		}
		add_treasury = {
			subtract = has_monthly_income
			multiply = 12
			max = -300
			min = -50
		}
		set_variable = {
			name = money_money_money
			days = 14
		}
	}

	option = { #Run the risk of further damage
		name = disasters_inv.5.b
		set_variable = {
			name = must_be_funny
			days = 14
			value = 0
		}
		current_ruler = {
			add_trait = brave
		}
	}

	after = {
		trigger_event = {
			id = disasters_inv.6
			days = { 3 10 }
		}
	}
}

disasters_inv.6 = {
	type = country_event
	title = disasters_inv.6.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_variable = money_money_money
				}
				desc = disasters_inv.6.desc_1
			}
			triggered_desc = {
				trigger = {
					has_variable = must_be_funny
				}
				desc = disasters_inv.6.desc_2
			}
		}
	}
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:mudstick.governor
	goto_location = scope:mudstick

	immediate = {
		if = {
			limit = {
				has_variable = must_be_funny
			}
			random 	= { #Landslide gets worse
				chance = 50
				change_variable = {
					add = 1
					name = must_be_funny
				}
			}
			if = {
				limit = {
					var:must_be_funny = 1
				}
				scope:mudstick = {
					reduce_province_rank_effect = yes
					if = {
						limit = {
							is_holy_site = yes
						}
						remove_province_deity = yes
					}
					if = {
						limit = {
							has_building = fortress_ramparts_building
						}
						ordered_pops_in_province = {
							order_by = pop_hapiness
							max = {
								value = total_population
								multiply = 0.05
							}
							kill_pop = yes
						}
					}
					else = {
						ordered_pops_in_province = {
							order_by = pop_hapiness
							max = {
								value = total_population
								multiply = 0.15
							}
							kill_pop = yes
						}
					}
					random_list = {
						1 = {
							trigger = { has_building = commerce_building }
							remove_building_level = commerce_building
						}
						1 = {
							trigger = { has_building = library_building }
							remove_building_level = library_building
						}
						1 = {
							trigger = { has_building = theathre_building }
							remove_building_level = theathre_building
						}
						1 = {
							trigger = { has_building = academy_building }
							remove_building_level = academy_building
						}
						1 = {
							trigger = { has_building = population_building } # granary
							remove_building_level = population_building
						}
						1 = {
							trigger = { has_building = forum_building }
							remove_building_level = forum_building
						}
						1 = {
							trigger = { has_building = workshop_building }
							remove_building_level = workshop_building
						}
						1 = {
							trigger = { has_building = port_building }
							remove_building_level = port_building
						}
					}
				}
			}
			else = {
				scope:mudstick = {
					random_list = {
						1 = {
							trigger = { has_building = commerce_building }
							remove_building_level = commerce_building
						}
						1 = {
							trigger = { has_building = library_building }
							remove_building_level = library_building
						}
						1 = {
							trigger = { has_building = theathre_building }
							remove_building_level = theathre_building
						}
						1 = {
							trigger = { has_building = academy_building }
							remove_building_level = academy_building
						}
						1 = {
							trigger = { has_building = population_building } # granary
							remove_building_level = population_building
						}
						1 = {
							trigger = { has_building = forum_building }
							remove_building_level = forum_building
						}
						1 = {
							trigger = { has_building = workshop_building }
							remove_building_level = workshop_building
						}
						1 = {
							trigger = { has_building = port_building }
							remove_building_level = port_building
						}
						1 = {}
					}
				}
				add_political_influence = -10
			}
		}
	}

	option = { #prepared
		name = disasters_inv.6.a
		trigger = {
			has_variable = money_money_money
		}
		exclusive = yes
	}

	option = { #unprepared
		name = disasters_inv.6.b
		trigger = {
			has_variable = must_be_funny
		}
		exclusive = yes
	}

	after = {
		set_variable = {
			name = hills_cooldown
			days = 9125 #25 yrs
		}
	}
}

###Drought - May turn into a famine
disasters_inv.7 = { #drought
	type = country_event
	title = disasters_inv.7.t
	desc = disasters_inv.7.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:i_am_thirsty.governor
	goto_location = scope:i_am_thirsty

	trigger = {
		any_country_state = {
			OR = {
				state_monthly_food_income < 0
				has_state_food <= 0
			}
		}
		any_owned_province = {
			OR = {
				terrain = desert
				terrain = desert_hills
			}
		}
		NOT = {
			has_variable = drought_cooldown
		}
	}

	immediate = {
		random_country_state = {
			limit = {
				OR = {
					state_monthly_food_income < 0
					has_state_food <= 0
				}
			}
			save_scope_as = i_am_thirsty
			add_state_modifier = {
				name = grow_a_pear
				duration = 1825 #5 yrs
			}
		}
	}

	option = { #try to save and feed your people
		name = disasters_inv.7.a
		scope:i_am_thirsty = {
			area = {
				every_neighbor_area = {
					every_area_state = {
						add_state_food = -100
						add_state_modifier = {
							name = i_bet_you_wish_you_had_my_water
							duration = 365
						}
					}
				}
			}
			add_state_food = {
				value = 100
				multiply = 2 #count neighboring states
			}
		}
		add_treasury = {
			subtract = has_monthly_income
			multiply = 16
			max = -300
			min = -50
		}
		current_ruler = {
			add_trait = benefactor
		}
		hidden_effect = {
			if = {
				limit = {
					scope:i_am_thirsty.area = {
						any_neighbor_area = {
							any_area_state = {
								has_state_food <= 0
							}
						}
					}
				}
				scope:i_am_thirsty.area = {
					every_neighbor_area = {
						every_area_state = {
							limit = {
								has_state_food <= 0
							}
							add_state_modifier = {
								name = grow_a_pear
								duration = 1825 # 5yrs
							}
						}
					}
				}
			}
		}
	}

	option = { #ignore the area
		name = disasters_inv.7.b
		current_ruler = {
			add_trait = harsh
		}
		hidden_effect = {
			trigger_event = {
				id = disasters_inv.8 #drought spreads
				days = { 30 100 }
			}
			scope:i_am_thirsty.area = {
				every_neighbor_area = {
					every_area_state = {
						limit = {
							owner = root
						}
						add_state_food = -150
					}
				}
			}
		}
	}
}

disasters_inv.8 = {
	type = country_event
	title = disasters_inv.8.t
	desc = disasters_inv.8.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:i_am_thirsty.governor
	goto_location = scope:i_am_thirsty

	immediate = {
		set_variable = {
			name = drought_spread
			days = 500
			value = 5
		}
		scope:i_am_thirsty.area = {
			every_neighbor_area = {
				every_area_state = {
					add_state_modifier = {
						name = grow_a_pear
						duration = 1825 # 5yrs
					}
				}
			}
		}
	}

	option = {
		name = disasters_inv.8.a
		random_list = {
			25 = {
				modifier = {
					factor = var:drought_spread
				}
				custom_tooltip = disasters_inv_8_a_1
				trigger_event = {
					id = disasters_inv.8
					days = { 30 100 }
				}
			}
			75 = {
				custom_tooltip = disasters_inv_8_a_2
				set_variable = {
					name = drought_cooldown
					days = 9125 #25 yrs
				}
			}
		}
	}

	option = {
		name = disasters_inv.8.b
		custom_tooltip = disasters_inv_8_b
		trigger = {
			current_ruler = {
				OR = {
					has_trait = merciful
					has_trait = lunatic
					has_trait = lapsed
					has_trait = arbitrary
					has_trait = easygoing
				}
			}
			var:drought_spread >= 1
		}
		add_treasury = {
			subtract = has_monthly_income
			multiply = 32
			max = -500
			min = -50
		}
		highlight = yes
	}

	after = {
		if = {
			limit = {
				OR = {
					var:drought_spread = 5
					var:drought_spread = 4
					var:drought_spread = 3
					var:drought_spread = 2
				}
			}
			change_variable = {
				add = -1
				name = drought_spread
			}
		}
		scope:i_am_thirsty = {
			remove_state_modifier = grow_a_pear
			add_state_modifier = {
				name = grow_a_pear
				duration = 3650 #10 yrs
			}
			clear_saved_scope = i_am_thirsty
			set_variable = {
				name = thirsty_bois
				days = 500
			}
			area = {
				random_neighbor_area = {
					random_area_state = {
						limit = {
							has_state_modifier = grow_a_pear
							NOT = {
								has_variable = thirsty_bois
							}
						}
						save_scope_as = i_am_thirsty
					}
				}
			}
		}
	}
}
###Storms
disasters_inv.9 = { #Seastorm hitting coast - using vanilla events as base for location
	type = country_event
	title = disasters_inv.9.t
	desc = disasters_inv.9.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:stormy_daniels.governor
	goto_location = scope:stormy_daniels

	trigger = {
		any_province = {
			OR = {
				has_province_modifier = ravaged_by_storms
				has_province_modifier = stormy_seas
			}
			OR = {
				terrain = coastal_terrain
				terrain = ocean
			}
			any_neighbor_province = {
				owner = root
			}
		}
	}

	immediate = {
		random_province = {
			limit = {
				OR = {
					terrain = coastal_terrain
					terrain = ocean
				}
				OR = {
					has_province_modifier = ravaged_by_storms
					has_province_modifier = stormy_seas
				}
			}
			random_neighbor_province = {
				limit = {
					owner = root
				}
				save_scope_as = stormy_daniels
				if = {
					limit = {
						has_building = port_building
					}
					remove_building_level = port_building
				}
				if = {
					limit = {
						any_unit_in_province = {
							exists = yes
						}
					}
					every_unit_in_province = {
						damage_unit_percent = 0.06
						damage_unit_morale_percent = 0.12
					}
				}
				add_vfx = {
					name = "seastorm"
					duration = 90
				}
				add_province_modifier = {
					name = "stormy_seas"
					duration = 90
				}
				ordered_pops_in_province = {
					order_by = pop_hapiness
					max = {
						value = total_population
						multiply = 0.15
					}
					kill_pop = yes
				}
			}
			save_scope_as = stormy_mommy
			hidden_effect = {
				every_neighbor_province = {
					limit = {
						OR = {
							terrain = ocean
							terrain = coastal_terrain
						}
						NOT = { has_province_modifier = stormy_seas }
					}
					add_vfx = {
						name = "seastorm"
						duration = 60
					}
					add_province_modifier = {
						name = "stormy_seas"
						duration = 60
					}
					every_neighbor_province = {
						limit = {
							has_owner = yes
							NOT = { has_province_modifier = stormy_seas }
							OR = {
								terrain = ocean
								terrain = coastal_terrain
							}
						}
						add_province_modifier = {
							name = "ravaged_by_storms"
							duration = 90
						}
						add_vfx = {
							name = "seastorm"
							duration = 90
						}
					}
				}
			}
		}
	}

	option = {
		name = disasters_inv.9.a
	}
}

disasters_inv.10 = { #Sandstorm Extreme - using vanilla events as base for location
	type = country_event
	title = disasters_inv.10.t
	desc = disasters_inv.10.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:sandman.governor
	goto_location = scope:sandman

	trigger = {
		any_province = {
			has_province_modifier = desert_storm
			OR = {
				terrain = desert
				terrain = desert_hills
			}
			any_neighbor_province = {
				owner = root
			}
		}
	}

	immediate = {
		random_province = {
			limit = {
				OR = {
					terrain = desert
					terrain = desert_hills
				}
				has_province_modifier = desert_storm
			}
			random_neighbor_province = {
				limit = {
					owner = root
				}
				if = {
					limit = {
						NOT = {
							has_variable = starting_point
						}
					}
					set_variable = {
						name = starting_point
						days = 2
					}
				}
				switch = {
					trigger = has_variable
					starting_point = {
						save_scope_as = sandman
					}
					recurring_disaster = {}
				}
				ordered_pops_in_province = {
					order_by = pop_hapiness
					max = {
						value = total_population
						multiply = 0.1
					}
					kill_pop = yes
				}
				if = {
					limit = {
						any_unit_in_province = {
							exists = yes
						}
					}
					every_unit_in_province = {
						damage_unit_percent = 0.12
						damage_unit_morale_percent = 0.3
					}
				}
				add_province_modifier = {
					name = sand_up_comedy
					duration = 120
				}
				add_vfx = {
					name = "desert_sandstorm"
					duration = 120
				}
			}
			save_scope_as = sandman_daddy
			hidden_effect = {
				every_neighbor_province = {
					limit = {
						OR = {
							terrain = desert
							terrain = desert_hills
							terrain = oasis
						}
						NOT = { has_province_modifier = desert_storm}
					}
					add_vfx = {
						name = "desert_sandstorm"
						duration = 90
					}
					add_province_modifier = {
						name = "sand_up_comedy"
						duration = 90
					}
					every_neighbor_province = {
						limit = {
							has_owner = yes
							OR = {
								terrain = desert
								terrain = desert_hills
								terrain = oasis
							}
							NOT = { has_province_modifier = desert_storm}
						}
						add_province_modifier = {
							name = "sand_up_comedy"
							duration = 90
						}
						add_vfx = {
							name = "desert_sandstorm"
							duration = 90
						}
					}
				}
			}
		}
	}

	option = {
		name = disasters_inv.10.a
	}

	after = {
		custom_tooltip = disaster_spread_chance_tt
		hidden_effect = {
			random = {
				chance = 50
				scope:sandman = {
					clear_saved_scope = sandman
				}
				random_owned_province = {
					limit = {
						has_province_modifier = sand_up_comedy
						any_neighbor_province = {
							NOT = {
								has_province_modifier = sand_up_comedy
							}
						}
					}
					random_neighbor_province = {
						limit = {
							NOT = {
								has_province_modifier = sand_up_comedy
							}
						}
						save_scope_as = sandman
						set_variable = {
							name = recurring_disaster
							days = 7
						}
					}
				}
				scope:sandman.owner = {
					trigger_event = {
						id = disasters_inv.10
						days = { 2 6 }
					}
				}
			}
		}
	}
}

disasters_inv.11 = { #Snowstorm Extreme
	type = country_event
	title = disasters_inv.11.t
	desc = disasters_inv.11.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:not_snowden.governor
	goto_location = scope:not_snowden

	trigger = {
		any_province = {
			OR = { #merged the vanilla snowstorm areas from 3 events
				is_in_region = scandinavia_region
				is_in_region = germania_region
				is_in_region = bohemia_area
				is_in_region = vistulia_region
				is_in_region = belgica_region
				is_in_region = germania_superior_region
				is_in_region = rhaetia_region
				is_in_region = armorica_region
				is_in_region = caledonia_region
				is_in_region = himalayan_region
				is_in_region = sogdiana_region
				is_in_region = tibet_region
				is_in_region = bactriana_region
			}
			has_winter = yes
			NOT = { has_province_modifier = snow_storm }
			any_neighbor_province = {
				owner = root
			}
		}
	}

	immediate = {
		random_province = {
			limit = {
				OR = { #merged the vanilla snowstorm areas from 3 events
					is_in_region = scandinavia_region
					is_in_region = germania_region
					is_in_region = bohemia_area
					is_in_region = vistulia_region
					is_in_region = belgica_region
					is_in_region = germania_superior_region
					is_in_region = rhaetia_region
					is_in_region = armorica_region
					is_in_region = caledonia_region
					is_in_region = himalayan_region
					is_in_region = sogdiana_region
					is_in_region = tibet_region
					is_in_region = bactriana_region
				}
				has_winter = yes
				#NOT = { has_province_modifier = snow_storm }
				any_neighbor_province = {
					owner = root
				}
			}
			save_scope_as = snow_daddy
			random_neighbor_province = {
				limit = {
					owner = root
					OR = {
						is_in_region = scandinavia_region
						is_in_region = germania_region
						is_in_region = bohemia_area
						is_in_region = vistulia_region
						is_in_region = belgica_region
						is_in_region = germania_superior_region
						is_in_region = rhaetia_region
						is_in_region = armorica_region
						is_in_region = caledonia_region
						is_in_region = himalayan_region
						is_in_region = sogdiana_region
						is_in_region = tibet_region
						is_in_region = bactriana_region
					}
					has_winter = yes
					NOT = { has_province_modifier = snow_storm }
				}
				if = {
					limit = {
						NOT = {
							has_variable = starting_point
						}
					}
					set_variable = {
						name = starting_point
						days = 2
					}
				}
				switch = {
					trigger = has_variable
					starting_point = {
						save_scope_as = not_snowden
					}
					recurring_disaster = {}
				}
				ordered_pops_in_province = {
					order_by = pop_hapiness
					max = {
						value = total_population
						multiply = 0.15
					}
					kill_pop = yes
				}
				if = {
					limit = {
						any_unit_in_province = {
							exists = yes
						}
					}
					every_unit_in_province = {
						damage_unit_percent = 0.12
						damage_unit_morale_percent = 0.3
					}
				}
				add_vfx = {
					name = "snowstorm"
					duration = 90
				}
				add_province_modifier = {
					name = "jizz_storm"
					duration = 90
				}
				every_neighbor_province = {
					limit = {
						OR = {
							is_in_region = scandinavia_region
							is_in_region = germania_region
							is_in_region = bohemia_area
							is_in_region = vistulia_region
							is_in_region = belgica_region
							is_in_region = germania_superior_region
							is_in_region = rhaetia_region
							is_in_region = armorica_region
							is_in_region = caledonia_region
							is_in_region = himalayan_region
							is_in_region = sogdiana_region
							is_in_region = tibet_region
							is_in_region = bactriana_region
						}
						has_winter = yes
						NOT = { has_province_modifier = jizz_storm }
					}
					add_vfx = {
						name = "snowstorm"
						duration = 90
					}
					add_province_modifier = {
						name = "jizz_storm"
						duration = 90
					}
					every_neighbor_province = {
						limit = {
							OR = {
								is_in_region = scandinavia_region
								is_in_region = germania_region
								is_in_region = bohemia_area
								is_in_region = vistulia_region
								is_in_region = belgica_region
								is_in_region = germania_superior_region
								is_in_region = rhaetia_region
								is_in_region = armorica_region
								is_in_region = caledonia_region
								is_in_region = himalayan_region
								is_in_region = sogdiana_region
								is_in_region = tibet_region
								is_in_region = bactriana_region
							}
							has_winter = yes
							NOT = { has_province_modifier = jizz_storm }
						}
						add_vfx = {
							name = "snowstorm"
							duration = 90
						}
						add_province_modifier = {
							name = "jizz_storm"
							duration = 90
						}
					}
				}
			}
		}
	}

	option = {
		name = disasters_inv.11.a
	}

	after = {
		custom_tooltip = disaster_spread_chance_tt
		hidden_effect = {
			random = {
				chance = 50
				scope:not_snowden = {
					clear_saved_scope = not_snowden
				}
				random_owned_province = {
					limit = {
						has_province_modifier = jizz_storm
						any_neighbor_province = {
							NOT = {
								has_province_modifier = jizz_storm
							}
						}
					}
					random_neighbor_province = {
						limit = {
							NOT = {
								has_province_modifier = jizz_storm
							}
						}
						save_scope_as = not_snowden
						set_variable = {
							name = recurring_disaster
							days = 7
						}
					}
				}
				scope:not_snowden.owner = {
					trigger_event = {
						id = disasters_inv.11
						days = { 2 6 }
					}
				}
			}
		}
	}
}
###Locusts
disasters_inv.12 = { #first sightings of bigger swarms of locusts. Can try to squash
	type = country_event
	title = disasters_inv.12.t
	desc = disasters_inv.12.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:we_are_hungry.governor
	goto_location = scope:we_are_hungry

	trigger = {
		any_owned_province = {
			locust_target_trigger = yes #plant based trade_goods in Africa/Arabia
		}
		NOT = {
			has_variable = locusts_ate_everything_cooldown
		}
	}

	immediate = {
		random_owned_province = {
			limit = {
				locust_target_trigger = yes
			}
			add_province_modifier = {
				name = light_locust_plague
				duration = 200
			}
			save_scope_as = we_are_hungry
		}
	}

	option = { #act against
		name = disasters_inv.12.a
		custom_tooltip = anti_locust_power_tt
		add_treasury = {
			subtract = has_monthly_income
			multiply = 24
			max = -500
			min = -50
		}
		set_variable = {
			name = act_against_locusts
			days = 1
		}
	}

	option = { #don't do anything
		name = disasters_inv.12.b
	}

	after = {
		hidden_effect = {
			random_list = {
				10 = {
					trigger = {
						has_variable = act_against_locusts
					}
					set_variable = {
						name = locusts_ate_everything_cooldown
						days = 9125 #25 yrs
					}
					trigger_event = {
						id = disasters_inv.15
						days = { 30 60 }
					}
				}
				5 = {
					trigger_event = {
						id = disasters_inv.13
						days = { 14 35 } #2-5 weeks
					}
				}
			}
		}
	}
}

disasters_inv.13 = { #locusts getting worse
	type = country_event
	title = disasters_inv.13.t
	desc = disasters_inv.13.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:we_are_hungry.governor
	goto_location = scope:we_are_hungry

	immediate = {
		scope:we_are_hungry = {
			every_neighbor_province = {
				add_province_modifier = {
					name = light_locust_plague
					duration = 180
				}
			}
		}
	}

	option = { #act against
		name = disasters_inv.13.a
		custom_tooltip = anti_locust_power_tt
		add_treasury = {
			subtract = has_monthly_income
			multiply = 36
			max = -600
			min = -50
		}
		set_variable = {
			name = act_against_locusts
			days = 1
		}
	}

	option = { #don't do anything
		name = disasters_inv.13.b
	}

	after = {
		hidden_effect = {
			random_list = {
				10 = {
					trigger = {
						has_variable = act_against_locusts
					}
					set_variable = {
						name = locusts_ate_everything_cooldown
						days = 9125 #25 yrs
					}
					trigger_event = {
						id = disasters_inv.15
						days = { 30 60 }
					}
				}
				10 = {
					trigger_event = {
						id = disasters_inv.14
						days = { 14 21 } #2-3 Weeks
					}
				}
			}
		}
	}
}

disasters_inv.14 = {
	type = country_event
	title = disasters_inv.14.t
	desc = disasters_inv.14.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:we_are_hungry.governor
	goto_location = scope:we_are_hungry

	immediate = {
		custom_tooltip = locusts_spreading_tt
		hidden_effect = {
			every_owned_province = {
				limit = {
					has_province_modifier = light_locust_plague
				}
				remove_province_modifier = light_locust_plague
				if = {
					limit = {
						locust_target_trigger = yes
						NOT = {
							has_province_modifier = locust_plague
						}
					}
					add_province_modifier = {
						name = locust_plague
						duration = 365
					}
					every_neighbor_province = {
						limit = {
							NOT = {
								has_province_modifier = locust_plague_non_plant
							}
						}
						add_province_modifier = {
							name = light_locust_plague
							duration = 180
						}
					}
				}
				else = {
					add_province_modifier = {
						name = locust_plague_non_plant
						duration = 365
					}
					every_neighbor_province = {
						add_province_modifier = {
							name = light_locust_plague
							duration = 180
						}
					}
				}
			}
		}
		show_as_tooltip = {
			scope:we_are_hungry = {
				add_province_modifier = {
					name = locust_plague
					duration = 365
				}
			}
		}
		custom_tooltip = locusts_spreading_2_tt
		show_as_tooltip = {
			scope:we_are_hungry = {
				add_province_modifier = {
					name = locust_plague_non_plant
					duration = 365
				}
			}
		}
		custom_tooltip = locusts_spreading_3_tt
		show_as_tooltip = {
			scope:we_are_hungry = {
				add_province_modifier = {
					name = light_locust_plague
					duration = 180
				}
			}
		}
	}

	option = { #act against
		name = disasters_inv.14.a
		custom_tooltip = anti_locust_power_tt
		add_treasury = {
			subtract = has_monthly_income
			multiply = 15
			max = -300
			min = -50
		}
	}

	option = { #don't do anything
		name = disasters_inv.14.b
	}

	after = {
		hidden_effect = {
			set_variable = {
				name = locusts_ate_everything_cooldown
				days = 9125 #25 yrs
			}
			trigger_event = {
				id = disasters_inv.15
				days = { 30 60 }
			}
		}
	}
}

disasters_inv.15 = { #locusts over
	type = country_event
	title = disasters_inv.15.t
	desc = disasters_inv.15.desc
	picture = natural_disaster

	left_portrait = current_ruler
	right_portrait = scope:we_are_hungry.governor
	goto_location = scope:we_are_hungry

	option = {
		name = disasters_inv.15.a
		random_list = {
			3 = {
				current_ruler = {
					add_trait = wise
				}
			}
			12 = {
			}
		}
	}
}