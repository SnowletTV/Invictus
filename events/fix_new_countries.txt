namespace = fix_new_countries

##Cant use spartan events because that event is for coruler

fix_new_countries.1 = {
	type = country_event
	hidden = yes

	trigger = {
		NOT = {
			has_variable = fix_new_countries
		}
		is_monarchy = yes
	}		
		
	immediate = {
		set_variable = {
			name = fix_new_countries
		}
		#get_my_ruler_effect = yes
		current_ruler = {
			save_scope_as = the_true_ruler
		}
		scope:the_true_ruler = {
			family = {
				every_family_member = {
					add_character_modifier = {
						name = family_reorganisation
					}
				}
			}
		}
		
		trigger_event = {
			id = fix_new_countries.2
		}
	}
}

###EVENT 2: Demote Family members of Ruler so he is automatically made the head of family. 

fix_new_countries.2 = {
	type = country_event
	hidden = yes
	
	immediate = {
		every_character = {
			limit = {
				NOT = { is_ruler = yes }
				has_character_modifier = family_reorganisation
			}
			set_as_minor_character = this
		}
		trigger_event = {
			id = fix_new_countries.3
		}
	}
}

###EVENT 3: Re-Adopt the family members

fix_new_countries.3 = {
	type = country_event
	hidden = yes
		
	immediate = {
		random_character = {
			limit = {
				is_ruler = yes
			}
			save_scope_as = ruler_head_of_family
			remove_character_modifier = family_reorganisation
		}
		every_character = {
			limit = {
				has_character_modifier = family_reorganisation
			}
			set_family = scope:ruler_head_of_family.family
			adapt_family_name = yes
			set_home_country = ROOT
			remove_character_modifier = family_reorganisation
		}
		trigger_event = { ##put traits on kids of ruler if they have any
			id = firstborn_traits.1
			days = 1
		}
		trigger_event = {
			id = fix_new_countries.4
			days = 3
		}	
	}
}

fix_new_countries.4 = {
	type = country_event
	hidden = yes

	immediate = {
		calculate_succession_effect = yes
	}
}