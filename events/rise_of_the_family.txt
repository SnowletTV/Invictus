namespace = family_events

#Rising from Obscurity
family_events.1 = {
	type = country_event
	title = "family_events.1.t"
	desc = "family_events.1.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:family_candidate_1
	right_portrait = scope:family_candidate_2
	right_portrait = scope:family_candidate_3

	picture = council_country

	trigger = {
		NOT = { has_variable = rising_from_obscurity_cooldown }
		has_land = yes
		war = no #Wait until peace.
		has_civil_war = no #Wait until after any ongoing civil wars.
		num_of_families < num_allowed_families
		is_tribal = no
		is_republic = no
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
	}

	immediate = {
		set_variable = {
		    name = rising_from_obscurity_cooldown
		    days = 120
		}
		hidden_effect = {
			ordered_character = {
				limit = {
					is_adult = yes
					is_minor_character = yes
					is_mercenary = no
					NOT = { has_variable = olympic_attendee }
					#NOT = { has_character_modifier = was_once_great }
					NOT = { has_character_modifier = foreign_citizen }
					NOT = { has_variable = pyrrhus_travelling }
					prisoner = no
					trigger_if = {
						limit = { employer = { gender_equality = no } }
						is_male = yes
					}
					citizenship_restrictions_trigger = yes
				}
				check_range_bounds = no
				order_by = power_base
				save_scope_as = family_candidate_1
			}
			ordered_character = {
				limit = {
					is_adult = yes
					is_minor_character = yes
					is_mercenary = no
					NOT = { has_variable = olympic_attendee }
					#NOT = { has_character_modifier = was_once_great }
					NOT = { has_character_modifier = foreign_citizen }
					NOT = { has_variable = pyrrhus_travelling }
					prisoner = no
					trigger_if = {
						limit = { employer = { gender_equality = no } }
						is_male = yes
					}
					trigger_if = {
						limit = { exists = scope:family_candidate_1 }
						NOT = { this = scope:family_candidate_1 }
						NOT = {
							is_close_relative = scope:family_candidate_1
						}
					}
					citizenship_restrictions_trigger = yes
				}
				check_range_bounds = no
				order_by = power_base
				save_scope_as = family_candidate_2
			}
			ordered_character = {
				limit = {
					is_adult = yes
					is_minor_character = yes
					is_mercenary = no
					NOT = { has_variable = olympic_attendee }
					#NOT = { has_character_modifier = was_once_great }
					NOT = { has_character_modifier = foreign_citizen }
					NOT = { has_variable = pyrrhus_travelling }
					prisoner = no
					trigger_if = {
						limit = { employer = { gender_equality = no } }
						is_male = yes
					}
					trigger_if = {
						limit = { exists = scope:family_candidate_1 }
						NOT = { this = scope:family_candidate_1 }
						NOT = {
							is_close_relative = scope:family_candidate_1
						}
					}
					trigger_if = {
						limit = { exists = scope:family_candidate_2 }
						NOT = { this = scope:family_candidate_2 }
						NOT = {
							is_close_relative = scope:family_candidate_2
						}
					}
					citizenship_restrictions_trigger = yes
				}
				check_range_bounds = no
				order_by = power_base
				save_scope_as = family_candidate_3
			}

			#If for some reason we cannot muster these 3 candidates in the entire country we do the following:
			if = {
				limit = {
					NOT = { exists = scope:family_candidate_1 }
				}
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_1
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_1
						}
					}
				}
			}
			if = {
				limit = { NOT = { exists = scope:family_candidate_2 } }
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_2
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_2
						}
					}
				}
			}
			if = {
				limit = { NOT = { exists = scope:family_candidate_3 } }
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_3
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_3
						}
					}
				}
			}
		}
	}

	option = {
		name = "family_events.1.a"
		trigger = { exists = scope:family_candidate_1 }
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_1 } #Scripted Effect that passes on the saved scope.
		hidden_effect = {
			scope:family_candidate_1 = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_monarchy
							duration = -1
						}
					}
				}
			}
		}
	}
	option = {
		name = "family_events.1.b"
		trigger = { exists = scope:family_candidate_2 }
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_2 } #Scripted Effect that passes on the saved scope.
		hidden_effect = {
			scope:family_candidate_2 = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_monarchy
							duration = -1
						}
					}
				}
			}
		}
	}
	option = {
		name = "family_events.1.c"
		trigger = { exists = scope:family_candidate_3 }
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_3 } #Scripted Effect that passes on the saved scope.
		hidden_effect = {
			scope:family_candidate_3 = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_monarchy
							duration = -1
						}
					}
				}
			}
		}
	}
	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown
		}
	}
}

#Fall from Grace
family_events.2 = {
	type = country_event
	title = "family_events.2.t"
	desc = "family_events.2.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:fallen_head

	picture = council_country

	trigger = {
		NOR = {
			has_variable = rising_from_obscurity_cooldown
			has_variable = cyrenaica_dropper_flag
		}
		has_land = yes
		num_of_families > num_allowed_families
		war = no #Wait until peace.
		is_tribal = no
		has_civil_war = no #Wait until after any ongoing civil wars.
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
		any_family = {
			OR = {
				NOT = { any_family_member = { is_ruler = yes } }
				ROOT = { is_republic = yes }
			}
			exists = head_of_family
			head_of_family = {
				is_alive = yes
			}
		}
	}

	immediate = {
		set_variable = {
		    name = rising_from_obscurity_cooldown
		    days = 120
		}
		hidden_effect = {
			ordered_family = {
				limit = {
					NOT = { any_family_member = { has_same_family = char:150 } }
					OR = {
						NOT = { any_family_member = { is_ruler = yes } }
						ROOT = { is_republic = yes }
					}
					exists = head_of_family
					head_of_family = {
						is_alive = yes
					}
				}
				order_by = {
					value = 0
					add = this.prestige
					multiply = -1
				}
				check_range_bounds = no
				position = 0
				save_scope_as = fallen_family
				head_of_family = {
					save_scope_as = fallen_head
				}
			}
			scope:fallen_family = {
				every_family_member = {
					set_as_minor_character = THIS
					add_triggered_character_modifier = {
						name = was_once_great
						duration = -1
					}
				}
				remove_family = ROOT
			}
		}
	}

	option = {
		name = "family_events.2.a"
		custom_tooltip = family_events.2.a.tooltip
	}

	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown
		}
	}
}


#Minor Character Adopted - Without player intervention
family_events.3 = {
	type = character_event
	title = "family_events.3.t"
	desc = "family_events.3.desc"

	left_portrait = root
	right_portrait = scope:adopted_person

	picture = roman_trial

	trigger = {
		trigger_if = {
			limit = {
				employer = {
					is_ai = no
				}
			}
			is_ruler = no
		}
		family = {
			any_family_member = {
				count < ideal_family_size_svalue #num_of_expected_jobs +1
				OR = {
					is_male = yes
					employer = { gender_equality = yes }
				}
				is_adult = yes
				prisoner = no
				is_ruler = no
				NOT = { has_character_modifier = foreign_citizen }
			}
		}
	}

	immediate = {
		root.family = {
			if = {
				limit = { prestige > 200 }
				add_prestige = -5
			}
		} #Slight reduction, not as much as when ruling family does this.
		if = {
			limit = {
				employer = {
					any_character = {
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_adult = yes
						is_mercenary = no
						is_ruler = no
						employer = root.employer
						NOT = { has_variable = olympic_attendee }
						OR = {
							employer = { gender_equality = yes }
							is_male = yes
						}
						NOT = {
							has_character_modifier = foreign_citizen
						}
						prisoner = no
						NOT = { has_trait = proud }
						NOT = { has_trait = selfish }
						NOT = { has_trait = arrogant }
						NOT = { has_trait = stubborn }
						NOT = { has_variable = pyrrhus_travelling }
						OR = {
							has_culture = root.culture
							citizenship_restrictions_trigger = yes
						}
					}
				}
			}
			employer = {
				ordered_character = {
					check_range_bounds = no
					order_by = power_base
					max = 1
					limit = {
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_adult = yes
						is_mercenary = no
						is_ruler = no
						employer = root.employer
						NOT = { has_variable = olympic_attendee }
						OR = {
							employer = { gender_equality = yes }
							is_male = yes
						}
						NOT = {
							has_character_modifier = foreign_citizen
						}
						prisoner = no
						NOT = { has_trait = proud }
						NOT = { has_trait = selfish }
						NOT = { has_trait = arrogant }
						NOT = { has_trait = stubborn }
						NOT = { has_variable = pyrrhus_travelling }
						OR = {
							has_culture = root.culture
							citizenship_restrictions_trigger = yes
						}
					}
					set_family = root.family
					save_scope_as = adopted_person
					add_character_modifier = {
						name = adopted_into_great_family
						duration = -1
					}
					adapt_family_name = yes
				}
			}
		}
		else = {
			employer = {
				create_character = {
					female = no
					age = 30
					family = root.family
					save_scope_as = adopted_person
				}
			}
		}
	}

	option = { name = "family_events.3.a" }
}


#Minor Character Adopted - With player intervention
family_events.4 = {
	type = character_event
	title = "family_events.4.t"
	desc = "family_events.4.desc"

	left_portrait = root
	right_portrait = scope:adopted_person
	right_portrait = scope:adopted_person_2

	picture = roman_trial

	trigger = {
		employer =  {
			is_ai = no
			NOT = { has_variable = death_to_tyrants_flag }
		}
		current_date > 451.3.1 #No need to do this just when the game starts.
		NOT = { has_variable = adoption_reminder }
		is_ruler = yes
		is_minor_character = no
		family = {
			is_scorned = yes
			any_family_member = {
				count < ideal_family_size_svalue #num_of_expected_jobs +1
				is_adult = yes
				is_ruler = no
				OR = {
					employer = { gender_equality = yes }
					is_male = yes
				}
				NOT = {
					has_character_modifier = foreign_citizen
				}
				prisoner = no
			}
		}
	}

	immediate = {
		set_variable = {
			name = adoption_reminder
			days = 365
		}
		if = {
			limit = {
				employer = {
					any_character = {
						is_minor_character = yes
						NOT = { has_variable = olympic_attendee }
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						is_adult = yes
						OR = {
							employer = { gender_equality = yes }
							is_male = yes
						}
						NOT = {
							has_character_modifier = foreign_citizen
						}
						prisoner = no
						NOT = { has_trait = proud }
						NOT = { has_trait = selfish }
						NOT = { has_trait = arrogant }
						NOT = { has_trait = stubborn }
						NOT = { has_variable = pyrrhus_travelling }
						NAND = {
							employer = c:SYR
							OR = {
								has_variable = me_syr_democracy_leader
								has_variable = rebel_character_flag
							}
						}
						citizenship_restrictions_trigger = yes
					}
				}
			}
			employer = {
				ordered_character = {
					check_range_bounds = no
					order_by = power_base
					max = 1
					limit = {
						is_minor_character = yes
						is_mercenary = no
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_variable = olympic_attendee }
						is_adult = yes
						OR = {
							employer = { gender_equality = yes }
							is_male = yes
						}
						NOT = {
							has_character_modifier = foreign_citizen
						}
						prisoner = no
						NOT = { has_trait = proud }
						NOT = { has_trait = selfish }
						NOT = { has_trait = arrogant }
						NOT = { has_trait = stubborn }
						NOT = { has_variable = pyrrhus_travelling }
						citizenship_restrictions_trigger = yes
						NAND = {
							employer = c:SYR
							OR = {
								has_variable = me_syr_democracy_leader
								has_variable = rebel_character_flag
							}
						}
					}
					save_scope_as = adopted_person
				}
			}
			employer = {
				ordered_character = {
					order_by = power_base
					check_range_bounds = no
					max = 1
					limit = {
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						is_adult = yes
						NOT = { has_variable = olympic_attendee }
						NOT = { THIS = scope:adopted_person }
						OR = {
							employer = { gender_equality = yes }
							is_male = yes
						}
						NOT = {
							has_character_modifier = foreign_citizen
						}
						prisoner = no
						NOT = { has_trait = proud }
						NOT = { has_trait = selfish }
						NOT = { has_trait = arrogant }
						NOT = { has_trait = stubborn }
						NOT = { has_variable = pyrrhus_travelling }
						citizenship_restrictions_trigger = yes
						NAND = {
							employer = c:SYR
							OR = {
								has_variable = me_syr_democracy_leader
								has_variable = rebel_character_flag
							}
						}
					}
					save_scope_as = adopted_person_2
				}
			}
		}
		else = {
			employer = {
				create_character = {
					female = no
					age = 30
					save_scope_as = adopted_person
				}
			}
		}
		if = {
			limit = {
				NOT = { exists = scope:adopted_person_2 }
			}
			employer = {
				create_character = {
					female = no
					age = 35
					save_scope_as = adopted_person_2
				}
			}
		}
	}

	option = {
		name = "family_events.4.a"
		trigger = { exists = scope:adopted_person }
		scope:adopted_person = {
			save_scope_as = target
			set_family = root.family
			add_character_modifier = {
				name = adopted_into_great_family
				duration = -1
			}
			if = { #Bastards are easier to make family members.
				limit = { is_child_of = ROOT }
				custom_tooltip = bastard_adoption_event_tooltip
			}
			else_if = { #Siblings are easier to make full family members.
				limit = { is_sibling_of = ROOT }
				custom_tooltip = sibling_adoption_event_tooltip
			}
			else_if = { #Extra Marital Relations are harder to make full family members.
				limit = {
					any_child = {
						ROOT = { is_parent_of = PREV }
					}
				}
				custom_tooltip = lover_adoption_event_tooltip
			}
			else_if = { #Friends are easier to make full family members.
				limit = { is_friend = ROOT }
				custom_tooltip = friend_adoption_event_tooltip
			}
			else = {
				custom_tooltip = adoption_explanation_event_tooltip
			}

			root.family = { add_prestige = adoption_cost_event_pay_svalue }
			save_scope_as = picked_adoption_candidate
		}
		if = {
			limit = {
				employer = { is_monarchy = yes }
			}
			employer = {
				add_legitimacy = {
					subtract = adoption_legitimacy_hit_event_svalue
				}
			}
		}
		employer = {
			trigger_event = { id = family_events.8 }
		}
	}

	option = {
		name = "family_events.4.b"
		trigger = { exists = scope:adopted_person_2 }
		scope:adopted_person_2 = {
			save_scope_as = target
			set_family = root.family
			add_character_modifier = {
				name = adopted_into_great_family
				duration = -1
			}
			if = { #Bastards are easier to make family members.
				limit = { is_child_of = ROOT }
				custom_tooltip = bastard_adoption_event_tooltip
			}
			else_if = { #Siblings are easier to make full family members.
				limit = { is_sibling_of = ROOT }
				custom_tooltip = sibling_adoption_event_tooltip
			}
			else_if = { #Extra Marital Relations are harder to make full family members.
				limit = {
					any_child = {
						ROOT = { is_parent_of = PREV }
					}
				}
				custom_tooltip = lover_adoption_event_tooltip
			}
			else_if = { #Friends are easier to make full family members.
				limit = { is_friend = ROOT }
				custom_tooltip = friend_adoption_event_tooltip
			}
			else = {
				custom_tooltip = adoption_explanation_event_tooltip
			}
			root.family = { add_prestige = adoption_cost_event_pay_svalue }
			save_scope_as = picked_adoption_candidate
		}
		if = {
			limit = {
				employer = { is_monarchy = yes }
			}
			employer = {
				add_legitimacy = {
					subtract = adoption_legitimacy_hit_event_svalue
				}
			}
		}
		employer = {
			trigger_event = { id = family_events.8 }
		}
	}

	option = {
		name = "family_events.4.c"
		custom_tooltip = family_events.4.c.tooltip
	}
}

#The X Dynasty
family_events.5 = {
	type = country_event
	title = "family_events.5.t"
	desc = "family_events.5.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:first_family_hof
	right_portrait = scope:second_family_hof
	right_portrait = scope:third_family_hof

	picture = council_country

	trigger = {
		is_monarchy = yes
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
		current_ruler = { is_minor_character = yes }
	}

	immediate = {
		hidden_effect = {
			current_ruler = {
				save_scope_as = new_dynasty_founder
			}
			ordered_family = {
				limit = { exists = head_of_family }
				order_by = prestige
				check_range_bounds = no
				max = 3
				if = {
					limit = { NOT = { exists = scope:first_family_hof } }
					head_of_family = {
						save_scope_as = first_family_hof
					}
				}
				else_if = {
					limit = { NOT = { exists = scope:second_family_hof } }
					head_of_family = {
						save_scope_as = second_family_hof
					}
				}
				else_if = {
					limit = { NOT = { exists = scope:third_family_hof } }
					head_of_family = {
						save_scope_as = third_family_hof
					}
				}
			}
			new_family_generation_effect = { FAMILY_CANDIDATE = new_dynasty_founder }
		}
	}

	option = {
		name = "family_events.5.a"
		custom_tooltip = family_events.5.a.tt
		current_ruler = {
			add_popularity = 20
			hidden_effect = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_monarchy
							duration = -1
						}
					}
				}
			}
		}
		every_family = {
			limit = {
				exists = head_of_family
				NOT = {
					any_family_member = {
						is_ruler = yes
					}
				}
			}
			head_of_family = {
				add_loyalty = loyalty_new_royal_house
			}
		}
	}
}

#Rising from Obscurity - Tribal Version
family_events.6 = {
	type = country_event
	title = "family_events.6.t"
	desc = "family_events.6.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:clan_rising

	picture = council_country

	trigger = {
		NOT = { has_variable = rising_from_obscurity_cooldown }
		has_land = yes
		war = no #Wait until peace.
		has_civil_war = no #Wait until after any ongoing civil wars.
		num_of_families < num_allowed_families
		is_tribal = yes
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
	}

	immediate = {
		set_variable = {
		    name = rising_from_obscurity_cooldown
		    days = 120
		}
		set_variable = {
		    name = rising_from_obscurity_bonuses_cooldown
		    days = 1825
		}
		hidden_effect = {
			if = {
				limit = {
					any_character = { #Checks the criteria needed for a clan chief, does not necessarily have to be the clan chief in the end but this makes sure at least one character can be clan chief.
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						is_minor_character = yes
						is_mercenary = no
						is_adult = yes
						NOT = { has_variable = olympic_attendee }
						is_governor = no
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
					}
				}
				ordered_character = {
					limit = {
						is_minor_character = yes
						is_mercenary = no
						is_adult = yes
						NOT = { has_variable = olympic_attendee }
						is_governor = no
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = clan_rising
				}
			}
			else = {
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = clan_rising
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = clan_rising
						}
					}
				}
			}
		}
	}

	option = {
		name = "family_events.6.a"
		trigger = { exists = scope:clan_rising }
		new_family_generation_effect = { FAMILY_CANDIDATE = clan_rising } #Scripted Effect that passes on the saved scope.
		if = {
			limit = {
				NOT = { has_variable = rising_from_obscurity_bonuses_cooldown }
			}
			add_stability = 10
			add_centralization = -5
		}
		hidden_effect = {
			scope:clan_rising = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_monarchy
							duration = -1
						}
						set_home_country = ROOT
					}
				}
			}
		}
	}

	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown
		}
	}
}

#Fall from Grace - Tribal Edition
family_events.7 = {
	type = country_event
	title = "family_events.7.t"
	desc = "family_events.7.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:fallen_head

	picture = council_country

	trigger = {
		NOT = { has_variable = rising_from_obscurity_cooldown }
		has_land = yes
		war = no #Wait until peace.
		is_tribal = yes
		has_civil_war = no #Wait until after any ongoing civil wars.
		num_of_families > num_allowed_families
		any_family = {
			NOT = {
				any_family_member = {
					is_clan_chief = yes
					is_ruler = yes
				}
			}
		}
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
	}

	immediate = {
		set_variable = {
		    name = rising_from_obscurity_cooldown
		    days = 120
		}
		hidden_effect = {
			if = {
				limit = {
					any_family = {
						NOT = {
							any_family_member = {
								is_clan_chief = yes
							}
						}
						exists = head_of_family
						head_of_family = {
							is_alive = yes
						}
					}
				}
				random_family = {
					limit = {
						NOT = {
							any_family_member = {
								is_clan_chief = yes
							}
						}
						exists = head_of_family
						head_of_family = {
							is_alive = yes
						}
					}
					save_scope_as = fallen_family
					head_of_family = {
						save_scope_as = fallen_head
					}
				}
			}
			else = {
				ordered_family = {
					limit = {
						NOT = { any_family_member = { is_ruler = yes } }
					}
					order_by = prestige
					position = end
					save_scope_as = fallen_family
					head_of_family = {
						save_scope_as = fallen_head
					}
				}
			}
			scope:fallen_family = {
				every_family_member = {
					set_as_minor_character = THIS
					add_triggered_character_modifier = {
						name = was_once_great
						duration = -1
					}
				}
				remove_family = ROOT
			}
			random_country = {
				limit = { in_diplomatic_range = ROOT }
				save_scope_as = tribal_destination
			}
		}
	}

	option = {
		name = "family_events.7.a"
		if = {
			limit = {
				exists = scope:fallen_head
				scope:fallen_head = { is_alive = yes } #On the remote chance that we are downgrading a family with 0 members we could be looking at scope:fallen head not being saved. In this case we still want that to be the family eliminated but this part of the effect needs to be muted
			}
			scope:fallen_head = {
				remove_all_positions = yes
				move_country = scope:tribal_destination
				hidden_effect = {
					set_as_minor_character = THIS
				}
			}
			custom_tooltip = family_events.7.a.tooltip
		}
		add_stability = -5
	}

	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown
		}
	}
}


#What is in a name?
family_events.8 = {
	type = country_event
	title = "family_events.8.t"
	desc = "family_events.8.desc"

	left_portrait = root.current_ruler
	right_portrait = scope:picked_adoption_candidate

	picture = council_country

	trigger = {
		exists = scope:picked_adoption_candidate
	}

	option = {
		name = "family_events.8.a"
		if = {
			limit = {
				scope:picked_adoption_candidate = {
					OR = {
						father = employer.current_ruler
						mother = employer.current_ruler
					}
				}
			}
			scope:picked_adoption_candidate = {
				add_loyalty = loyalty_ruler_adoption
			}
		}
		scope:picked_adoption_candidate = {
			adapt_family_name = yes
		}
	}
	option = {
		name = "family_events.8.b"
		custom_tooltip = family_events.8.tt
	}
}


#Rising from Obscurity - Republican Edition
family_events.9 = {
	type = country_event
	title = "family_events.9.t"
	desc = "family_events.9.desc"

	right_portrait = scope:family_candidate_1
	right_portrait = scope:family_candidate_2
	right_portrait = scope:family_candidate_3
	left_portrait = scope:family_candidate_4

	picture = council_country

	trigger = {
		NOT = { has_variable = rising_from_obscurity_cooldown }
		has_land = yes
		war = no #Wait until peace.
		has_civil_war = no #Wait until after any ongoing civil wars.
		num_of_families < num_allowed_families
		is_republic = yes
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
	}

	immediate = {
		set_variable = {
		    name = rising_from_obscurity_cooldown
		    days = 120
		}
		hidden_effect = {
			#Candidate 1:
			if = { #First we try to get a party leader - even if ruler.
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_variable = olympic_attendee }
						is_mercenary = no
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						NOT = { has_variable = olympic_attendee }
						is_mercenary = no
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_1
				}
			}
			else_if = { #Now we pick anyone by order of power base.
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_variable = olympic_attendee }
						is_mercenary = no
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_variable = olympic_attendee }
						is_mercenary = no
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_1
				}
			}
			else = { #No adult people in the entire country? We make someone up.
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_1
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_1
						}
					}
				}
			}
			#Candidate 2, must not come from same party as candidate 1

			if = { #First we try to get a party leader - even if ruler.
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_2
				}
			}
			else_if = { #Now we pick anyone by order of power base - still not same party
				limit = {
					any_character = {
						is_adult = yes
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_2
				}
			}
			else = { #No adult people in the entire country? We make someone up.
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_2
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_2
						}
					}
				}
				scope:family_candidate_2 = { #Needs to not be same party as 1
					root = {
						random_party = {
							limit = {
								NOT = {
									this = scope:family_candidate_1.character_party
								}
							}
							save_scope_as = candidate_2_party
						}
					}
					add_party_conviction = {
						party = scope:candidate_2_party
						value = 100
					}
					#No ending else since this should have gone through all parties
				}
			}


			#Candidate 3, must not come from same party as candidate 1 or 2:

			if = { #First we try to get a party leader - even if ruler.
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
							NOT = { is_same_party_as = scope:family_candidate_2 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_party_leader = yes #Prefer Party Leaders
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
							NOT = { is_same_party_as = scope:family_candidate_2 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_3
				}
			}
			else_if = { #Now we pick anyone by order of power base - still not same party
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
							NOT = { is_same_party_as = scope:family_candidate_2 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
							NOT = { is_same_party_as = scope:family_candidate_1 }
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
							NOT = { is_same_party_as = scope:family_candidate_2 }
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_3
				}
			}
			else = { #No adult people in the entire country? We make someone up.
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_3
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_3
						}
					}
				}
				scope:family_candidate_3 = { #Needs to not be same party as 1 or 2
					root = {
						random_party = {
							limit = {
								NOR = {
									this = scope:family_candidate_1.character_party
									this = scope:family_candidate_2.character_party
								}
							}
							save_scope_as = candidate_3_party
						}
					}
					add_party_conviction = {
						party = scope:candidate_3_party
						value = 100
					}
					#No ending else since this should have gone through all parties
				}
			}


			#Candidate 4, not pushed for by the parties.

			if = { #This one is more random, and purely by power base.
				limit = {
					any_character = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_mercenary = no
						is_adult = yes
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						is_party_leader = no
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_female = no
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_3 }
							NOT = { this = scope:family_candidate_3 }
							NOT = {
								is_close_relative = scope:family_candidate_3
							}
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
				}
				ordered_character = {
					limit = {
						is_adult = yes
						is_minor_character = yes
						#NOT = { has_character_modifier = was_once_great }
						is_party_leader = no
						is_mercenary = no
						NOT = { has_variable = olympic_attendee }
						NOT = { has_character_modifier = foreign_citizen }
						prisoner = no
						trigger_if = {
							limit = { exists = scope:family_candidate_1 }
							NOT = { this = scope:family_candidate_1 }
							NOT = {
								is_close_relative = scope:family_candidate_1
							}
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_2 }
							NOT = { this = scope:family_candidate_2 }
							NOT = {
								is_close_relative = scope:family_candidate_2
							}
						}
						trigger_if = {
							limit = { exists = scope:family_candidate_3 }
							NOT = { this = scope:family_candidate_3 }
							NOT = {
								is_close_relative = scope:family_candidate_3
							}
						}
						trigger_if = {
							limit = { employer = { gender_equality = no } }
							is_male = yes
						}
						citizenship_restrictions_trigger = yes
					}
					check_range_bounds = no
					order_by = power_base
					save_scope_as = family_candidate_4
				}
			}
			else = { #No remaining adult people in the entire country? We make someone up.
				switch = {
					trigger = gender_equality
					yes = {
						create_character = {
							age = 30
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_4
						}
					}
					no = {
						create_character = {
							age = 30
							female = no
							culture = root.culture
							religion = root.religion
							save_scope_as = family_candidate_4
						}
					}
				}
			}
		}
	}

	option = {
		name = "family_events.9.a"
		trigger = {
			exists = scope:family_candidate_1
			scope:family_candidate_1 = {
				is_alive = yes
			}
		}
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_1 } #Scripted Effect that passes on the saved scope.
		scope:family_candidate_1 = {
			hidden_effect = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_republic
							duration = -1
						}
					}
				}
			}
		}
		add_party_approval = {
			party = scope:family_candidate_1.character_party
			value = party_approval_large
		}
	}
	option = {
		name = "family_events.9.b"
		trigger = {
			exists = scope:family_candidate_2
			scope:family_candidate_2 = {
				is_alive = yes
			}
		}
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_2 } #Scripted Effect that passes on the saved scope.
		scope:family_candidate_2 = {
			hidden_effect = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_republic
							duration = -1
						}
					}
				}
			}
		}
		add_party_approval = {
			party = scope:family_candidate_2.character_party
			value = party_approval_large
		}
	}
	option = {
		name = "family_events.9.c"
		trigger = {
			exists = scope:family_candidate_3
			scope:family_candidate_3 = {
				is_alive = yes
			}
		}
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_3 } #Scripted Effect that passes on the saved scope.
		scope:family_candidate_3 = {
			hidden_effect = {
				family = {
					every_family_member = {
						add_character_modifier = {
							name = rising_family_republic
							duration = -1
						}
					}
				}
			}
		}
		add_party_approval = {
			party = scope:family_candidate_3.character_party
			value = party_approval_large
		}
	}
	option = {
		name = "family_events.9.d"
		trigger = {
			exists = scope:family_candidate_4
			scope:family_candidate_4 = {
				is_alive = yes
			}
		}
		new_family_generation_effect = { FAMILY_CANDIDATE = family_candidate_4 } #Scripted Effect that passes on the saved scope.
		custom_tooltip = family_events.9.d.tt
		scope:family_candidate_4 = { #First generation are very loyal
			add_character_modifier = {
				name = self_made_man_family
				duration = -1
			}
			hidden_effect = {
				family = {
					every_family_member = {
						add_loyalty = self_made_man_family
						add_character_modifier = {
							name = self_made_man_family
							duration = -1
						}
					}
				}
			}
		}
		if = {
			limit = {
				exists = scope:family_candidate_1
				scope:family_candidate_1 = {
					is_alive = yes
				}
			}
			scope:family_candidate_1 = {
				character_party = {
					party_leader = { add_loyalty = loyalty_ignored_endorsement }
				}
			}
		}
		if = {
			limit = {
				exists = scope:family_candidate_2
				scope:family_candidate_2 = {
					is_alive = yes
				}
			}
			scope:family_candidate_2 = {
				character_party = {
					party_leader = { add_loyalty = loyalty_ignored_endorsement }
				}
			}
		}
		if = {
			limit = {
				exists = scope:family_candidate_3
				scope:family_candidate_3 = {
					is_alive = yes
				}
			}
			scope:family_candidate_3 = {
				character_party = {
					party_leader = { add_loyalty = loyalty_ignored_endorsement }
				}
			}
		}
	}

	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown
		}
	}
}

#Great Servant of the Republic
family_events.10 = {
	type = country_event
	title = "family_events.10.t"
	desc = "family_events.10.desc"

	left_portrait = scope:servant_of_the_republic
	right_portrait = scope:scorned_family_head
	right_portrait = scope:second_disgraced_family_head

	picture = council_country

	trigger = {
		is_republic = yes
		has_land = yes
		NOT = { has_variable = rising_from_obscurity_cooldown }
		NOT = { has_variable = meritocratic_family_birth }
		num_of_families = num_allowed_families #Should not happen when you are in the middle of changing your families anyway.
		war = no #Wait until peace.
		has_civil_war = no #Wait until after any ongoing civil wars.
		NOT = { tag = PIR }
		NOT = { tag = REB }
		NOT = { tag = MER }
		NOT = { tag = BAR }
		any_character = {
			is_minor_character = yes
			#NOT = { has_character_modifier = was_once_great }
			is_adult = yes
			NOT = { has_variable = olympic_attendee }
			prisoner = no
			OR = {
				character_experience >= 80
				AND = {
					popularity >= 90
					power_base >= 40
				}
			}
			NOT = { has_variable = not_my_servant }

			citizenship_restrictions_trigger = yes
		}
	}

	immediate = {
		set_variable = {
		    name = meritocratic_family_birth
		    days = 3650
		}
		set_variable = {
		    name = rising_from_obscurity_cooldown #Because this should also prevent other similar events from triggering.
		    days = 120
		}
		hidden_effect = {
			random_character = {
				limit = {
					is_minor_character = yes
					#NOT = { has_character_modifier = was_once_great }
					is_adult = yes
					NOT = { has_variable = olympic_attendee }
					prisoner = no
					OR = {
						character_experience >= 80
						popularity >= 90
					}
					NOT = { has_variable = not_my_servant }
					citizenship_restrictions_trigger = yes
				}
				save_scope_as = servant_of_the_republic
			}
			random_family = {
				limit = {
					NOT = { any_family_member = { is_ruler = yes } }
					is_scorned = yes
				}
				save_scope_as = scorned_family
				head_of_family = { save_scope_as = scorned_family_head }
			}
			if = {
				limit = { NOT = { exists = scope:scorned_family } }
				ordered_family = {
					limit = {
						NOT = { any_family_member = { is_ruler = yes } }
					}
					order_by = least_prestige_svalue
					position = 1
					save_scope_as = scorned_family
					head_of_family = { save_scope_as = scorned_family_head }
				}
			}
			ordered_family = {
				limit = {
					NOT = { any_family_member = { is_ruler = yes } }
					is_scorned = no
				}
				order_by = least_prestige_svalue
				position = 0
				save_scope_as = second_disgraced_family
				head_of_family = { save_scope_as = second_disgraced_family_head }
			}
		}
	}

	option = {
		name = "family_events.10.a"
		new_family_generation_effect = { FAMILY_CANDIDATE = servant_of_the_republic } #Scripted Effect that passes on the saved scope.
		scope:scorned_family = {
			hidden_effect = {
				every_family_member = {
					set_as_minor_character = THIS
					add_loyalty = loyalty_family_replaced_by_upstart
					add_triggered_character_modifier = {
						name = was_once_great
						duration = -1
					}
				}
			}
			remove_family = ROOT
		}
	}
	option = {
		name = "family_events.10.b"
		new_family_generation_effect = { FAMILY_CANDIDATE = servant_of_the_republic } #Scripted Effect that passes on the saved scope.
		scope:second_disgraced_family = {
			hidden_effect = {
				every_family_member = {
					set_as_minor_character = THIS
					add_triggered_character_modifier = {
						name = was_once_great
						duration = -1
					}
					add_loyalty = loyalty_family_replaced_by_upstart
				}
			}
			remove_family = ROOT
		}
	}
	option = {
		name = "family_events.10.c"
		scope:servant_of_the_republic = {
			add_loyalty = loyalty_service_unappreciated
			set_variable = not_my_servant
		}
	}

	after = {
		hidden_effect = {
			remove_variable = rising_from_obscurity_cooldown #The shared cooldown is removed but not the event specific one.
		}
	}
}
