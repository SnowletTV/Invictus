namespace = scheme
# Each scheme requires the scope scheme_target to be set in the immediate, prior to adding the scheme.
# Scheme title and description are associated with the ID, and stored in custom localization
#

scheme.1 = {
	type = minor_character_event
	title = "scheme.1.t"
	desc = "scheme.1.desc"
	
	picture = dagger_behind_back
	
	left_portrait = scope:thief
	
	interface_lock = no
	
	trigger = {
		is_alive = yes
	}
	
	option = {
		name = "scheme.1.a"
		trigger = {
			NOT = {
				has_trait = lunatic
			}
		}
		add_gold = -200
		scope:thief = {
			add_gold = 200
		}
	}
	
	option = {
		name = "scheme.1.b"
		custom_tooltip = "high_martial_character_tt"
		trigger = {
			martial >= 10
			NOT = {
				has_trait = lunatic
			}
		}
		highlight = yes
		add_gold = -200
		scope:thief = {
			add_gold = 200
			if = {
				limit = {
					health >= 10
				}
				add_health = -10
			}
			else = {
				death = {
					death_reason = death_while_stealing
				}
			}
		}
	}
	
	option = {
		name = "scheme.1.c"
		custom_tooltip = "lunatic_bad_tooltip"
		trigger = {
			has_trait = lunatic
		}
		exclusive = yes
		highlight = yes
		add_gold = -400
		scope:thief = {
			add_gold = 400
		}
	}
	
}

scheme.2 = {
	type = minor_character_event
	title = "scheme.2.t"
	desc = "scheme.2.desc"
	
	picture = dagger_behind_back
	
	left_portrait = scope:thief
	
	interface_lock = no
	
	option = {
		name = "scheme.2.a"
		scope:thief = {
			if = {
				limit = {
					health >= 20
				}
				add_health = -20
			}
			else = {
				death = {
					death_reason = death_while_stealing
				}
			}
		}
	}
	
}

scheme.3 = {
	type = character_event
	hidden = yes
	
	trigger = {
		is_ruler = no
		has_ambition = ambition_content_in_life
		OR = {
			title_importance_svalue > 1.25
			power_base >= 1
			is_head_of_family = yes
		}
	}
	
	immediate = {
		clear_ambition_effect = yes
	}
}

scheme.4 = {
	type = minor_character_event
	title = "scheme.4.t"
	desc = "scheme.4.desc"
	
	picture = city_country
	
	left_portrait = root
	right_portrait = scope:thief
	
	interface_lock = no
	
	immediate = {
		random_holdings = {
			limit = {
				NOT = { has_province_modifier = family_estate_modifier }
				NOT = { has_province_modifier = family_estates_being_expanded_modifier }
			}
			save_scope_as = holding_prov
		}
	}
	
	option = {
		name = "scheme.4.a"
		trigger = { exists = scope:holding_prov }
		remove_holding = scope:holding_prov
		scope:thief = {
			add_holding = scope:holding_prov
		}
	}
	
	option = {
		name = "scheme.4.b"
		trigger = {
			OR = {
				is_ruler = yes
				NOT = { exists = scope:holding_prov }
			}
		}
		scope:thief = {
			add_gold = {
				value = root.employer.has_monthly_income
				multiply = 2
			}
		}
		employer = {
			add_treasury = {
				value = root.employer.has_monthly_income
				multiply = -2
			}
		}
	}
	
	option = {
		name = "scheme.4.c"
		custom_tooltip = "lunatic_tooltip"
		trigger = {
			is_ruler = yes
			has_trait = lunatic
			exists = scope:holding_prov
		}
		highlight = yes
		custom_tooltip = gladiatorial_combat_scheme
		scope:thief = {
			save_scope_as = target
		}
		save_scope_as = recipient
		employer = {
			trigger_event = {
				id = gladiator.1
			}
		}
	}
	
}

scheme.5 = {
	type = minor_character_event
	title = "scheme.5.t"
	desc = "scheme.5.desc"
	
	picture = city_country
	
	left_portrait = scope:thief
	
	interface_lock = no
	
	trigger = {
		is_alive = yes
	}
	
	option = {
		name = "scheme.5.a"
		scope:thief = {
			add_gold = -50
		}
		if = {
			limit = {
				is_ruler = no
			}
			add_gold = 50
		}
		else = {
			employer = {
				add_treasury = 50
			}
		}
	}
	
	option = {
		name = "scheme.5.b"
		trigger = {
			is_ruler = yes
		}
		employer = {
			if = {
				limit = {
					is_monarchy = yes
					legitimacy < 100
				}
				add_legitimacy = 5
			}
			else = {
				add_stability = 5
			}
		}
	}
	
	option = {
		name = "scheme.5.c"
		custom_tooltip = "kindly_tooltip"
		trigger = {
			is_ruler = yes
			has_trait = kindly
		}
		highlight = yes
		scope:thief = {
			add_loyalty = loyalty_thief_forgiven
		}
	}
}

scheme.6 = {
	type = character_event
	title = "scheme.6.t"
	desc = "scheme.6.desc"
	
	picture = senator_conversing
	
	left_portrait = root
	right_portrait = scope:patronage_requester
	
	trigger = {
		scope:patronage_requester = { is_adult = yes }
	}
	
	option = {
		name = "scheme.6.a"
		add_popularity = popularity_medium
		scope:patronage_requester = {
			add_character_modifier = {
				name = patronage_cmod
				duration = 3650
			}
		}
		if = {
			limit = {
				is_ruler = yes
			}
			scope:patronage_requester = {
				add_finesse = 1
			}
		}
	}
	
	option = {
		name = "scheme.6.b"
		if = {
			limit = {
				is_ruler = yes
			}
			scope:patronage_requester = {
				add_loyalty = loyalty_refused_patronage
			}
			if = {
				limit = {
					finesse <= 8
				}
				custom_tooltip = stunning_puns_tt
				add_finesse = 1
			}
		}
	}
	
}


scheme.7 = {												# Demand Office - Lofty Notions I
	type = character_event
	hidden = yes
	
	immediate = {
		save_scope_as = demand_office_event_scope
		set_variable = {
			name = demanded_an_office
			days = 7300 # 20 years
		}
		employer = {
			trigger_event = {
				id = scheme.8
			}
		}
	}
}


scheme.8 = {												# Demand Office - Lofty Notions II
	type = country_event
	title = "scheme.8.t"
	desc = {
		first_valid = {
			triggered_desc = { # No office holder exists
				trigger = {
					NOT = {
						exists = scope:demand_office_old_officer_scope
					}
				}
				desc = "scheme.8.desc_1"
			}
			triggered_desc = { # Office holder exists
				trigger = {
					always = yes
				}
				desc = "scheme.8.desc_2"
			}
		}
	}
	picture = council_country
	
	left_portrait = current_ruler
	right_portrait = scope:demand_office_event_scope
	right_portrait = scope:demand_office_old_officer_scope
	
	trigger = {
		has_land = yes
		exists = scope:demand_office_event_scope
		scope:demand_office_event_scope = {
			is_alive = yes
			prisoner = no
			employer = root
		}
		NOT = { has_variable = scheme_8_cooldown }
	}
	
	immediate = {
		set_variable = {
			name = scheme_8_cooldown
			days = 1825 # 5 years
		}
		demand_office_skill_effect = yes # Picks which office schemer wants based on their best skill
		demand_office_master_scope_effect = yes # Sets scope of disputed office's current holder (if they exist)
	}
	
	option = {												# Give office freely
		name = "scheme.8.a"
		trigger = {
			NOT = {
				current_ruler = { is_friend = scope:demand_office_event_scope }
			}
		}
		scope:demand_office_event_scope = { 
			add_loyalty = loyalty_office_granted
		}
		demand_office_transfer_effect = yes
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_removed_office }
		}
		else = {
			current_ruler = { add_popularity = subtract_popularity_medium }
		}
		demand_office_skill_tooltip_effect = yes
	}
	
	option = { 											# Friend give office
		name = "scheme.8.b"
		highlight = yes
		trigger = {
			current_ruler = { is_friend = scope:demand_office_event_scope }
		}
		scope:demand_office_event_scope = { 
			add_loyalty = loyalty_office_granted
		}
		demand_office_transfer_effect = yes
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_removed_office }
		}
		else = {
			current_ruler = { add_popularity = subtract_popularity_large }
		}
		current_ruler = {
			add_corruption = corruption_medium
		}
		custom_tooltip = scheme.8.bt
	}
	
	option = {											# Give office for bribe
		name = "scheme.8.c"
		highlight = yes
		trigger = {
			current_ruler = {
				char_is_bad_leader_trigger = yes
			}
			scope:demand_office_event_scope = {
				wealth >= 100
			}
		}
		demand_office_transfer_effect = yes
		scope:demand_office_event_scope = {
			add_gold = {
				subtract = wealth
				divide = 4
			}
			add_corruption = corruption_medium
		}
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_removed_office }
		}
		else = {
			current_ruler = { add_popularity = subtract_popularity_large }
		}
		current_ruler = {
			add_gold = {
				add = scope:demand_office_event_scope.wealth
				divide = 8
			}
			add_corruption = corruption_large
		}
		add_treasury = {
			add = scope:demand_office_event_scope.wealth
			divide = 8
		}
		custom_tooltip = scheme.8.ct
	}
	
	option = { 												# Dissuade
		name = "scheme.8.d" 
		highlight = yes
		trigger = {
			current_ruler = {
				OR = {
					char_is_demagogue_trigger = yes
					charisma >= 7
				}
			}
		}
		scope:demand_office_event_scope = {
			clear_ambition_effect = yes
			add_prominence = subtract_prominence_large
			hidden_effect = {
				random = {
					chance = 25
					if = {
						limit = {
							NOT = {
								has_trait = depressed
							}
						}
						add_trait = depressed
					}
				}
			}
		}
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_defended_office }
		}
		else = {
			current_ruler = { add_popularity = popularity_small }
		}
		custom_tooltip = scheme.8.dt
	}
	
	option = { 												# Refuse
		name = "scheme.8.e"
		trigger = {
			current_ruler = {
				NOR = {
					char_is_demagogue_trigger = yes
					charisma >= 8
				}
				NAND = {
					char_is_rude_trigger = yes
					NOR = {
						is_friend = scope:demand_office_event_scope
						is_rival = scope:demand_office_event_scope
					}
				}
			}
		}
		scope:demand_office_event_scope = {
			add_loyalty = loyalty_refused_office
			add_prominence = subtract_prominence_large
		}
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_defended_office }
		}
		else = {
			current_ruler = { add_popularity = popularity_small }
		}
	}
	
	option = { 												# Antagonize
		name = "scheme.8.f"
		highlight = yes
		trigger = { 
			current_ruler = {
				char_is_rude_trigger = yes
				NOR = {
					is_friend = scope:demand_office_event_scope
					is_rival = scope:demand_office_event_scope
				}
			}
		}
		scope:demand_office_event_scope = {	
			add_loyalty = loyalty_refused_office
			add_prominence = subtract_prominence_large
			add_rival = root.current_ruler
		}
		if = {
			limit = { exists = scope:demand_office_old_officer_scope }
			scope:demand_office_old_officer_scope = { add_loyalty = loyalty_defended_office }
		}
		custom_tooltip = scheme.8.ft
	}
	
}

scheme.9 = {
	type = minor_country_event
	title = "scheme.9.t"
	desc = "scheme.9.desc"
	
	left_portrait = scope:murderer
	
	picture = trial_govtype
	
	interface_lock = no
	
	option = {
		name = "scheme.9.a" 
		current_ruler = {
			add_popularity = -5
		}
	}
	option = {
		name = "scheme.9.b"
		current_ruler = {
			add_popularity = 5
		}
		scope:murderer = {
			add_loyalty = loyalty_murder_guilt
		}
	}
}

scheme.10 = {
	type = minor_country_event
	title = "scheme.10.t"
	desc = "scheme.10.desc"
	left_portrait = scope:failed_murderer
	
	picture = trial_govtype
	
	interface_lock = no
	
	option = {
		name = "scheme.10.a"
		scope:failed_murderer = {
			add_loyalty = loyalty_murder_dismissed
		}
		scope:ongoing_scheme_target = {
			add_loyalty = loyalty_murder_dismissed_victim
			if = {
				limit = {
					is_minor_character = no
					is_head_of_family = no
				}
				family.head_of_family = {
					if = {
						limit = {
							is_ruler = no
						}
						add_loyalty = loyalty_murder_dismissed_victim
					}
				}
			}
			else_if = {
				limit = {
					is_minor_character = no
					is_head_of_family = yes
				}
				family = {
					every_family_member = {
						limit = { 
							NOT = { this = scope:failed_murderer } 
							is_ruler = no
						}
						custom = all_members_tt
						add_loyalty = loyalty_murder_dismissed_victim
					}
				}
			}
		}
	}
	
	option = {
		name = "scheme.10.b"
		imprison = {
			target = scope:failed_murderer
		}
		scope:failed_murderer = {
			add_loyalty = loyalty_murder_guilt
			if = {
				limit = {
					is_minor_character = no
					is_head_of_family = no
				}
				family.head_of_family = {
					if = {
						limit = {
							is_ruler = no
						}
						add_loyalty = loyalty_murder_guilt
					}
				}
			}
			else_if = {
				limit = {
					is_minor_character = no
					is_head_of_family = yes
				}
				family = {
					every_family_member = {
						limit = {
							NOT = { this = scope:failed_murderer }
							is_ruler = no
						}
						custom = all_members_tt
						add_loyalty = loyalty_murder_guilt
					}
				}
			}
		}
		scope:ongoing_scheme_target = {
			add_loyalty = loyalty_murder_guilt_victim
		}
	}
}

scheme.11 = {
	type = character_event
	title = "scheme.11.t"
	desc = "scheme.11.desc"
	
	left_portrait = root
	right_portrait = scope:ancestor
	
	picture = great_library
	
	immediate = {
		if = {
			limit = {
				exists = father.father.father
			}
			father.father.father = {
				save_scope_as = ancestor
			}
		}
		else_if = {
			limit = {
				exists = father.father
			}
			father.father = {
				save_scope_as = ancestor
			}
		}
		else_if = {
			limit = {
				exists = father
			}
			father = {
				save_scope_as = ancestor
			}
		}
		else = {
			save_scope_as = ancestor
		}
		hidden_effect = {
			if = {
				limit = {
					has_culture_group = hellenic
				}
				random_list = {
					1 = {
						add_bloodline_effect = { BLOODLINE = alcimachid }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = antigonids }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = antipatrid }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = lagids }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = seleucids }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = argeads }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = agiad }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = aeacidae }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = agathocles }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = sophytid }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = diodotus }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = spartocid }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = demosthenid }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = blood_of_david }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = magas }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = agiad }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = blood_of_zipoetes }
					}
#					1 = {
#						add_bloodline_effect = { BLOODLINE = eurypontid }
#					}
#					1 = {
#						add_bloodline_effect = { BLOODLINE = blood_of_teres }
#					}
				}
			}
			if = {
				limit = {
					OR = {
						has_culture_group = aryan
						has_culture_group = indian
						has_culture_group = pracyan
					}
				}
				random_list = {
					1 = {
						add_bloodline_effect = { BLOODLINE = maurya }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = blood_of_porus }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = blood_of_bharata }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = kalinga }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = chera }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = pandya }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = chola }
					}
					1 = {
						add_bloodline_effect = { BLOODLINE = blood_of_vijaya }
					}
				}
			}			
		}
	}
	
	option = {
		name = "scheme.11.a"
		employer = {
			add_legitimacy = 10
		}
		if = {
            limit = {
                num_of_children > 0
                any_child = {
                    is_alive = yes
                }
            }
            custom_tooltip = "gained_diadochi_bloodline_trait_children"
        }
        else = { custom_tooltip = "gained_diadochi_bloodline_trait" }
	}
}

scheme.12 = {
	type = minor_country_event
	title = "scheme.12.t"
	desc = "scheme.12.desc"
	
	picture = revolt
	
	left_portrait = scope:ongoing_scheme_target
	
	interface_lock = no
	
	immediate = {
		random_country = {
			limit = {
				NOT = {
					this = root
				}
			}
			weight = {
				modifier = {
					factor = 20
					in_diplomatic_range = root
				}
			}
			save_scope_as = escape_target
		}
		random_country_state = {
			save_scope_as = target_state
		}
		save_scope_as = origin_country
		scope:ongoing_scheme_target = {
			remove_all_positions = yes
			move_country = scope:escape_target
			set_as_minor_character = this
		}
	}
	
	option = {
		name = "scheme.12.a"
		custom_tooltip = scheme.12.at
		hidden_effect = {
			scope:target_state = {
				every_state_province = {
					add_claim = scope:escape_target
				}
			}
			scope:escape_target = {
				trigger_event = {
					id = scheme.13
				}
			}
		}
	}
	
	option = {
		name = "scheme.12.b"
		custom_tooltip = silver_tongued_tooltip
		trigger = {
			current_ruler = {
				has_trait = silver_tongued
			}
		}
		highlight = yes
		add_stability = -5
	}
	
}

scheme.13 = {
	type = country_event
	title = "scheme.13.t"
	desc = "scheme.13.desc"
	
	picture = council_country
	
	left_portrait = current_ruler
	right_portrait = scope:ongoing_scheme_target
	
	trigger = {
		scope:ongoing_scheme_target = {
			is_alive = yes
		}
	}
	
	option = {
		name = "scheme.13.a"
		custom_tooltip = scheme.12.at
		scope:ongoing_scheme_target = {
			if = {
				limit = {
					has_character_modifier = foreign_citizen
				}
				remove_character_modifier = foreign_citizen
			}
		}
	}
	
	option = {
		name = "scheme.13.b"
		current_ruler = {
			add_popularity = 5
		}
	}
	
}

scheme.14 = { #success
	type = country_event
	title = "scheme.14.t"
	desc = "scheme.14.desc"
	
	left_portrait = scope:assassinator
	right_portrait = scope:assassinatee
	
	picture = dagger_behind_back
	
	trigger = {
		exists = scope:assassinatee
		scope:assassinatee = {
			is_alive = yes
		}
	}
	
	immediate = {
		scope:assassinator = {
			save_scope_as = murderer
		}
	}
	
	option = {
		name = "scheme.14.a"
		scope:assassinatee = {
			death = {
				death_reason = death_internal_assassination
				killer = scope:assassinator
			}
		}
		scope:assassinator = {
			if = {
				limit = {
					has_variable = number_of_murders
				}
				change_variable = {
					name = number_of_murders
					add = 1
				}
			}
			else = {
				set_variable = {
					name = number_of_murders
					value = 1
				}
			}
		}
	}
	
}

scheme.15 = { #failure    
	type = country_event
	title = "scheme.15.t"
	desc = "scheme.15.desc"
	
	left_portrait = scope:assassinator
	right_portrait = scope:assassinatee
	
	picture = greek_court
	
	trigger = {
		exists = scope:assassinatee
		scope:assassinatee = {
			is_alive = yes
		}
	}
	
	option = {
		name = "scheme.15.a"
		scope:assassinator = {
			if = {
				limit = {
					health > 10
				}
				add_health = -10
			}
			else = {
				death = {
					death_reason = death_stabbing
				}
			}
		}
	}
	
}

scheme.16 = {
	type = minor_country_event
	title = "scheme.16.t"
	desc = {
		first_valid = {
			triggered_desc = {
				desc = scheme.16.desc_1
				trigger = { scope:target.var:notable_recruit = 1 }
			}
			triggered_desc = {
				desc = scheme.16.desc_2
				trigger = { scope:target.var:notable_recruit = 2 }
			}
			triggered_desc = {
				desc = scheme.16.desc_3
				trigger = { scope:target.var:notable_recruit = 3 }
			}
			triggered_desc = {
				desc = scheme.16.desc_4
				trigger = { scope:target.var:notable_recruit = 4 }
			}
			triggered_desc = {
				desc = scheme.16.desc_5
				trigger = { always = yes }
			}
		}
		desc = scheme.16.desc
	}
	picture = senator_conversing
	left_portrait = scope:target
	
	interface_lock = no
	
	option = {
		name = "scheme.16.a"
		show_as_tooltip = {
			add_opinion = { modifier = recruited_character target = scope:actor }
			scope:target = {
				move_country = scope:actor
				if = {
					limit = {
						is_married = yes
						spouse.employer = scope:actor
					}
					spouse = { move_country = scope:actor }
				}
				if = {
					limit = {
						num_of_children > 0
						any_child = {
							is_alive = yes
							employer = scope:actor
						}
					}
					every_child = {
						limit = {
							is_alive = yes
							employer = scope:actor
						}
						move_country = scope:actor
					}
				}
			}
		}
		scope:target = { remove_variable = notable_recruit }
	}
}

scheme.17 = {
	type = minor_country_event
	title = "scheme.17.t"
	desc = "scheme.17.desc"
	
	left_portrait = scope:this_guy

	interface_lock = no
	
	immediate = {
		
	}
	
	option = {
		name = "scheme.17.a"
		show_as_tooltip = {
			add_country_modifier = {
				name = grand_religious_festival
				duration = 730
			}
		}
	}
	
}



scheme.18 = { #An offer of Marriage
	type = character_event
	title = "scheme.18.t"
	desc = "scheme.18.desc"
	
	left_portrait = scope:courting_hof
	left_portrait = scope:ongoing_scheme_target
	right_portrait = scope:new_cousin
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
			is_married = no
		}
	}
	
	immediate = {
		scope:courting_hof = { family = { save_scope_as = courting_family } }
		switch = {
			trigger = is_male
			yes = {
				random_list = {
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 25
								female = yes
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 22
								female = yes
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 20
								female = yes
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 17
								female = yes
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
				}
			}
			no = {
				random_list = {
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 25
								female = no
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 22
								female = no
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 20
								female = no
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
					25 = {
						scope:courting_hof.employer = {
							create_character = {
								age = 17
								female = no
								culture = scope:courting_hof.culture
								religion = scope:courting_hof.religion
								family = scope:courting_family
								save_scope_as = new_cousin
							}
						}
					}
				}
			}
		}
	}
	
	option = { 
		name = "scheme.18.a"
		ai_chance = {
			factor = 100
		}
		hidden_effect = {
			if = {	
				limit = {
					scope:new_cousin = {
						is_married = yes
					}
				}
				scope:new_cousin = {
					divorce_character = spouse
				}
			}
			if = {	
				limit = {
					scope:ongoing_scheme_target = {
						is_married = yes
					}
				}
				scope:ongoing_scheme_target = {
					divorce_character = spouse
				}
			}
		}
		scope:ongoing_scheme_target = {
			marry_character = scope:new_cousin
		}
		scope:courting_family = { add_prestige = 50 }
		scope:courting_hof = {
			add_loyalty = royal_marriage
			hidden_effect = {
				family = {
					every_family_member = {
						limit = {
							NOT = { has_loyalty = royal_marriage }
							NOT = { has_loyalty = royal_marriage_members }
						}
						add_loyalty = royal_marriage_members
					}
				}
			}
		}
		employer = { 
			every_family = {
				limit = {
					NOT = { THIS = scope:courting_family }
					NOT = { THIS = scope:ongoing_scheme_target.family }
				}
				head_of_family = {
					add_loyalty = spurned_family
				}
				hidden_effect = {
					every_family_member = {
						limit = {
							NOT = { has_loyalty = spurned_family }
							NOT = { has_loyalty = spurned_family_members }
						}
						add_loyalty = spurned_family_members
					}
				}
			}
		}
	}
	option = {
		name = "scheme.18.b" #Refusing only blocks future offers from this family.
		ai_chance = {
			factor = 0
		}
		scope:courting_hof = {
			add_loyalty = spurned_family
			scope:courting_hof.family = { add_prestige = -25 }
			hidden_effect = {
				family = {
					every_family_member = {
						limit = {
							NOT = { has_loyalty = spurned_family }
							NOT = { has_loyalty = spurned_family_members }
						}
						add_loyalty = spurned_family_members
					}
				}
			}
		}
		hidden_effect = {
			scope:new_cousin = {
				death = {
					death_reason = death_obscurity
				}
			}
			scope:courting_hof = {
				set_variable = {
					name = ruler_refused
					days = 4380 #Won't try again in 12 years
				}
			}
		}
	}
}


scheme.19 = { #Ruler already Married
	type = character_event
	title = "scheme.19.t"
	desc = "scheme.19.desc"
	
	left_portrait = scope:courting_hof
	left_portrait = scope:ongoing_scheme_target
	left_portrait = scope:rulers_spouse
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
			is_married = yes
		}
	}
	
	immediate = {
		scope:courting_hof = { family = { save_scope_as = courting_family } }
		scope:ongoing_scheme_target = { spouse = { save_scope_as = rulers_spouse } }
	}
	
	option = { 
		name = "scheme.19.a"
		add_gold = 80 #Refunds a bit of the cash
	}
}

scheme.20 = { #Proposal Refused
	type = character_event
	title = "scheme.20.t"
	desc = "scheme.20.desc"
	
	left_portrait = root
	left_portrait = scope:ongoing_scheme_target
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
		}
	}

	option = { 
		name = "scheme.20.a"
		add_character_modifier = {
			name = "proposal_refused"
			duration = 365
		}
		random_list = {
			10 = {
				if = {
					limit = {
						NOT = {
							has_trait = depressed
						}
					}
					add_trait = depressed
				}
			}
			90 = {  }
		}
	}
}

scheme.21 = {
	#Positive or semi-positive reply to ruler - Based on Normal Marriage Proposed
	type = character_event
	title = "scheme.21.t"
	desc = {
		random_valid = {
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = "random_marriage_proposal_1"
			}
			triggered_desc = {
				trigger = {
					always = yes
				}
				desc = "random_marriage_proposal_2"
			}
			triggered_desc = {
				trigger = {
					always = yes
				} 
				desc = "random_marriage_proposal_3"
			}
		}
		random_valid = { 
			### HOF disapproves block
			triggered_desc = { 
				trigger = {
					hof_disapproves_loyalty = yes                     
				} 
				desc = "hof_disapproves_loyalty_desc"  
			}
			triggered_desc = {  
				trigger = {
					hof_disapproves_age = yes
				}
				desc = "hof_disapproves_age_desc"
			}
			### SELF disapproves block
			triggered_desc = {
				trigger = {
					self_disapproves_loyalty = yes
				}
				desc = "self_disapproves_loyalty_desc"
			}
			triggered_desc = {
				trigger = {
					self_disapproves_age = yes
				}
				desc = "self_disapproves_age_desc"
			}
			### HOF approves block
			triggered_desc = {
				trigger = {
					hof_approves = yes                               
				}
				desc = "hof_approves_desc"
			}
			### SELF approves block
			triggered_desc = {
				trigger = {
					self_approves = yes
				}
				desc = "self_approves_desc"
			} 
		}
	}
	
	picture = greek_court
	
	left_portrait = scope:suitor
	right_portrait = scope:negotiator
	right_portrait = scope:love_target
	 
	immediate = {
		#Suitor was saved in the firing on_action
		scope:ongoing_scheme_target = {
			save_scope_as = negotiator
		}
		scope:suitor = {
			save_scope_as = spouse_seeker
			hidden_effect = {
				switch = {
					trigger = is_male
					yes = {
						employer = {
							create_character = {
								age = seek_spouse_age_window
								female = yes
								culture = scope:negotiator.culture
								religion = scope:negotiator.religion
								family = scope:negotiator.family
								save_scope_as = love_target
							}
						}
					}
					no = {
						employer = {
							create_character = {
								age = seek_spouse_age_window
								culture = scope:negotiator.culture
								religion = scope:negotiator.religion
								family = scope:negotiator.family
								save_scope_as = love_target
							}
						}
					}
				}
			}
		}
		set_variable = {
			name = suitor_age 
			value = scope:suitor.age
		} 
		set_variable = {
			name = love_target_age 
			value = scope:love_target.age
		}  
		change_variable = {
			name = love_target_age 
			add = 30
		}  
	}
	
	option = {
		name = "royal_marriage.6.a"
		trigger = {
			trigger_if = {
				limit = {
					exists = scope:negotiator
				}
				hof_approves = yes
			}
			trigger_else = {
				self_approves = yes
			}
		}
		custom_tooltip = new_wife_from_family_tt
		hidden_effect = {
			if = {	
				limit = {
					scope:love_target = {
						is_married = yes
					}
				}
				scope:love_target = {
					divorce_character = spouse
				}
			}
			if = {	
				limit = {
					scope:suitor = {
						is_married = yes
					}
				}
				scope:suitor = {
					divorce_character = spouse
				}
			}
		}
		scope:suitor = {
			marry_character = scope:love_target
		}
		scope:love_target = {
			add_loyalty = loyalty_marriage_arranged_1
		}
		if = {
			limit = {
				exists = scope:negotiator
			}
			scope:negotiator = {
				add_loyalty = loyalty_marriage_arranged_2
			}
		}
	}
	
	option = {
		name = "royal_marriage.6.b"
		custom_tooltip = new_wife_from_family_tt
		trigger = {
			trigger_if = {
				limit = {
					exists = scope:negotiator 
				}
				hof_disapproves_age = yes
				NOT = {
					hof_disapproves_loyalty = yes
				}
			}
			trigger_else = {
				self_disapproves_age = yes 
				NOT = {
					self_disapproves_loyalty = yes
				}
			}
		}
		if = {
			limit = { 
				exists = scope:negotiator
			}
			scope:negotiator = {
				add_gold = {
					value = root.employer.has_monthly_income
					multiply = 3
				}
			}
		}
		else = {
			scope:love_target = {
				add_gold = {
					value = root.employer.has_monthly_income
					multiply = 3
				}
			}
		}
		employer = {
			add_treasury = {
				value = has_monthly_income
				multiply = -3
			}
		}
		hidden_effect = {
			if = {	
				limit = {
					scope:love_target = {
						is_married = yes
					}
				}
				scope:love_target = {
					divorce_character = spouse
				}
			}
			if = {	
				limit = {
					scope:suitor = {
						is_married = yes
					}
				}
				scope:suitor = {
					divorce_character = spouse
				}
			}
		}
		scope:suitor = {
			marry_character = scope:love_target
		}
		scope:love_target = {
			add_loyalty = loyalty_marriage_arranged_1
		}
		if = {
			limit = {
				exists = scope:negotiator
				scope:suitor = { is_ruler = yes }
			}
			scope:negotiator = {
				add_loyalty = royal_marriage
				hidden_effect = {
					family = {
						every_family_member = {
							limit = {
								NOT = { has_loyalty = royal_marriage }
								NOT = { has_loyalty = royal_marriage_members }
							}
							add_loyalty = royal_marriage_members
						}
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = scope:negotiator
			}
			scope:negotiator = {
				add_loyalty = loyalty_marriage_arranged_2
			}
		}
	}
	
	option = {
		name = "royal_marriage.6.c"
		custom_tooltip = new_wife_from_family_tt
		trigger = {
			trigger_if = {
				limit = {
					exists = scope:negotiator
				}
				hof_disapproves_loyalty = yes
				NOT = {
					hof_disapproves_age = yes
				}
			}
			trigger_else = {
				self_disapproves_loyalty = yes
				NOT = {
					self_disapproves_age = yes
				}
			}
		}
		if = {
			limit = {
				exists = scope:negotiator
			}
			scope:negotiator = {
				add_gold = {
					value = root.employer.has_monthly_income
					multiply = 6
				}
			}
		}
		else = {
			scope:love_target = {
				add_gold = {
					value = root.employer.has_monthly_income
					multiply = 6
				}
			}
		}
		employer = {
			add_treasury = {
				value = has_monthly_income
				multiply = -6
			}
		}
		hidden_effect = {
			if = {	
				limit = {
					scope:love_target = {
						is_married = yes
					}
				}
				scope:love_target = {
					divorce_character = spouse
				}
			}
			if = {	
				limit = {
					scope:suitor = {
						is_married = yes
					}
				}
				scope:suitor = {
					divorce_character = spouse
				}
			}
		}
		scope:suitor = {
			marry_character = scope:love_target
		}
		scope:love_target = {
			add_loyalty = loyalty_marriage_arranged_1
		}
		if = {
			limit = {
				exists = scope:negotiator
				scope:suitor = { is_ruler = yes }
			}
			scope:negotiator = {
				add_loyalty = royal_marriage
				hidden_effect = {
					family = {
						every_family_member = {
							limit = {
								NOT = { has_loyalty = royal_marriage }
								NOT = { has_loyalty = royal_marriage_members }
							}
							add_loyalty = royal_marriage_members
						}
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = scope:negotiator
			}
			scope:negotiator = {
				add_loyalty = loyalty_marriage_arranged_2
			}
		}
	}
	
	option = {
		name = "royal_marriage.6.d"
		employer = {
			add_political_influence = subtract_influence_small
		}
		hidden_effect = {
			scope:love_target = {
				death = {
					death_reason = death_obscurity
				}
			}
		}
	}
	
}


scheme.22 = { #Proposal Refused - Ruler asked for themselves
	type = character_event
	title = "scheme.20.t"
	desc = "scheme.20.desc"
	
	left_portrait = root
	left_portrait = scope:spurned_suitor
	right_portrait = scope:ongoing_scheme_target
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
		}
	}
	
	immediate = {
		random_list = {
			5 = {
				if = {
					limit = {
						NOT = {
							has_trait = depressed
						}
					}
					add_trait = depressed
				}
			}
			95 = {  }
		}
	}

	option = {
		name = "scheme.20.a"
		scope:spurned_suitor = {
			add_character_modifier = {
				name = "proposal_refused"
				duration = 365
			}
		}
		family = {
			add_prestige = -25
		}
		employer = {
			add_political_influence = subtract_influence_small
		}
	}
}

scheme.23 = { #Proposal Refused - Ruler asked on someone elses behalf
	type = character_event
	title = "scheme.23.t"
	desc = "scheme.23.desc"
	
	left_portrait = root
	left_portrait = scope:spurned_suitor
	right_portrait = scope:ongoing_scheme_target
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
		}
	}
	
	immediate = {
		scope:spurned_suitor = {
			random_list = {
				10 = {
					if = {
						limit = {
							NOT = {
								has_trait = depressed
							}
						}
						add_trait = depressed
					}
				}
				90 = {  }
			}
		}
	}

	option = {
		name = "scheme.23.a"
		scope:spurned_suitor = {
			add_character_modifier = {
				name = "proposal_refused"
				duration = 365
			}
		}
		family = {
			add_prestige = -25
		}
		employer = {
			add_political_influence = subtract_influence_small
		}
	}
}

scheme.24 = { #Start of marriage searching
	type = character_event
	title = "scheme.24.t"
	desc = "scheme.24.desc"
	
	left_portrait = scope:ruler_head_of_family
	left_portrait = scope:would_be_suitor
	right_portrait = scope:ongoing_scheme_target
	
	picture = greek_court
	
	trigger = {
		exists = scope:ongoing_scheme_target
		is_alive = yes
		scope:ongoing_scheme_target = {
			is_alive = yes
		}
	}
	
	immediate = {
		save_scope_as = would_be_suitor
		if = {
			limit = {
				is_ruler = no
			}
			employer.current_ruler = {
				save_scope_as = ruler_head_of_family
			}
		}
	}

	option = {
		name = "scheme.24.a"
		custom_tooltip = scheme_ambition_seek_a_spouse_event_tt
	}
}