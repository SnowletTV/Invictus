types GameConfiguration
{
	type spinner = hbox {
		layoutpolicy_horizontal = expanding

		widget = {
			size = { 32 32 }

			button_minus = {
				position = { 10 2 }
				blockoverride "On_click" { block "decrease_button" {} }
			}
		}

		margin_widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			size = { 240 32 }
			margin_right = 8
			textbox	= {
				size = { 100% 28 }
				align = center
				elide = right
				using = BaseFontM
				using = Black_FontColor

				block "selected_value" {}
			}
		}
		widget = {
			size = { 32 32 }

			button_plus = {
				position = { 0 2 }
				blockoverride "On_click" { block "increase_button" {} }
			}
		}
	}
	
	type game_rule_small = hbox {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		using = tooltip_ne
		margin_top = 4
	
		button = {
			layoutpolicy_horizontal = expanding
			size = { 0 32 }
			block "rule_click" {
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).End )]"
			}
			onmousehierarchyenter = "[PdxGuiWidget.FindChild('highlight').Show]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('highlight').Hide]"
			
			hbox = {
				visible = no
				alwaystransparent = yes
				name = "highlight"
				background = {
					margin_bottom = 2
					alpha = 0.2
					shaderfile = "gfx/FX/pdxgui_default.shader"
					texture = "gfx/interface/base_parts/start_menu_button_highlight.dds"
					margin_right = 50
					margin_left = 20
				}
			}
			
			hbox = {
				widget = {
					size = { 50 32 }
					
					check_box_button = {
						position = { 8 4 }
						# Frame block
					}
				}
				
				margin_widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
					
					icon_and_text = {
						parentanchor = right
						position = { 0 0 }
						minimumsize = { 250 28 }
						using = tooltip_ne
						# Text block
						blockoverride "Icon"
						{
							visible = no
						}
					}
				}
			}
		}
	}
}

vbox = {
	name = "game_configuration_window"

	# These variables should be reset on every new lobby, otherwise it spams errors due to SGUI scope not existing etc.
	# Previously they were cleared by the lobby back button, but this doesn't cover cases where you chose a country and
	# loaded into the game, then returned to the main menu, then loaded into a new lobby, so clear them on lobby start.
	state = {
		name = _show
		on_start = "[GetVariableSystem.Clear('game_rules')]"
		on_start = "[GetVariableSystem.Clear('country_selection')]"
		trigger_on_create = yes
	}
	
	size = { 332 180 }
	max_width = 332
	position = { 0 -40 }
	parentanchor = bottom|right
	# resizable = no
	# movable = no
	enabled = "[GameConfigurationWindow.CanChangeConfiguration]"
	
	widget = {
		size = { 0 0 }
		layoutpolicy_vertical = expanding
	}
	
	vbox = {
		margin_bottom = 15
		layoutpolicy_horizontal = expanding
		
		using = MainWindowHeaderBox
		
		blockoverride "Title_text" { text = "JOMINI_MULTIPLAYER_GUI_GAME_CONFIGURATION" }
		
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = flat_background_white
			spriteType = Corneredtiled
			block "WindowAlpha" { alpha = 0.95 }
			
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/background_x60bd_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_left = 12
			margin_top = 2
			margin_right = 12
			spinner = {
				margin_top = 8
				#size = { 0 32 }
				tooltip = "[GameConfigurationWindow.GetDifficultyToolTip]"
				using = tooltip_ne

				blockoverride "decrease_button" {
					onclick = "[GameConfigurationWindow.DecreaseDifficulty]"
				}

				blockoverride "selected_value" {
					text = "[GameConfigurationWindow.GetDifficulty]"
				}

				blockoverride "increase_button" {
					onclick = "[GameConfigurationWindow.IncreaseDifficulty]"
				}
			}
			
			# Advanced AI - placeholder before choosing a country
			game_rule_small = {
				# Simply a Not() of actual checkbox conditions
				visible = "[Not(And(GetVariableSystem.Exists('country_selection'), Or(Not(GameIsMultiplayer), And(GameIsMultiplayer, PlayerIsHost))))]" 
				enabled = "[EqualTo_int32('(int32)0', '(int32)1')]"
				
				tooltip = "IRONMAN_MODE" # Replace with something like select country first
				
				blockoverride "Text" {
					text = "advanced_ai_name"
				}
			}
			
			# Advanced AI - actual checkbox
			game_rule_small = {
				# Selected country is required to set global variables
				# visible = "[LobbyView.HasSelectedPlayable]" # This seems to give true even if no country is selected
				visible = "[And(GetVariableSystem.Exists('country_selection'), Or(Not(GameIsMultiplayer), And(GameIsMultiplayer, PlayerIsHost)))]"
				
				datacontext = "[GetScriptedGui('advanced_ai')]"
				tooltip = "advanced_ai_desc"
				blockoverride "Frame" {
					frame = "[Select_int32(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), '(int32)2', '(int32)1')]"
				}
				blockoverride "rule_click" {
					onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Player.MakeScope).End)]"
				}
				blockoverride "On_click" {
					onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Player.MakeScope).End)]"
				}
				
				blockoverride "Text" {
					text = "advanced_ai_name"
				}
			}
			
			game_rule_small = {
				enabled = "[GameIsIronmanAvailable]"
				tooltip = "[GameGetIronmanToolTip]"
				blockoverride "Frame" {
					frame = "[GameConfigurationWindow.GetIronmanFrame]"
				}
				blockoverride "rule_click" { onclick = "[GameConfigurationWindow.ToggleIronman]" }
				blockoverride "On_click" { onclick = "[GameConfigurationWindow.ToggleIronman]" }
				
				blockoverride "Text"
				{
					text = "IRONMAN_MODE"
				}
			}

			widget = {
				size = { 0 20 }
			}
			text_button_square = {
				# Selected country is required to set global variables
				# enabled = "[LobbyView.HasSelectedPlayable]" # This seems to give true even if no country is selected
				enabled = "[GetVariableSystem.Exists('country_selection')]"

				size = { 120 30 }
				layoutpolicy_horizontal = expanding
				blockoverride "On_click" { onclick = "[GetVariableSystem.Toggle('game_rules')]" }
				blockoverride "Center_text" { text = "game_rules" }
				tooltip = "select_country_first"
			}
		}
	}
}
