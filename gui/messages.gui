template message_contents
{
	name = "basic_message_contents"
	
	vbox = {
		using = NoninteractableBG
		margin = { 10 10 }
		
		textbox = { #"subtitle" removed. return for additional line.
			name = "description"
			autoresize = yes
			multiline = yes
			align = center|nobaseline
			using = BaseFontS
			using = Black_FontColor
			maximumsize = { 500 560 }
		}
		# INVICTUS - added as invisible textbox to fix error
		textbox = { #"subtitle" removed. return for additional line.
			visible = no
			name = "subtitle"
			autoresize = yes
			multiline = yes
			align = center|nobaseline
			using = BaseFontS
			using = Black_FontColor
			maximumsize = { 500 560 }
		}
		#
	}
	
}

template message_buttons #TODO this is not ideal. Button types should be buttons, not widgets.
{
	hbox = { 
		margin_bottom = 16
		spacing = 10
		margin_left = 46
		margin_right = 46
		
		block "cancel_button" 
		{
			button = {
				name = "decline_button"
				shortcut = "close_window"
				using = button_tiled_texture
				spriteType = Corneredtiled
				spriteborder = { 200 200 }
				gfxtype = framedbuttongfx
				size = { 200 28 }
				using = DropShadow
				
				block "DeclineContents"
				{
					
				}
				#sounds in here
				framesize = { 200 200 }
				upframe = 1
				overframe = 2
				downframe = 3
				disableframe = 4			
				
				hbox = {			
					margin_left = 2
					margin_right = 2
					button = {
						alwaystransparent = yes

						using = button_tiled_texture
						spriteType = Corneredtiled
						spriteborder = { 200 200 }
						size = { 100 26 }
						layoutpolicy_vertical = fixed
						layoutpolicy_horizontal = expanding
						gfxtype = framedbuttongfx
						
						framesize = { 200 200 }
						upframe = 1
						overframe = 2
						downframe = 3
						disableframe = 4
						
						widget = {
							name = "Decorations"
							size = { 100% 100% }
							background = {
								spriteType = Corneredtiled
								texture = "gfx/interface/base_parts/button_lines.dds"
								shaderfile = "gfx/FX/pdxgui_default.shader"
								alpha = 0.5
								spriteborder = { 22 0 }

								modify_texture = {
									name = "Decay"
									texture = "gfx/interface/base_parts/button_lines_alpha.dds"
									blend_mode = alphamultiply
									spriteType = Corneredtiled
									alpha = 0.4
								}					
							}
							#background = {
							#	name = "side_pattern"
							#	texture = "gfx/interface/base_parts/button_dotted_pattern.dds"
							#	shaderfile = "gfx/FX/pdxgui_default.shader"
							#	spriteType = Corneredtiled
							#	spriteborder = { 22 0 }
							#}				
						}
						# Button with centered text.
						textbox = {
							name = "Text"
							position = { 0 -2 }
							using = BaseFontS
							widgetanchor = center
							parentanchor = center
							align = center
							block "cancel_title"
							{
								text = "CANCEL_BUTTON"
							}
						}
					}
				}
			}
		}
		
		block "confirm_button"
		{
			button = {
				name = "accept_button"
				shortcut = "confirm"
				using = button_tiled_texture
				spriteType = Corneredtiled
				spriteborder = { 200 200 }
				gfxtype = framedbuttongfx
				size = { 200 28 }
				using = DropShadow
				
				block "ConfirmContents"
				{
					#sounds in here
				}
				
				framesize = { 200 200 }
				upframe = 1
				overframe = 2
				downframe = 3
				disableframe = 4
				
				hbox = {		
				margin_left = 2
				margin_right = 2	
					button = {
						alwaystransparent = yes
						using = button_tiled_texture
						spriteType = Corneredtiled
						spriteborder = { 200 200 }
						size = { 100 26 }
						layoutpolicy_vertical = fixed
						layoutpolicy_horizontal = expanding
						gfxtype = framedbuttongfx
						
						framesize = { 200 200 }
						upframe = 1
						overframe = 2
						downframe = 3
						disableframe = 4

						widget = {
							name = "Decorations"
							size = { 100% 100% }
							background = {
								spriteType = Corneredtiled
								texture = "gfx/interface/base_parts/button_lines.dds"
								shaderfile = "gfx/FX/pdxgui_default.shader"
								alpha = 0.5
								spriteborder = { 22 0 }

								modify_texture = {
									name = "Decay"
									texture = "gfx/interface/base_parts/button_lines_alpha.dds"
									blend_mode = alphamultiply
									spriteType = Corneredtiled
									alpha = 0.4
								}					
							}
							background = {
								name = "side_pattern"
								texture = "gfx/interface/base_parts/button_pattern.dds"
								shaderfile = "gfx/FX/pdxgui_default.shader"
								spriteType = Corneredtiled
								spriteborder = { 22 0 }
							}				
						}
						
						# Button with centered text.
						textbox = {
							name = "Text"
							position = { 0 -2 }
							using = BaseFontS
							widgetanchor = center
							parentanchor = center
							align = center
							
							block "accept_title"
							{
								text = "OK_BUTTON"
							}
						}
					}
				}
			}
		}
	}
}

template settings_button_template
{
	block "settings_button_block"
	{
		settings_button = { #TODO this is totally hardcoded
			name = "message_settings"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
			tooltip = "MESSAGE_SETTINGS_POPUP"
			using = button_tiled_texture
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			gfxtype = framedbuttongfx
			size = { 26 26 }

			framesize = { 200 200 }
			upframe = 1 
			overframe = 2 
			downframe = 3 
			disableframe = 4 
			
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/button2_outer_x8y8bd_alpha.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 6 6 }
			}
			
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/button2_outer_x8y8bd_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 6 6 }					
			} 

			icon = {
				texture = "gfx/interface/base_parts/button_allframes.dds"
				size = { 24 24 }
				framesize = { 100 100 }
				frame = 4
				parentanchor = center
				modify_texture = {
					texture = "gfx/interface/base_parts/settings.dds"
					blend_mode = alphamultiply
				}
				
			}
			
			background = {
				name = "Base"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = flat_background_white
				spriteType = Corneredtiled
			} 
		}
	}
}

message_window = { 
	name = "basic_message_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	} 
	
	parentanchor = center
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	 
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			
			vbox = {
				using = message_contents
				
				margin_left = 16
				margin_right = 16
			}
		}
		
		hbox = {
			using = message_buttons
		}
	}

	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	} 	

}


message_window = {
	name = "character_message_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}
	
	
	parentanchor = center
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	 
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			
			
			cpt_button ={
				name = "portrait"
				size = { 70 104 }
				datacontext = "[CharMessage.GetCharacter]"
			}
			
			vbox = {
				using = message_contents
				
				margin_left = 16
				margin_right = 16
			}
			
			country_flag = {
				tooltip = "[CharMessage.GetCharacter.GetCountry.GetDescriptiveName|T]"
				datacontext = "[CharMessage.GetCharacter.GetCountry]"
				
				datacontext = "[CharMessage.GetCharacter.GetCountry]"
				blockoverride "flag"
				{
					texture = "[CharMessage.GetCharacter.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[CharMessage.GetCharacter.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}
				
				blockoverride "size"
				{
					size = { 80 80 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(CharMessage.GetCharacter.GetCountry)]"
				}
			}
		}
		
		hbox = {
			using = message_buttons
			blockoverride "cancel_button" {}
		}
	}

	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	} 	
	
}

message_window = {
	name = "province_message_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}
	
	parentanchor = center
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	 
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			
			vbox = {
				using = message_contents
				
				margin_left = 16
				margin_right = 16
			}
		}
		
		hbox = {
			using = message_buttons
			blockoverride "cancel_title"
			{
				text = "GOTO_PROVINCE"
			}
		}
	}

	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	} 	
}

message_window = {
	name = "country_message_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}
	
	parentanchor = center
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			country_flag = {
				tooltip = "[CountryMessage.GetFirstCountry.GetDescriptiveName]"
				datacontext = "[CountryMessage.GetFirstCountry]"
				
				blockoverride "flag"
				{
					texture = "[CountryMessage.GetFirstCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[CountryMessage.GetFirstCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				} 
				
				blockoverride "size"
				{
					size = { 80 80 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(CountryMessage.GetFirstCountry)]"
				}
			}
			
			vbox = {
				using = message_contents
				
				margin_left = 16
				margin_right = 16
			}
			
			country_flag = {
				tooltip = "[CountryMessage.GetSecondCountry.GetDescriptiveName]"
				datacontext = "[CountryMessage.GetSecondCountry]"
				
				blockoverride "flag"
				{
					texture = "[CountryMessage.GetSecondCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[CountryMessage.GetSecondCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}
				
				blockoverride "size"
				{
					size = { 80 80 }
				} 
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(CountryMessage.GetSecondCountry)]"
				}
			
			}
		}
		hbox = {
			using = message_buttons
			blockoverride "cancel_title"
			{
				text = "GOTO_COUNTRY"
			}
		}
	}

	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	}  
	
}



message_window = {
	name = "goods_message_popup"
	#layer = middle
	state = {
		name = _show
		
		trigger_on_create = yes
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_trade_new_route"
		}
	}
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	
	parentanchor = center
	
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			icon = {
				size = { 80 80 }
				texture = "[GetTradeGoodsIcon(GoodsMessage.GetGoods)]"
				tooltip = "[GoodsMessage.GetGoods.GetTooltip]"
			}
			
			vbox = {
				using = message_contents
				
				margin_left = 16
				margin_right = 16
			}
			
			icon = {
				size = { 80 80 }
				texture = "[GetTradeGoodsIcon(GoodsMessage.GetGoods)]"
				tooltip = "[GoodsMessage.GetGoods.GetTooltip]"
			}
		}
		hbox = {
			using = message_buttons

			blockoverride "cancel_button" {}
		}
	}
	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	}  
}


message_window = {
	name = "newborn_message_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	
	parentanchor = center
	
	vbox = {
		resizeparent = yes 
		
		hbox = {
			margin = { 20 20 }
			margin_top = 32
			
			cpt_button = {
				size = { 70 104 }
				name = "portrait"
				datacontext = "[NewBornMessage.GetCharacter]"
			}
			
			vbox = {
				using = message_contents
				layoutpolicy_horizontal = expanding
				margin_left = 16
				margin_right = 16
				margin_top = 14
				
				widget = {
					size = { 1 20 }
				}
				
				margin_widget = {
					size = { 400 40 }
					using = inputfield
					margin_right = 22
					margin_left = 22

					editbox = {
						position = { 12 0 }
						size = { 260 34 }
						name = "newborn_name"
						#using = Black_FontColor
						using = BaseFontM
						fontsize = 20
						maxcharacters = 48
						fontcolor = { 0.12 0.12 0.12 1 }
						text = "[NewBornMessage.GetCharacter.GetFirstNameForEditbox]"
						focuspolicy = all
						alwaystransparent = no
						multiline = no
						tooltip = "EDIT_NEWBORN_FIRST_NAME"
					}
				}
			}
			
			country_flag = {
				tooltip = "[NewBornMessage.GetCharacter.GetCountry.GetDescriptiveName|T]"
				datacontext = "[NewBornMessage.GetCharacter.GetCountry]"
				
				datacontext = "[NewBornMessage.GetCharacter.GetCountry]"
				blockoverride "flag"
				{
					texture = "[NewBornMessage.GetCharacter.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[NewBornMessage.GetCharacter.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}
				
				blockoverride "size"
				{
					size = { 80 80 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(NewBornMessage.GetCharacter.GetCountry)]"
				}
			}
		}
		
		hbox = {
			using = message_buttons

			blockoverride "cancel_button" {}
		}
	}
	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		using = DropShadow
	}  

}

message_window = {
	name = "player_leave_popup"
	#layer = middle
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}
	
	blockoverride "Title_text"
	{
		name = "title" #This is a hack. It will not be fixed.
	}
	
	parentanchor = center
	
	vbox = {
		resizeparent = yes
		
		hbox = {
			margin = { 20 20 }
			margin_top = 40
			country_flag = {
				tooltip = "[PlayerLeaveMessage.GetCountry.GetDescriptiveName]"
				datacontext = "[PlayerLeaveMessage.GetCountry]"
				
				blockoverride "flag"
				{
					texture = "[PlayerLeaveMessage.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[PlayerLeaveMessage.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}
				
				blockoverride "size"
				{
					size = { 80 80 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(PlayerLeaveMessage.GetCountry)]"
				}
			}
			
			vbox = {
				using = message_contents
				
				margin_left = 15
				margin_right = 15
			}
			
			country_flag = {
				tooltip = "[PlayerLeaveMessage.GetCountry.GetDescriptiveName]"
				datacontext = "[PlayerLeaveMessage.GetCountry]"
				
				blockoverride "flag"
				{
					texture = "[PlayerLeaveMessage.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[PlayerLeaveMessage.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}
				
				blockoverride "size"
				{
					size = { 80 80 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(PlayerLeaveMessage.GetCountry)]"
				}
			}
		}
		hbox = {
			using = message_buttons
			blockoverride "cancel_title"
			{
				text = "UNLOBOTOMIZE"
			}
			
			blockoverride "accept_title"
			{
				text = "ZOMBIE"
			}
		}
	}
	
	widget = {
		size = { 26 26 }
		using = settings_button_template
		parentanchor = bottom|right
		position = { -16 -16 }
		blockoverride "settings_button_block" {} 
		using = DropShadow
	}  
}

message_window = {
	name = "battle_result_message_popup"
	parentanchor = center
	size = { 980 500 }
	
	state = {
		name = _show
		
		start_sound = {
			soundeffect = "event:/SFX/UI/Notifications/sfx_ui_notification_message_appears"
		}
	}

	blockoverride "Title_text"
	{
		datacontext = "[BattleResultMessage]"
		text = "BATTLE_RESULT_TITLE" 
	}
		
	##### Attacker container Left side
	margin_widget = {
		size = { 490 480 }
		datacontext = "[BattleResultMessage.GetAttacker]"
		datacontext = "[BattleResultMessage.GetBattleResult.GetAttacker]"
				
		country_flag = {
			position = { 0 0 }
			tooltip = "[BattleSide.GetCommandingCountryStats.GetCountry.GetDescriptiveName]"
			datacontext = "[BattleSide.GetCommandingCountryStats.GetCountry]"
			
			blockoverride "flag"
			{
				texture = "[BattleSide.GetCommandingCountryStats.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
				frame = "[BattleSide.GetCommandingCountryStats.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
				framesize = { 120 120 }
			}
			
			blockoverride "size"
			{
				size = { 90 90 }
			}
			
			blockoverride "click"
			{
				onclick = "[OpenDiplomacy(BattleSide.GetCommandingCountryStats.GetCountry.GetCountry)]"
			}
		}
			
		overlappingitembox = {
			name = "battle_participants_attacker"
			size = { 360 48 }
			position = { 100 38 }
			datamodel = "[BattleResultMessageSide.GetParticipants]"

			item = {
				country_flag = {
					position = { 0 0 }
					tooltip = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.GetDescriptiveName]"
					datacontext = "[BattleResultMessageParticipant.GetCountryStats.GetCountry]"
					
					blockoverride "flag"
					{
						texture = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
					
					blockoverride "size"
					{
						size = { 48 48 }
					}
					
					blockoverride "click"
					{
						onclick = "[BattleResultMessageParticipant.OnClick]"
					}
				}
			}
		}
			
		overlappingitembox = {
			name = "unit_cards_breakdown"
			position = { 32 100 }
			size = { 424 136 }
			using = NoninteractableBG
			
			datamodel = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats.GetUnitTypeStats]"
			ignoreinvisible = yes
			
			# Can't use UnitCards since these are not subunits
			item = {
				container = {
					alwaystransparent = no
					filter_mouse = all
					datacontext = "[BattleUnitTypeStats.GetCountryStats]"
					tooltip = "BATTLE_UNIT_TYPE_STATS_TT"
					position = { 20 0 }
					visible = "[Not(BattleUnitTypeStats.IsEmpty)]"
					
					icon = {
						name = "unti_type_card"
						position = { 0 0 }
						#	size = { 70 130 }
						texture = "gfx/interface/tiles/unit_card_result.dds"
					}
					
					icon = {
						name = "type_icon"
						position = { 1 4 }
						size = { 57 57 }
						texture = "[GetSubUnitIcon(BattleUnitTypeStats.GetTypeIndex)]"
						
						parentanchor = hcenter
					}
					
					textbox = {
						position = { 6 54 }
						size = { 64 30 }
						using = MarbleButtonFont
						text = "[BattleUnitTypeStats.GetTotalUnits|0]"
						align = center|nobaseline
						tooltip = "BATTLE_UNIT_TYPE_STATS_TT_TOAL_UNITS"
						
						alwaystransparent = yes
						multiline = no
					#parentanchor = top|hcenter
					}
					
					textbox = {
						position = { 6 77 }
						size = { 64 30 }
						using = WhiteFont
						text = "-[BattleUnitTypeStats.GetLosses|0]"
						align = center|nobaseline
						alwaystransparent = yes
						tooltip = "BATTLE_UNIT_TYPE_STATS_TT_LOSSES"
						multiline = no
					#parentanchor = top|hcenter
					}
					
					flowcontainer = {
						position = { 2 50 }
						ignoreinvisible = yes
						widgetanchor = vcenter|hcenter
						parentanchor = vcenter|hcenter
						spacing = 5

						textbox = {
							# position = { 6 122 }
							#size = { 64 30 }
							autoresize = yes
							using = MarbleButtonFontS
							text = "[BattleUnitTypeStats.GetRemainingUnits|0]"
							align = center|nobaseline
							alwaystransparent = yes
							tooltip = "BATTLE_UNIT_TYPE_STATS_TT_REMAINING_UNITS"
							multiline = no
						#parentanchor = top|hcenter
						}

						textbox = {
							# position = { 6 102 }
							#size = { 64 30 }
							autoresize = yes
							using = MarbleButtonFontS
							text =  "(+[BattleUnitTypeStats.GetCaptured])"
							align = center|nobaseline
							alwaystransparent = yes
							#visible = "[BattleUnitTypeStats.GetCaptured]"
							visible = "[GreaterThan_int32(BattleUnitTypeStats.GetCaptured,'(int32)0')]"
							tooltip = "BATTLE_UNIT_TYPE_STATS_TT_CAPTURED"
							multiline = no
						#parentanchor = top|hcenter
						}
					}
				}
			}
		}

		dynamicgridbox = {
			position = { 30 258 }
			using = combatant_modifiers
			
			blockoverride "datamodel"
			{
				datamodel = "[BattleSide.GetCombatModifiers]"
			}
			
			blockoverride "Not_for_land"
			{
			}
		
			icon = {
				position = { -6 -4 }
				size = { 124 52 }
				texture = "gfx/interface/tiles/golden_frame.dds"
				spriteType = Corneredtiled
				spriteborder = { 10 10 }
			}
		}
		
		margin_widget = {
			size = { 310 124 }
			parentanchor = bottom
			position = { 26 -36 }

			cpt_button = {
				size = { 82 124 }
				datacontext = "[BattleSide.GetCommander]"
			}

			flowcontainer = {
				position = { 90 0 }
				parentanchor = bottom
				direction = vertical

				#icon_and_text = {
				#	size = { 110 0 }
				#	tooltip = "BATTLE_SIDE_TT_COMMANDER_MARTIAL"
				#	blockoverride "Icon"
				#	{
				#		using = icon_military
				#	}
				#	blockoverride "Text"
				#	{
				#		text = "[BattleSide.GetCommander.GetMartial]"
				#	}
				#}

				widget = {
					size = { 42 42 }
					parentanchor = hcenter
					tooltip = "BATTLE_SIDE_TT_COMMANDER_MARTIAL"
					
					icon = {
						size = { 48 48 }
						using = icon_military
						parentanchor = center
					}

					icon = {
						framesize = { 60 32 }
						frame = "[BattleSide.GetCommander.GetMartial]"
						texture = "gfx/interface/map/ranking_nonzero_characteristic.dds"
						parentanchor = center
						widgetanchor = center
					}
				}

				icon_and_text = {
					size = { 102 0 }
					datacontext = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats]"
					tooltip = "BATTLE_SIDE_TT_COMMANDER_POPULARITY_CHANGE"
					blockoverride "Icon"
					{
						using = icon_popularity
						size = { 34 34 }
					}
					blockoverride "Text"
					{
						text = "[BattleSide.GetCommanderPopularityChange|+=2]"
					}
				}
						
				icon_and_text = {
					size = { 102 0 }
					datacontext = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats]"
					tooltip = "BATTLE_COUNTRY_STATS_TT_WAR_EXHAUSTION"
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/modifiers/war_exhaustion.dds"
						size = { 34 34 }
					}
					blockoverride "Text"
					{
						text = "[BattleCountryStats.GetWarExhaustion|-=2]"
					}
				}
			}
		}
	}

	icon = {
		texture = "gfx/interface/base_parts/start_menu_vertical_line.dds"
		size = { 4 230 }
		position = { 0 38 }
		parentanchor = hcenter
	}
	
	#######################################
	##### Defender container Right side
	#######################################

	margin_widget = {
		size = { 490 480 }
		margin_left = 32
		parentanchor = right
		datacontext = "[BattleResultMessage.GetDefender]"
		datacontext = "[BattleResultMessage.GetBattleResult.GetDefender]"
				
		country_flag = {
			position = { 0 0 }
			parentanchor = right
			tooltip = "[BattleSide.GetCommandingCountryStats.GetCountry.GetDescriptiveName]"
			datacontext = "[BattleSide.GetCommandingCountryStats.GetCountry]"
			
			blockoverride "flag"
			{
				texture = "[BattleSide.GetCommandingCountryStats.GetCountry.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
				frame = "[BattleSide.GetCommandingCountryStats.GetCountry.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
				framesize = { 120 120 }
			}
			
			blockoverride "size"
			{
				size = { 90 90 }
			}
			
			blockoverride "click"
			{
				onclick = "[OpenDiplomacy(BattleSide.GetCommandingCountryStats.GetCountry.GetCountry)]"
			}
		}
			
		overlappingitembox = {
			name = "battle_participants_defender"
			size = { 360 48 }
			position = { 0 38 }
			datamodel = "[BattleResultMessageSide.GetParticipants]"

			item = {
				country_flag = {
					position = { 0 0 }
					tooltip = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.GetDescriptiveName]"
					datacontext = "[BattleResultMessageParticipant.GetCountryStats.GetCountry]"
					
					blockoverride "flag"
					{
						texture = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[BattleResultMessageParticipant.GetCountryStats.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
					
					blockoverride "size"
					{
						size = { 48 48 }
					}
					
					blockoverride "click"
					{
						onclick = "[BattleResultMessageParticipant.OnClick]"
					}
				}
			}
		}
			
		overlappingitembox = {
			name = "unit_cards_breakdown"
			position = { 0 100 }
			size = { 424 136 }
			using = NoninteractableBG
			
			datamodel = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats.GetUnitTypeStats]"
			ignoreinvisible = yes
			
			# Can't use UnitCards since these are not subunits
			item = {
				container = {
					alwaystransparent = no
					filter_mouse = all
					datacontext = "[BattleUnitTypeStats.GetCountryStats]"
					tooltip = "BATTLE_UNIT_TYPE_STATS_TT"
					position = { 20 0 }
					visible = "[Not(BattleUnitTypeStats.IsEmpty)]"
					
					icon = {
						name = "unti_type_card"
						position = { 0 0 }
						#	size = { 70 130 }
						texture = "gfx/interface/tiles/unit_card_result.dds"
					}
					
					icon = {
						name = "type_icon"
						position = { 1 4 }
						size = { 57 57 }
						texture = "[GetSubUnitIcon(BattleUnitTypeStats.GetTypeIndex)]"
						
						parentanchor = hcenter
					}
					
					textbox = {
						position = { 6 54 }
						size = { 64 30 }
						using = MarbleButtonFont
						text = "[BattleUnitTypeStats.GetTotalUnits|0]"
						align = center|nobaseline
						tooltip = "BATTLE_UNIT_TYPE_STATS_TT_TOAL_UNITS"
						
						alwaystransparent = yes
						multiline = no
					#parentanchor = top|hcenter
					}
					
					textbox = {
						position = { 6 77 }
						size = { 64 30 }
						using = WhiteFont
						text = "-[BattleUnitTypeStats.GetLosses|0]"
						align = center|nobaseline
						alwaystransparent = yes
						tooltip = "BATTLE_UNIT_TYPE_STATS_TT_LOSSES"
						multiline = no
					#parentanchor = top|hcenter
					}
					
					flowcontainer = {
						position = { 2 50 }
						ignoreinvisible = yes
						widgetanchor = vcenter|hcenter
						parentanchor = vcenter|hcenter
						spacing = 5

						textbox = {
							# position = { 6 122 }
							#size = { 64 30 }
							autoresize = yes
							using = MarbleButtonFontS
							text = "[BattleUnitTypeStats.GetRemainingUnits|0]"
							align = center|nobaseline
							alwaystransparent = yes
							tooltip = "BATTLE_UNIT_TYPE_STATS_TT_REMAINING_UNITS"
							multiline = no
						#parentanchor = top|hcenter
						}

						textbox = {
							# position = { 6 102 }
							#size = { 64 30 }
							autoresize = yes
							using = MarbleButtonFontS
							text =  "(+[BattleUnitTypeStats.GetCaptured])"
							align = center|nobaseline
							alwaystransparent = yes
							#visible = "[BattleUnitTypeStats.GetCaptured]"
							visible = "[GreaterThan_int32(BattleUnitTypeStats.GetCaptured,'(int32)0')]"
							tooltip = "BATTLE_UNIT_TYPE_STATS_TT_CAPTURED"
							multiline = no
						#parentanchor = top|hcenter
						}
					}
				}
			}
		}

		dynamicgridbox = {
			parentanchor = right
			position = { -118 258 }
			using = combatant_modifiers
			
			blockoverride "datamodel"
			{
				datamodel = "[BattleSide.GetCombatModifiers]"
			}
			
			blockoverride "Not_for_land"
			{
			}
		
			icon = {
				position = { -6 -4 }
				size = { 124 52 }
				texture = "gfx/interface/tiles/golden_frame.dds"
				spriteType = Corneredtiled
				spriteborder = { 10 10 }
			}
		}
		
		margin_widget = {
			size = { 310 124 }
			parentanchor = bottom|right
			position = { 88 -36 }

			flowcontainer = {
				position = { 0 0 }
				parentanchor = bottom
				direction = vertical

				#icon_and_text = {
				#	size = { 110 0 }
				#	tooltip = "BATTLE_SIDE_TT_COMMANDER_MARTIAL"
				#	blockoverride "Icon"
				#	{
				#		using = icon_military
				#	}
				#	blockoverride "Text"
				#	{
				#		text = "[BattleSide.GetCommander.GetMartial]"
				#	}
				#}

				widget = {
					size = { 42 42 }
					parentanchor = hcenter
					tooltip = "BATTLE_SIDE_TT_COMMANDER_MARTIAL"
					icon = {
						size = { 48 48 }
						using = icon_military
						parentanchor = center
					}
					icon = {
						framesize = { 60 32 }
						frame = "[BattleSide.GetCommander.GetMartial]"
						texture = "gfx/interface/map/ranking_nonzero_characteristic.dds"
						parentanchor = center
						widgetanchor = center
					}
				}

				icon_and_text = {
					size = { 102 0 }
					datacontext = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats]"
					tooltip = "BATTLE_SIDE_TT_COMMANDER_POPULARITY_CHANGE"
					blockoverride "Icon"
					{
						using = icon_popularity
						size = { 34 34 }
					}
					blockoverride "Text"
					{
						text = "[BattleSide.GetCommanderPopularityChange|+=2]"
					}
				}
						
				icon_and_text = {
					size = { 102 0 }
					datacontext = "[BattleResultMessageSide.GetActiveParticipant.GetCountryStats]"
					tooltip = "BATTLE_COUNTRY_STATS_TT_WAR_EXHAUSTION"
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/modifiers/war_exhaustion.dds"
						size = { 34 34 }
					}
					blockoverride "Text"
					{
						text = "[BattleCountryStats.GetWarExhaustion|-=2]"
					}
				}
			}
			cpt_button = {
				size = { 82 124 }
				position = { 112 0 }
				datacontext = "[BattleSide.GetCommander]"
			}
		}
	}


	##############################
	#### Battle Result Message
	##############################

	margin_widget = {
		name = "battle_result_message"
		size = { 470 178 }
		position = { 0 260 }
		parentanchor = hcenter

		sub_header = {
			size = { 100% 32 }
			parentanchor = top|hcenter
			
			blockoverride "Title_text"
			{
				text = "[SelectLocalization( Not(Or(BattleResultMessage.IsPlayerWinner,BattleResultMessage.IsPlayerLoser) ), 'BATTLE_RESULT_OTHER', SelectLocalization( BattleResultMessage.IsPlayerWinner, 'BATTLE_RESULT_WON', 'BATTLE_RESULT_LOST' ) )]"
			}
		}
		
		container = {
			position = { 0 32 }
			parentanchor = top|hcenter
			using = NoninteractableBG
			
			textbox = {
				name = "description"
				position = { 0 4 }
				parentanchor = bottom|hcenter
				
				margin_left = 20
				margin_right = 20
				
				autoresize = yes
				maximumsize = { 454 -1 }
				minimumsize = { 454 148 }
				
				multiline = yes
				align = center|nobaseline
				using = BaseFontS
				using = Black_FontColor
			}
		}
	}
	margin_widget = {
		size = { 612 40 }
		parentanchor = bottom|hcenter
		using = message_buttons
		blockoverride "cancel_title" { text = "GOTO_PROVINCE" } 
	}
}
