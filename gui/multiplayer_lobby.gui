template double_piece_tooltip_vert {
	container = {
		using = GeneralTooltipSetup
		alwaystransparent = no
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}
		flowcontainer = {
			flowcontainer = {
				direction = vertical
				ignoreinvisible = yes

				textbox = {
					name = "TooltipText1"
					using = DefaultTooltipText
					margin = { 20 20 }
					margin_top = 10
					multiline = yes
					# maximumsize = { 350 -1 }
					block "TopText" {}
					block "visible" {}
				}
				icon = {
					size = { 85% 1 }
					using = flat_background_white
					alpha = 0.7
					parentanchor = hcenter
					block "visible" {}
				}
				textbox = {
					name = "TooltipText2"
					using = DefaultTooltipText
					margin = { 20 20 }
					margin_top = 10
					multiline = yes
					# maximumsize = { 350 -1 }
					block "BotText" {}
				}
			}
			margin_widget = {
				size = { 10 100% }
				margin = { 0 6 }
				using = ProgressLockIndicator
			}
		}
	}
}

template LobbyViewModuleBackground
{
	block "modulebackgroundstyle"
	{
		shaderfile = "gfx/FX/pdxgui_default.shader"
		texture = "gfx/editor_gui/editor_field.dds"
		spriteType = CorneredStretched
		spriteborder = { 6 6 }
	}
}

#mod
#limits description size for rules
@textwidth = 560

types MultiplayerLobby
{
	#mod
	type game_rule = vbox {
		layoutpolicy_horizontal = expanding

		checkbox_entry = {
			blockoverride "Frame" {
				frame = "[Select_int32(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), '(int32)2', '(int32)1')]"
			}
			blockoverride "On_click" {
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Player.MakeScope).End)]"
			}
			blockoverride "Text" {
				block "name" {
					text = ""
					#tooltip = "[Select_CString(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), 'enabled', 'disabled')]"
				}
				align = left|nobaseline
				margin_left = 10
			}
		}

		tag = {
			#visible = no  # hide it if you don't want descriptions

			# uncomment lines below to have a fixed size for each rule. Make sure to add tooltips
			#size = { 0 50 }
			#autoresize = no
			layoutpolicy_horizontal = expanding
			max_width = @textwidth
			multiline = yes
			using = FontSizeS
			align = left|top
			elide = right

			blockoverride "LineVisibility" {
				visible = no #remove to add a line below a rule
			}
			margin_bottom = 5
			margin_left = 20
			block "desc" {
				text = "[Select_CString(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), 'enabled', 'disabled')]"
				#tooltip = "[Select_CString(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), 'enabled', 'disabled')]"
			}
		}

		expand = {}
	}

	type game_rule_radio = vbox {
		layoutpolicy_horizontal = expanding
		margin_left = 5

		radial_button_entry = {
			margin_right = -20
			using = NoninteractableBG
			blockoverride "Margins" {
				margin = { -28 10 }
				margin_right = 3
				margin_top = 6
				visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End)]"
			}

			layoutpolicy_horizontal = expanding
			block "transparency" {}

			blockoverride "On_click"
			{
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Player.MakeScope).End)]"
			}

			blockoverride "ShowDot"
			{
				trigger_when = "[ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End)]"
			}

			blockoverride "HideDot"
			{
				trigger_when = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End))]"
			}
			blockoverride "Text" {
				margin_left = 5
				max_width = @textwidth
				elide = right
				block "name" {
					text = "TEST"
					tooltip = "TEST"
				}
			}
		}
	}

	type JominiMultiplayerLobby_BUI = widget {
		name = "lobbyview"
		size = { 100% 100% }

		block "left_panel"
		{
			widget = {
				block "left_panel_properties"
				{
					size = { 390 100% }
				}

				vbox = {
					block "left_panel_content"
					{
						JominiLobbyViewBack = {}
						JominiLobbyViewHost = {}
						JominiLobbyViewHostError = {}
						JominiLobbyViewHostingStatus = {}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GameIsMultiplayer]"

							background = {
								using = JominiLobbyViewModuleBackground
							}

							JominiLobbyViewButton = {
								layoutpolicy_horizontal = expanding
								name = "show_players"
								maximumsize = { 200 40 }
								text = "JOMINI_MULTIPLAYER_GUI_SHOW_PLAYERS"
								enabled = "[GameIsMultiplayer]"
								visible = "[GameIsMultiplayer]"
								onclick = "[LobbyView.SetShowPlayerList('(bool)yes')]"
								tooltip = "JOMINI_MULTIPLAYER_GUI_SHOW_PLAYERS_TT"

								block "host_modify_button" {
									layoutpolicy_horizontal = expanding
								}
							}

							JominiLobbyViewButton = {
								layoutpolicy_horizontal = expanding
								name = "show_settings"
								maximumsize = { 200 40 }
								text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
								enabled = "[GameIsMultiplayer]"
								visible = "[GameIsMultiplayer]"
								onclick = "[LobbyView.SetShowPlayerList( '(bool)no' )]"
								tooltip = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS_TT"

								block "host_modify_button" {
									layoutpolicy_horizontal = expanding
								}
							}
						}

						JominiLobbyViewMPInfo = {
							visible = "[And( GameIsMultiplayer, Not( LobbyView.ShowPlayerList ) )]"
						}

						JominiLobbyViewPlayerList = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							visible = "[And( GameIsMultiplayer, LobbyView.ShowPlayerList )]"
						}

						widget = {
							layoutpolicy_vertical = growing
							layoutpolicy_horizontal = growing
						}
					}
				}
			}
		}

		block "observer_button"
		{
			JominiLobbyObserverButton = {
				parentanchor = bottom|left
				size = { 200 40 }
				position = { 400 0 }

				block "lobby_observer_button" {

				}
			}
		}

		block "right_panel"
		{
			widget = {
				parentanchor = top|right
				widgetanchor = top|right

				block "right_panel_properties"
				{
					size = { 370 100% }
				}

				vbox = {
					block "right_panel_content"
					{
						JominiLobbyViewGameInfoPanel = {}
						JominiLobbyViewSelectionWidget = {}
						JominiLobbyViewPreparation = {}
					}
				}

			}
		}
	}

	type bg_glow = button {
		position = { 0 0 }
		parentanchor = center
		size = { 36 36 }
		using = flat_background_white

		glow = {
			glow_radius = 4
			color = { 1.0  0.75  0.0 0.7 }
		}
	}

	type LobbyViewTitle = textbox {
		size = { 100% 24 }
		using = BaseFontM
		using = Black_FontColor
		position = { 0 10 }
		align = center
	}

	type PlayerlistWrapper = widget {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		filter_mouse = left|right

		widget = {
			visible = "[LobbyView.HasServerInfo]"
			size = { 100% 100% }
		}
	}

	type LobbyViewSelectionWidget = base_window {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		filter_mouse = left|right
		alwaystransparent = no
		blockoverride "GradientAlpha" {
			alpha = 0.35
			size = { 100% 100% }
		}
		movable = no
		vbox = {

			hbox = {
				margin_top = 8
				layoutpolicy_horizontal = expanding
				top_window_header_for_layout = {
					layoutpolicy_horizontal = expanding
					visible = "[LobbyView.HasSelectedPlayable]"
					blockoverride "Title_text"
					{
						text = "[LobbyView.GetSelectedPlayable.GetCountry.GetName]"
					}

				}

				top_window_header_for_layout = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(LobbyView.HasSelectedPlayable)]"
					blockoverride "Title_text"
					{
						text = "SELECT_TITLE_SULLA_V"
					}

				}

			}

			blockoverride "White_buttons" {}

			vbox = {
				layoutpolicy_vertical = expanding
				visible = "[Not( LobbyView.HasSelectedPlayable )]"
			}

			scrollarea = {

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				scrollbar_vertical = {
					using = VerticalScrollBar
				}
				scrollbarpolicy_horizontal = always_off

				scrollwidget = {

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						visible = "[LobbyView.HasSelectedPlayable]"
						margin_widget = {
							size = { 0 220 }
							margin_top = 4
							layoutpolicy_horizontal = expanding
							visible = "[LobbyView.HasSelectedPlayable]"
							alwaystransparent = no
							filter_mouse = left|right
							icon = {
								texture = "gfx/interface/event_window/Event_great_thriving_city_seen_slightly_from_a_distance.dds"
								scale = 0.22
								parentanchor = right
								position = { -12 -2 }
							}
							banner_migrant_horde = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)0')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}

							banner_city_state = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)1')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}

							banner_local_power = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)2')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}

							banner_regional_power = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)3')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}
							banner_major_power = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)4')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}

							banner_great_power = {
								datacontext = "[LobbyView.GetSelectedPlayable.GetCountry]"

								position = { 12 0 }
								visible = "[LobbyView.GetSelectedPlayable.GetCountry.HasRank('(int32)5')]"
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRankInformation]"
							}

							icon_and_text = {
								size = { 204 0 }
								position = { 108 78 }

								tooltipwidget = {
									heritage_pop_out = {
										datacontext = "[LobbyView.GetSelectedPlayable.GetCountry.GetHeritage]"
									}
								}

								blockoverride "Icon" {
									modifier_icon = {
										position = { 3 3 }
										datacontext = "[LobbyView.GetSelectedPlayable.GetCountry.GetHeritage.GetModifier]"
										size = { 28 28 }
									}
								}
								blockoverride "Text" {
									text = "[LobbyView.GetSelectedPlayable.GetCountry.GetHeritage.GetName]"
									using = BaseFontS
									using = Black_FontColor
								}
							}

							icon_and_text = {
								size = { 296 0 }
								position = { 16 110 }

								blockoverride "Icon" {
									textbox = {
										text = "GOVERNMENT"
										using = BaseFontS
										using = Black_FontColor
										position = { 0 17 }
									}
								}
								blockoverride "Text" {
									text = "[LobbyView.GetSelectedPlayable.GetCountry.GetGovernment.GetName]"
									using = BaseFontS
									using = Black_FontColor
								}
							}

							icon_and_text = {
								size = { 296 0 }
								position = { 16 142 }

								blockoverride "Icon" {
									textbox = {
										text = "RELIGION"
										using = BaseFontS
										using = Black_FontColor
										position = { 0 17 }
									}
								}
								blockoverride "Text" {
									text = "[LobbyView.GetSelectedPlayable.GetCountry.GetReligion.GetName]"
									using = BaseFontS
									using = Black_FontColor
								}
							}

							icon_and_text = {
								size = { 296 0 }
								position = { 16 176 }

								blockoverride "Icon" {
									textbox = {
										text = "CULTURE"
										using = BaseFontS
										using = Black_FontColor
										position = { 0 17 }
									}
								}
								blockoverride "Text" {
									text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPrimaryCulture.GetName]"
									using = BaseFontS
									using = Black_FontColor
								}
							}

						}

						margin_widget = {
							layoutpolicy_horizontal = expanding
							size = { 0 192 }
							margin = { 12 0 }
							sub_header = {
								size = { 100% 0 }
								blockoverride "Title_text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRulerTitle]" }
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetHeaderToolTip]"
							}

							cpt_button = {
								position = { 4 36 }
								blockoverride "Context" { datacontext = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler]" }
								tooltipwidget = Character_tooltip
								blockoverride "portrait_button_template_onclick" {}
								blockoverride "portrait_button_template_onrightclick" {}
								blockoverride "portrait_button_template_tooltip" {}

							}

							container = {
								using = NoninteractableBG
								position = { 110 24 }
								blockoverride "Margins" {
									margin_top = -8
									margin_bottom = 12
									margin_left = 7
									margin_right = 14
								}
								widget = {
									size = { 188 41 }
									position = { 0 8 }
									textbox = {
										using = BaseFontS
										using = Black_FontColor
										text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetNameWithNoTooltip]"
										maximumsize = { 188 62 }
										autoresize = yes
										position =  { 4 10 }
										multiline = yes
										align = left
										parentanchor = left
										elide = right
									}

									#icon = {
									#	position = { 0 32 }
									#	texture = "gfx/interface/base_parts/brown_underline_x60bd.dds"
									#	spriteType = Corneredtiled
									#	spriteborder = { 30 0 }
									#	size = { 100% 6 }
									#}
								}

								flowcontainer = {
									position = { 0 74 }
									spacing = 26

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/military.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetMartial]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetMartialToolTip]"
									}

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/civic.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetFinesse]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetFinesseToolTip]"
									}

								}

								flowcontainer = {
									position = { 0 124 }
									spacing = 26
									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/oratory.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetCharisma]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetCharismaToolTip]"
									}

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/religious.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetZeal]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetRuler.GetZealToolTip]"
									}

								}
							}
						}

						margin_widget = {
							name = "coruler_details"
							layoutpolicy_horizontal = expanding
							visible = "[LobbyView.GetSelectedPlayable.GetCountry.UseCoRuler]"
							size = { 0 192 }
							margin = { 12 0 }
							sub_header = {
								size = { 100% 0 }
								blockoverride "Title_text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRulerTitle]" }
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetHeaderToolTip]"
							}

							cpt_button = {
								position = { 4 36 }
								blockoverride "Context" { datacontext = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler]" }
								tooltipwidget = Character_tooltip
								blockoverride "portrait_button_template_onclick" {}
								blockoverride "portrait_button_template_onrightclick" {}
								blockoverride "portrait_button_template_tooltip" {}

							}

							container = {
								using = NoninteractableBG
								position = { 110 24 }
								blockoverride "Margins" {
									margin_top = -8
									margin_bottom = 12
									margin_left = 7
									margin_right = 14
								}
								widget = {
									size = { 188 41 }
									position = { 0 8 }
									textbox = {
										using = BaseFontS
										using = Black_FontColor
										text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetNameWithNoTooltip]"
										maximumsize = { 176 32 }
										autoresize = yes
										position =  { 4 10 }
										multiline = yes
										align = left
										parentanchor = left
										elide = right
									}
								}

								flowcontainer = {
									position = { 0 74 }
									spacing = 26

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/military.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetMartial]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetMartialToolTip]"
									}

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/civic.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetFinesse]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetFinesseToolTip]"
									}

								}

								flowcontainer = {
									position = { 0 124 }
									spacing = 26
									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/oratory.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetCharisma]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetCharismaToolTip]"
									}

									icon_and_text = {
										size = { 80 0 }
										blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/religious.dds" }
										blockoverride "Text" { text = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetZeal]" }
										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetCoRuler.GetZealToolTip]"
									}

								}
							}
						}

						margin_widget = {
							size = { 0 100 }
							layoutpolicy_horizontal = expanding
							margin = { 12 0 }
							sub_header = {
								size = { 100% 0 }
								blockoverride "Title_text" { text = "LOBBY_LABEL_POPULATION" }
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulationHeaderToolTip]"
							}

							widget = {
								position = { 0 36 }
								size = { 100% 90 }

								widget = {
									size = { 40 62 }
									position = { 2 0 }
									using = NoninteractableBG
									blockoverride "Margins" {
										margin_left = 4
										margin_right = 2
										margin_top = 6
										margin_bottom = 4
									}
									tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetOwnedProvinceTooltip]"

									icon = {
										position = { 2 0 }
										using = icon_local
										size = { 34 34 }
									}

									textbox = {
										position = { 0 37 }
										autoresize = yes
										using = BaseFontS
										using = Black_FontColor
										text = "[LobbyView.GetSelectedPlayable.GetCountry.GetOwnedProvinceCount]"
										widgetanchor = top|hcenter
										parentanchor = hcenter
										align = center
									}
								}

								widget = {
									size = { 44 62 }
									position = { 42 0 }
									tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildTotalPopulationToolTip]"
									using = NoninteractableBG
									blockoverride "Margins" {
										margin_left = 4
										margin_right = 2
										margin_top = 6
										margin_bottom = 4
									}
									icon = {
										position = { 2 0 }
										using = icon_population
										size = { 34 34 }
									}

									textbox = {
										position = { 0 37 }
										autoresize = yes
										using = BaseFontS
										using = Black_FontColor
										text = "[LobbyView.GetSelectedPlayable.GetCountry.GetTotalPopulation]"
										widgetanchor = top|hcenter
										parentanchor = hcenter
										align = center
									}
								}

								flowcontainer = {
									spacing = 2
									position = { 110 0 }
									widget = {
										size = { 38 62 }
										#position = { 116 42 }
										using = NoninteractableBG
										blockoverride "Margins" {
											margin_left = 4
											margin_right = 4
											margin_top = 6
											margin_bottom = 4
										}
										icon = {
											using = icon_pop_nobles
											position = { 4 0 }
											size = { 32 32 }
										}

										textbox = {
											position = { 0 37 }
											autoresize = yes
											using = BaseFontS
											using = Black_FontColor
											text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulation('nobles')]"
											widgetanchor = top|hcenter
											parentanchor = hcenter
											align = center
										}

										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildPopulationToolTip('nobles')]"
									}

									widget = {
										size = { 38 62 }
										using = NoninteractableBG
										blockoverride "Margins" {
											margin_left = 4
											margin_right = 4
											margin_top = 6
											margin_bottom = 4
										}
										icon = {
											using = icon_pop_citizens
											position = { 4 0 }
											size = { 32 32 }
										}

										textbox = {
											position = { 0 37 }
											autoresize = yes
											using = BaseFontS
											using = Black_FontColor
											text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulation('citizen')]"
											widgetanchor = top|hcenter
											parentanchor = hcenter
											align = center
										}

										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildPopulationToolTip('citizen')]"
									}

									widget = {
										size = { 38 62 }
										#position = { 160 42 }
										using = NoninteractableBG
										blockoverride "Margins" {
											margin_left = 4
											margin_right = 4
											margin_top = 6
											margin_bottom = 4
										}
										icon = {
											using = icon_pop_freemen
											position = { 4 0 }
											size = { 32 32 }
										}

										textbox = {
											position = { 0 37 }
											autoresize = yes
											using = BaseFontS
											using = Black_FontColor
											text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulation('freemen')]"
											widgetanchor = top|hcenter
											parentanchor = hcenter
											align = center
										}

										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildPopulationToolTip('freemen')]"
									}

									widget = {
										size = { 38 62 }
										#position = { 204 42 }
										using = NoninteractableBG
										blockoverride "Margins" {
											margin_left = 4
											margin_right = 4
											margin_top = 6
											margin_bottom = 4
										}
										icon = {
											using = icon_pop_tribal
											position = { 4 0 }
											size = { 32 32 }
										}

										textbox = {
											position = { 0 37 }
											autoresize = yes
											using = BaseFontS
											using = Black_FontColor
											text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulation('tribesmen')]"
											widgetanchor = top|hcenter
											parentanchor = hcenter
											align = center
										}

										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildPopulationToolTip('tribesmen')]"
									}

									widget = {
										size = { 38 62 }
										#position = { 248 42 }
										using = NoninteractableBG
										blockoverride "Margins" {
											margin_left = 4
											margin_right = 4
											margin_top = 6
											margin_bottom = 4
										}
										icon = {
											using = icon_pop_slaves
											position = { 4 0 }
											size = { 32 32 }
										}

										textbox = {
											position = { 0 37 }
											autoresize = yes
											using = BaseFontS
											using = Black_FontColor
											text = "[LobbyView.GetSelectedPlayable.GetCountry.GetPopulation('slaves')]"
											widgetanchor = top|hcenter
											parentanchor = hcenter
											align = center
										}

										tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.BuildPopulationToolTip('slaves')]"
									}
								}
							}
						}

						margin_widget = {
							size = { 0 200 }
							layoutpolicy_horizontal = expanding
							margin = { 12 0 }
							margin_top = 2
							sub_header = {
								size = { 100% 0 }
								blockoverride "Title_text" { text = "LOBBY_LABEL_DIPLOMACY" }
								tooltip = "[LobbyView.GetSelectedPlayable.GetCountry.GetDiplomacyHeaderToolTip]"
							}

							# DIPLOMATIC RELATIONS
							widget = {
								position = { 0 32 }
								size = { 100% 100% }

								scrollarea = {
									size = { 100% 120 }
									parentanchor = hcenter

									scrollbar_vertical = {
										using = VerticalScrollBar
									}
									scrollbarpolicy_horizontal = always_off

									scrollwidget = {
										fixedgridbox = {
											name = "diplomatic_relations"
											size = { 100% 120 }
											addrow = 45
											addcolumn = 300

											item = {
												flowcontainer = {
													spacing = 5

													widget = {
														size = { 40 40 }
														icon = {
															texture = "[RelationTypeItem.AccessIcon]"
															tooltip = "[RelationTypeItem.GetToolTip]"
															size = { 30 30 }
															parentanchor = center
														}
													}

													overlappingitembox = {
														datamodel = "[RelationTypeItem.GetRelations]"
														size = { 245 40 }
														spacing = 5

														item = {
															margin_widget = {
																size = { 35 35 }
																margin = { 8 5 }

																country_flag = {
																	tooltip = "[RelationDescItem.GetToolTip]"
																	datacontext = "[RelationDescItem.GetCountry]"

																	blockoverride "flag"
																	{
																		texture = "[RelationDescItem.AccessFlagIcon]"
																		frame = "[RelationDescItem.GetFlagFrame]"
																		framesize = { 56 56 }
																	}

																	blockoverride "size"
																	{
																		size = { 30 30 }
																	}

																	blockoverride "click"
																	{
																		onclick = "[RelationDescItem.OnClick]"
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}

						vbox = {
							layoutpolicy_vertical = expanding
						}
					}
				}
			}
		}



		state = {
			name = "jomini_preselected_changed"
			# Can be used for showing a fancy animation when changing country selection in the lobby
			on_start = "[GetVariableSystem.Set('country_selection', 'selected')]"
			animation = {
				alpha = 0
			}

			next = backin

		}

		state = {
			name = "backin"
			# Can be used for showing a fancy animation when changing country selection in the lobby
			on_start = "[GetVariableSystem.Set('country_selection', 'selected')]"
			animation = {
				alpha = 1
			}

			duration = 0.15

		}

	}

	type LobbyViewSpaceWidget = widget {
		size = { 0 160 }
		layoutpolicy_horizontal = expanding
		visible = yes
	}


	type LobbyViewGameInfoPanel = vbox {
		layoutpolicy_horizontal = expanding
		background = {
			using = LobbyViewModuleBackground
		}
		block "game_info"
		{
		}
	}

	type LobbyViewButtons = vbox {


		margin_widget = {
			size = { 332 32 }

			background = {
				using = flat_background_white
				using = border_medium_torn_alpha
				shaderfile = "gfx/FX/pdxgui_default.shader"
				margin = { 0 10 }
			}

			alwaystransparent = no
			filter_mouse = all
			margin_left = 12
			margin_right = 12


			flowcontainer = {
				direction = vertical
				spacing = 10
				ignoreinvisible = yes

				flowcontainer = {
					ignoreinvisible = yes
					spacing = 12

					text_button_square = {
						size = { 148 0 }
						blockoverride "On_click" { onclick = "[LobbyView.ToggleObserve]" }
						blockoverride "Center_text" { text = "[SelectLocalization(LobbyView.IsObserver, 'JOMINI_MULTIPLAYER_GUI_DISABLE_OBSERVE', 'JOMINI_MULTIPLAYER_GUI_OBSERVE')]" }
						tooltip = "JOMINI_MULTIPLAYER_GUI_OBSERVE_TOOLTIP"
					}

					text_button_square = {
						size = { 148 0 }
						blockoverride "Center_text" { text = "JOMINI_MULTIPLAYER_GUI_START" }
						using = tooltip_ne
						blockoverride "On_click" {
							onclick = "[LobbyView.Start]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_start"
						}
						enabled = "[LobbyView.CanStart]"
						tooltip = "[LobbyView.StartToolTip]"
						visible = "[And(PlayerIsHost, And(GameIsMultiplayer,IsPreparationLobby))]"

					}

					text_button_square = {
						size = { 148 0 }
						blockoverride "Center_text" { text = "JOMINI_MULTIPLAYER_GUI_START" }
						using = tooltip_ne
						blockoverride "On_click" {
							onclick = "[GameLobby.StartGame]"
							onclick = "[LobbyView.Ready]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_start"
							shortcut = "confirm"
						}
						enabled = "[LobbyView.CanControlSelected]"
						tooltip = "[LobbyView.GetControlToolTip]‎"
						shortcut = "confirm"
						visible =  "[And(PlayerIsHost,And(Or(Not(GameIsMultiplayer),Not(IsPreparationLobby)),Or(LobbyView.HasSelectedPlayable,LobbyView.IsObserver)))]"
					}

					####### PLAYER READY CHECKBOX
					widget = {
						size = { 130 30 }
						visible = "[And(IsPreparationLobby, Not(PlayerIsHost))]"
						hbox = {

							check_box_button = {
								size = { 30 30 }
								blockoverride "Frame" { frame = "[BoolTo1And2( LobbyView.IsReady )]" }
								enabled = "[LobbyView.CanReady]"
								tooltip = "[LobbyView.GetReadyToolTip]"
								blockoverride "On_click" { onclick = "[LobbyView.Ready]" }
								visible = "[Not( LobbyView.IsReady )]"
							}

							check_box_button = {
								size = { 30 30 }
								blockoverride "Frame" { frame = "[BoolTo1And2( LobbyView.IsReady )]" }
								blockoverride "On_click" { onclick = "[LobbyView.UnReady]" }
								visible = "[LobbyView.IsReady]"
							}

							textbox = {
								using = BaseFontM
								using = Black_FontColor
								text = "JOMINI_MULTIPLAYER_GUI_READY"
								tooltip = "[LobbyView.GetReadyToolTip]"
								align = left
								autoresize = yes
								using = tooltip_ne
							}
						}
					}
				}
			}

		}

		widget = {# Spacer
			size = { 1 10 }
		}
	}

	type LobbyViewBackgroundBorders = icon {
		#texture = "gfx/interface/tiles/small_window_frame_corners.dds"
		spriteType = Corneredtiled
		size = { 100% 100% }
		spriteborder = { 32 24 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		parentanchor = top|right
		widgetanchor = top|right
	}

	type LobbyViewPlayerList = margin_widget {
		#layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		size = { 0 410 }
		alwaystransparent = no
		visible = "[GameIsMultiplayer]"

		widget = {
			size = { 100% 100% }
			visible = "[And(Not(LobbyView.HasServerInfo), GameIsMultiplayer)]"
		}

		sub_header = {
			visible = "[GameIsMultiplayer]"
			size = { 322 32 }
			parentanchor = hcenter

			blockoverride "Title_text"
			{
				text = "JOMINI_MULTIPLAYER_GUI_PLAYER_LIST_LABEL"
			}
		}

		scrollarea = {
			position = { 0 40 }
			parentanchor = hcenter
			size = { 300 376 }
			visible = "[GameIsMultiplayer]"
			scrollbar_vertical = {
				using = VerticalScrollBar
			}
			using = VerticalScrollAreaCutOff
			scrollbaralign_vertical = right
			scrollbarpolicy_horizontal = always_off
			scrollwidget = {
				fixedgridbox = {
					addcolumn = 300
					addrow = 60
					setitemsizefromcell = yes
					datamodel = "[LobbyView.Players]"
					item = {
						JominiLobbyViewPlayerItem = {
						}
					}
				}
			}
		}
	}

	type TROLLBOX = vbox {
		name = "mp_info"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		visible = "[LobbyView.HasServerInfo]"
		alwaystransparent = no
		filter_mouse = left|right

		block "mp_info_properties" {
			margin = { 10 10 }
			spacing = 10

			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		margin_widget = {
			size = { 0 60 }
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = fixed
			flowcontainer = {
				direction = vertical
				spacing = 8
				radial_button_entry = {
					name = "mpconfig_private"
					blockoverride "EnabledState"
					{
						enabled = "[CanEditSettingsAfterHost]"
					}
					blockoverride "Text"
					{
						text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
					}
					blockoverride "On_click"
					{
						onclick = "[LobbyView.ToggleVisibility]"
						inherit_visual_state = no
						#checked = "[LobbyView.GetServerInfo.IsInvite]"
					}
					blockoverride "ShowDot"
					{
						trigger_when = "[LobbyView.GetServerInfo.IsInvite]"
					}

					blockoverride "HideDot"
					{
						trigger_when = "[Not( LobbyView.GetServerInfo.IsInvite )]"
					}
				}

				radial_button_entry = {
					name = "mpconfig_public"
					blockoverride "EnabledState"
					{
						enabled = "[CanEditSettingsAfterHost]"
					}
					blockoverride "Text"
					{
						text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
					}
					blockoverride "On_click"
					{
						onclick = "[LobbyView.ToggleVisibility]"
						inherit_visual_state = no
						#checked = "[LobbyView.GetServerInfo.IsPublic]"
					}
					blockoverride "ShowDot"
					{
						trigger_when = "[Not( LobbyView.GetServerInfo.IsInvite )]"
					}

					blockoverride "HideDot"
					{
						trigger_when = "[LobbyView.GetServerInfo.IsInvite]"
					}
				}
			}
		}

		margin_widget = {
			size = { 0 80 }
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = fixed
			vbox = {
				spacing = 4
				layoutpolicy_horizontal = expanding
				restrictparent_min = yes
				block "setup_hbox_height" {}

				hbox = {
					layoutpolicy_horizontal = expanding

					textbox = {
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME"
						using = BaseFontM
						using = Black_FontColor
						minimumsize = { 90 0 }
						maximumsize = { 90 0 }
					}

					margin_widget = {
						size = { 160 40 }
						layoutpolicy_horizontal = expanding
						using = inputfield
						name = "multiplayer_server_name_field"
						editbox = {
							position = { 12 0 }
							size = { 100% 34 }
							name = "find_text"
							text = "[LobbyView.GetServerInfo.GetServerName]"
							using = BaseFontM
							using = Black_FontColor
							fontsize = 18
							focuspolicy = all
							alwaystransparent = no
							multiline = no
							maxcharacters = 58
							onreturnpressed = "[LobbyView.SetName]"
							ontextedited = "[LobbyView.OnNameEdit]"
							enabled = "[CanEditSettingsAfterHost]"
							#enabled = no
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME"
						}
						#icon = {
						#	using = flat_background_black
						#	spriteType = Corneredtiled
						#	shaderfile = "gfx/FX/pdxgui_default.shader"
						#	size = { 100% 2 }
						#	parentanchor = bottom
						#	position = { 0 -2 }
						#	visible = "[LobbyView.Not(PlayerIsHost)]"
						#	visible = "[CannotEditSettingsAfterHost]"
						#	visible = no
						#}

					}
					widget = { size = { 8 1 } }
					icon_button_square = {
						size = { 32 32 }
						visible = "[CanEditSettingsAfterHost]"
						blockoverride "On_click"
						{
							onclick = "[LobbyView.SetName]"
							enabled = "[CanEditSettingsAfterHost]"
						}
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/shared_icons/change.dds"
							size = { 28 28 }
						}
						tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_NAME"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[JominiIsHostOrLocal]"

					textbox = {
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD"
						using = BaseFontM
						using = Black_FontColor
						minimumsize = { 90 0 }
						maximumsize = { 90 0 }
					}

					margin_widget = {
						size = { 160 40 }
						layoutpolicy_horizontal = expanding
						using = inputfield
						name = "multiplayer_set_password_field"
						editbox = {
							position = { 8 0 }
							size = { 100% 34 }
							name = "find_text"
							text = ""
							using = BaseFontM
							using = Black_FontColor
							fontsize = 18
							focuspolicy = all
							alwaystransparent = no
							multiline = no
							onreturnpressed = "[LobbyView.SetPassword]"
							ontextedited = "[LobbyView.OnPasswordEdit]"
							enabled = "[CanEditSettingsAfterHost]"
							tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD"
						}
					}
					widget = { size = { 8 1 } }
					icon_button_square = {
						size = { 32 32 }
						visible = "[CanEditSettingsAfterHost]"
						blockoverride "On_click"
						{
							onclick = "[LobbyView.SetPassword]"
							enabled = "[CanEditSettingsAfterHost]"
						}
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/shared_icons/change.dds"
							size = { 28 28 }
						}
						tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_PASSWORD"
					}
				}

				hbox = {
					block "game_options_left" {}
					block "game_options_right" {}
				}
			}
		}

		margin_widget = {
			size = { 0 46 }
			layoutpolicy_horizontal = expanding
			checkbox_entry = {
				size = { 300 34 }
				blockoverride "Frame"
				{
					frame = "[BoolTo1And2( LobbyView.IsAutoAccept )]"
				}
				blockoverride "On_click"
				{
					onclick = "[LobbyView.ToggleAutoAccept]"
					enabled = "[CanEditSettingsAfterHost]"
				}

				blockoverride "Text"
				{
					text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
					margin_right = 8
				}
				tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
			}
		}
		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			block "mp_info_header" {}

			block "mp_info_left_info" {}

			flowcontainer = {
				direction = vertical
				spacing = 12
				JominiLobbyViewServerInfoEntry = {
					visible = "[LobbyView.GetServerInfo.HasServerID]"
					text = "JOMINI_MULTIPLAYER_GUI_SERVER_ID"
					tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_ID_TOOLTIP"
					onclick = "[LobbyView.CopyServerID]"
					elide = right
					align = left
					using = BaseFontS
					#using = Black_FontColor
					fontcolor = { 0.004  0.34  0.42 1 }
					blockoverride "server_info_entry_styling"
					{
						using = NoninteractableBG
					}
				}

				JominiLobbyViewServerInfoEntry = {
					text = "JOMINI_MULTIPLAYER_GUI_GAME_VERSION"
					tooltip = "JOMINI_MULTIPLAYER_GUI_GAME_VERSION_TOOLTIP"
					elide = right
					using = BaseFontS
					using = Black_FontColor
					align = left
					blockoverride "server_info_entry_styling"
					{
						using = NoninteractableBG
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred

			################################
			##### ENABLED DLCs
			################################

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10
				block "mp_info_margin" {}

				tag = {
					size = { 250 28 }
					minimumsize = { 250 28 }
					#layoutpolicy_horizontal = expanding
					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_DLCS"
					align = left
					blockoverride "jomini_standard_textbox"
					{
						using = HeaderFont
					}
				}

				JominiLobbyCollapseButton = {
					enabled = "[LobbyView.HasEnabledDLCs]"
					onclick = "[LobbyView.ToggleShowEnabledDLCs]"
					visible = "[LobbyView.ShouldShowEnabledDLCs]"
				}

				JominiLobbyExpandButton = {
					enabled = "[LobbyView.HasEnabledDLCs]"
					onclick = "[LobbyView.ToggleShowEnabledDLCs]"
					visible = "[Not(LobbyView.ShouldShowEnabledDLCs)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				block "mp_info_margin" {}
				visible = "[LobbyView.ShouldShowEnabledDLCs]"
				datamodel = "[LobbyView.GetEnabledDLCs]"
				block "mp_info_item_spacing" {}
				using = NoninteractableBG
				blockoverride "Margins" { margin = { 8 2 } }
				margin_bottom = 8
				margin_top = 4
				item = {
					textbox = {
						layoutpolicy_horizontal = expanding
						text = "- [CString.GetString]"
						autoresize = yes
						using = BaseFontS
						using = Black_FontColor
					}
				}
			}

			################################
			##### ENABLED MODS
			################################

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10
				block "mp_info_margin" {}

				tag = {
					size = { 250 28 }
					minimumsize = { 250 28 }
					#layoutpolicy_horizontal = expanding
					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_MODS"
					align = left
					blockoverride "jomini_standard_textbox"
					{
					using = HeaderFont
					}
				}

				JominiLobbyCollapseButton = {
					enabled = "[LobbyView.HasEnabledMods]"
					onclick = "[LobbyView.ToggleShowEnabledMods]"
					visible = "[LobbyView.ShouldShowEnabledMods]"
				}

				JominiLobbyExpandButton = {
					enabled = "[LobbyView.HasEnabledMods]"
					onclick = "[LobbyView.ToggleShowEnabledMods]"
					visible = "[Not(LobbyView.ShouldShowEnabledMods)]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datamodel = "[LobbyView.GetEnabledMods]"
				visible = "[LobbyView.ShouldShowEnabledMods]"
				block "mp_info_item_spacing" {}
				block "mp_info_margin" {}
				using = NoninteractableBG
				blockoverride "Margins" { margin = { 8 0 } }
				margin_bottom = 12
				margin_top = 4
				item = {
					textbox = {
						layoutpolicy_horizontal = expanding
						text = "- [CString.GetString]"
						autoresize = yes
						using = BaseFontS
						using = Black_FontColor
					}
				}
			}
		}

		widget = {
			layoutpolicy_vertical = growing
			layoutpolicy_horizontal = growing
		}
	}

	type LobbyViewGameConfiguration = vbox {
		layoutpolicy_horizontal = expanding

		text_button_square = {
			blockoverride "Text"
			{
				text = "JOMINI_MULTIPLAYER_GUI_GAME_CONFIGURATION"
			}
			blockoverride "OnClick"
			{
				onclick = "[LobbyView.OpenGameConfigurationWindow]"
			}

			visible = no# Window opened automatically by the game
		}
		widget = {
			filter_mouse = left|right
			alwaystransparent = no

			#LobbyViewBackgroundBorders = {
			#	size = { 100% 120% }
			#	position = { 0 -12}
			#}

			size = { 0 60 }
			layoutpolicy_horizontal = expanding
			text_button_square = {
				size = { 210 28 }
				parentanchor = vcenter|hcenter

				blockoverride "Center_text"
				{
					text = "BACK"
				}

				enabled = "[LobbyView.CanGoBack]"
				tooltip = "[LobbyView.GetGoBackToolTip]"
				blockoverride "On_click"
				{
					onclick = "[SetPreparationLobby('(bool)no')]"
					onclick = "[LobbyView.GoBack]"
				}
			}
		}
	}

	type SullaLobbyViewHost = widget {
		size = { 332 72 }
		visible = "[And(Not(HasHostError),Not(GameIsMultiplayer))]"
		alwaystransparent = no
		filter_mouse = left|right

		block "host_background" {
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}
		text_button_square_highlighted = {
			size = { 298 28 }
			parentanchor = center
			tooltip = "[LobbyView.GetOpenMultiplayerToolTip]"
			blockoverride "Center_text"
			{
				text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
			}
			blockoverride "On_click" {
				onclick = "[GameLobby.OnOpenMultiplayer]"
				enabled = "[And(JominiIsMultiplayerAccessible, JominiIsHostOrLocal)]"
			}
		}
	}
}

JominiMultiplayerLobby_BUI = {
	blockoverride "window_background" {
		texture = "gfx/interface/tiles/small_window_frame_corners_copy.dds"
		spriteType = Corneredtiled
		spriteborder = { 32 24 }
		margin = { 0 0 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	blockoverride "observer_button"
	{

	}
	icon = {
		name = "cloud_save_indicator"
		position = { -330 2 }
		parentanchor = top|right
		texture = "gfx/interface/cloud_uplink.dds"
		shaderfile = "gfx/FX/pdxgui_glow_game.shader"
		tooltip = "CLOUD_SAVE_IN_PROGRESS_TOOLTIP"
		visible = "[GameIsCloudStorageOperationInProgress]"
	}


	blockoverride "collapse_button_properties" {
		texture = "gfx/interface/base_parts/button_square_expanded.dds"
		size = { 22 22 }
	}

	blockoverride "expand_button_properties" {
		texture = "gfx/interface/base_parts/button_square_collapsed.dds"
		size = { 22 22 }
	}

	blockoverride "text_edit_button"
	{
		texture = "gfx/interface/base_parts/button_square_collapsed.dds"
		size = { 22 22 }
	}

	blockoverride "buttonstyle" {
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		texture = "gfx/interface/tiles/marble_button_s.dds"
		spriteType = Corneredtiled
		spriteborder = { 60 0 }
		size = { 240 38 }

		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = BaseFontM
				using = Black_FontColor
				autoresize = yes
				position = { 0 -12 }
			}
		}
	}

	blockoverride "host_modify_button" {}

	blockoverride "remove_player_button_style" {
		texture = "gfx/interface/icons/font_icons/font_icon_paper_cross.dds"
		gfxtype = framedbuttongfx
		effectname = "NoHighlight"
		framesize = { 16 16 }
		upframe = 1
		downframe = 2
		overframe = 2
	}


	blockoverride "jomini_standard_textbox" {
		using = BaseFontS
		using = Black_FontColor
	}

	blockoverride "host_button" {
		texture = "gfx/interface/tiles/text_button_tiles.dds"
		spriteType = Corneredtiled
		spriteborder = { 80 0 }
		size = { 298 46 }
		text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
	}

	blockoverride "lobbyview_button_size" {
		size = { 200 38 }
		layoutpolicy_horizontal = fixed
	}

	blockoverride "host_background" {
		# No need for a background here
	}

	blockoverride "error_bottom_margin" {
		margin_bottom = 12
	}

	blockoverride "player_item_styling"
	{
		list_entry = {
			size = { 100% 100% }
		}

		# OLD LIST ENTRY
		#icon = {
		#	shaderfile = "gfx/FX/pdxgui_default.shader"
		#	texture = "gfx/interface/tiles/entry_button_tiles.dds"
		#	spriteType = Corneredtiled
		#	spriteborder = { 40 8 }
		#	size = { 298 62 }
		#}
	}

	blockoverride "playerlist_item_content" {
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			JominiLobbyRemovePlayer = {
				position = { -10 8 }
				parentanchor = top|right
				widgetanchor = top|right
			}

			widget = {
				size = { 236 60 }
				parentanchor = top|right
				widgetanchor = top|right

				tag_dark = {
					size = { 140 20 }
					position = { -2 -2 }
					text = "[LobbyPlayer.GetName]"
				}

				widget = {
					size = { 110 60 }
					position = { -5 0 }
					parentanchor = top|right
					widgetanchor = top|right

					block "player_loading_progress"
					{
						textbox = {
							text = "[LobbyPlayer.GetTransferProgress]"
							visible = "[LobbyPlayer.IsHotjoining]"
						}
					}

					#Readyness
					container = {
						parentanchor = right
						position = { -18 0 }
						visible = "[LobbyPlayer.ShowReadyStatus]"
						block "readyness" {
							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes
								spacing = 0
								textbox = {
									text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
									visible = "[LobbyPlayer.IsObserver]"
									using = BaseFontS
									using = Black_FontColor
									align = right
									autoresize = yes
									parentanchor = right
								}
								textbox = {
									text = "JOMINI_MULTIPLAYER_GUI_READY"
									visible = "[LobbyPlayer.IsReady]"
									using = BaseFontS
									using = Black_FontColor
									align = right
									autoresize = yes
									parentanchor = right
								}

								textbox = {
									text = "JOMINI_MULTIPLAYER_GUI_NOT_READY"
									visible = "[Not(LobbyPlayer.IsReady)]"
									using = BaseFontS
									using = Negative_FontColor
									align = right
									autoresize = yes
									parentanchor = right
								}
							}
						}
					}
				}
			}
		}
	}

	blockoverride "playerlist_playable"
	{
		container = {
			visible = "[LobbyPlayer.HasPlayable]"

			country_flag = {
				position = { 4 1 }

				blockoverride "flag"
				{
					#alwaystransparent = yes
					texture = "[LobbyPlayer.GetPlayable.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[LobbyPlayer.GetPlayable.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
					framesize = { 56 56 }
				}

				blockoverride "size"
				{
					size = { 54 54 }
				}

				blockoverride "click"
				{
					onclick = "[PanToCountry(GetCountry( LobbyPlayer.GetPlayable.GetCountry.GetTag ).Self)]"
				}

				blockoverride "hover" { }
			}

			textbox = {
				text = "[LobbyPlayer.GetPlayable.GetCountry.GetName]"
				align = left
				autoresize = yes
				using = BaseFontS
				using = Black_FontColor
				position = { 62 28 }
			}
		}
	}

	blockoverride "marble_scrollbar" {
		scrollbar_vertical = {
			using = VerticalScrollBar
		}
	}

	blockoverride "mp_info_properties" {
		margin = { 20 0 }
		margin_top = 12
		spacing = 10
		visible = "[And(LobbyView.HasServerInfo, GameIsMultiplayer)]"
	}

	blockoverride "server_info_entry_styling"
	{
		alwaystransparent = no
		using = BaseFontS
		using = Black_FontColor
		margin_bottom = 2
		margin_left = 10
		margin_right = 4
		align = left
		elide = right

		icon = {
			name = "frame"
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 12 12 }
			size = { 296 28 }
		}
	}

	blockoverride "server_info_entry_size"
	{
		size = { 290 28 }
	}

	block "servermode_text" {
		text = "JOMINI_MULTIPLAYER_GUI_SESSION_SERVER_MODE"
	}

	blockoverride "mp_info_margin" {
		#margin_left = 18
	}

	blockoverride "mp_info_item_spacing" {
		spacing = 3
		margin_top = 8
	}

	blockoverride "mp_info_item_background" {
		using = BaseFontS
		using = Black_FontColor
		margin_top = 4
		margin_bottom = 4
		margin_left = 10

		icon = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 12 12 }
			size = { 296 28 }
		}
	}
	blockoverride "observer_button" {}
	blockoverride "left_panel_content"
	{
		base_window = {
			#visible = "[GetVariableSystem.Exists('multiplayer_visible')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			blockoverride "GradientAlpha" {
				alpha = 0.35
				size = { 100% 100% }
			}
			vbox = {
				using = MainWindowHeaderBox

				blockoverride "Title_text"
				{
					text = "JOMINI_MULTIPLAYER_GUI_SESSION_HEADER"
				}

				blockoverride "White_buttons"
				{
					visible = no
				}

				JominiLobbyViewHostError = {}
				JominiLobbyViewHostingStatus = {}
				SullaLobbyViewHost = {}

				PlayerlistWrapper = {

					vbox = {
						TROLLBOX = {}
						LobbyViewPlayerList = {}
					}
				}
				LobbyViewGameConfiguration = {}
			}
		}
	}

	blockoverride "player_loading_progress"
	{
		textbox = {
			text = "[LobbyPlayer.GetLoadingString]"
			size = { 50 34 }
			parentanchor = bottom|right
			visible = "[LobbyPlayer.IsHotjoining]"
			using = BaseFontS
			using = Black_FontColor
			align = right
		}
	}

	blockoverride "left_panel_properties"
	{
		visible = "[GetVariableSystem.Exists('multiplayer_visible')]"
		size = { 332 100% }
		alwaystransparent = no
	}

	blockoverride "right_panel_properties"
	{
		size = { 332 100% }

		alwaystransparent = no
		parentanchor = top|right
		widgetanchor = top|right
	}

	blockoverride "right_panel_content"
	{
		LobbyViewGameInfoPanel = {}
		LobbyViewSelectionWidget = {}
		LobbyViewSpaceWidget = {}
		LobbyViewButtons = {}
	}

	blockoverride "setup_editbox"
	{
		using = MarbleButtonFontS
		fontsize = 15
		fontcolor = { 1 1 1 1 }
		cursorcolor = { 1 1 0.5 1 }

		background = {
			margin_left = 5
			margin_top = 0
			texture = "gfx/editor_gui/editor_field.dds"
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
	}

	blockoverride "setup_textbox"
	{
		using = MarbleButtonFontS
	}

	blockoverride "setup_checkbutton"
	{
		texture = "gfx/interface/buttons/checkbox.dds"
		framesize = { 36 36 }
	}

	base_window = {
		size = { 332 60 }
		movable = no
		parentanchor = bottom|left
		blockoverride "BackgroundGradient" { visible = no }

		text_button_square = {
			size = { 210 28 }
			parentanchor = vcenter|hcenter

			blockoverride "Center_text"
			{
				text = "BACK"
			}

			enabled = "[LobbyView.CanGoBack]"
			tooltip = "[LobbyView.GetGoBackToolTip]"
			blockoverride "On_click"
			{
				onclick = "[LobbyView.GoBack]"
				onclick = "[GetVariableSystem.Clear('game_rules')]"
				onclick = "[GetVariableSystem.Clear('country_selection')]"
			}
		}
	}

	textbox = {
		visible = "[Not(IsLiveBuild)]"
		parentanchor = bottom|right
		widgetanchor = bottom|right
		position = { -340 6 }
		name = "version_label"
		text = "[GetCompleteVersionInfoString]"
		size = { 400 120 }
		using = BaseFontS
		using = Black_FontColor
		multiline = yes
		align = right

	}

	base_window = {
		size = { 500 106 }
		parentanchor = top|hcenter
		filter_mouse = left|right
		alwaystransparent = no
		movable = no
		blockoverride "BackgroundGradient" { visible = no }

		vbox = {
			margin_top = 8
			top_window_header_for_layout_centered = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(IsLocalPlayerReplayingCommands)]"
				blockoverride "Title_text" { text = "THE_WORLD" }
				blockoverride "White_buttons" {}
				tooltip = "THE_WORLD_TOOLTIP"
			}
			top_window_header_for_layout_centered = {
				layoutpolicy_horizontal = expanding
				visible = "[IsLocalPlayerReplayingCommands]"
				blockoverride "Title_text" { text = "THE_WORLD_CATCHING_UP" }
				blockoverride "White_buttons" {}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin_widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 100 }
					margin_left = 14
					margin_top = 12
					flowcontainer = {
						spacing = 4
						button = {
							shortcut = "map_mode_1"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/terrain.dds" }
							onclick = "[SetMapMode('terrain')]"
							tooltip = "MAPMODE_TERRAIN"
						}

						button = {
							shortcut = "map_mode_2"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/simple_terrain.dds" }
							onclick = "[SetMapMode('simple_terrain')]"
							tooltip = "simple_terrain_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_3"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/political.dds" }
							onclick = "[SetMapMode('political')]"
							tooltip = "MAPMODE_POLITICAL"
						}

						button = {
							shortcut = "map_mode_4"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/culture.dds" }
							onclick = "[SetMapMode('culture')]"
							tooltip = "culture_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_5"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/religion.dds" }
							onclick = "[SetMapMode('religion')]"
							tooltip = "religion_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_6"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/tradegoods.dds" }
							onclick = "[SetMapMode('tradegoods')]"
							tooltip = "tradegoods_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_7"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/civilization.dds" }
							onclick = "[SetMapMode('civilization')]"
							tooltip = "civilization_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_8"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/government.dds" }
							onclick = "[SetMapMode('government')]"
							tooltip = "government_MAPMODE_DESC"
						}

						button = {
							shortcut = "map_mode_9"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/players.dds" }
							onclick = "[SetMapMode('allplayers')]"
							tooltip = "MAPMODE_PLAYERS"
						}

						button = {
							shortcut = "map_mode_10"
							using = droptargetbutton
							blockoverride "IconTexture" { texture = "gfx/interface/icons/minimap/population.dds" }
							onclick = "[SetMapMode('population')]"
							tooltip = "population_MAPMODE_DESC"
						}

					}

					button_round_inverted = {
						name = "find_province"
						size = { 40 40 }
						parentanchor = right
						position = { -10 -4 }
						tooltip = "MAPACTION_FIND_PROVINCE"
						blockoverride "Icon"
						{
							texture = "gfx/interface/base_parts/find.dds"
						}
						blockoverride "On_click"
						{
							onclick = "[OnFindProvince]"
							shortcut = "find_province"
						}
					}
				}
			}
		}
	}
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'show_south_europe_missions', 'yes' )]"
		trigger_on_create = yes
	}
	window = {
		size = { 742 173 }
		filter_mouse = left|right
		alwaystransparent = no
		movable = no
		parentanchor = hcenter|bottom
		visible = "[Not(IsSaveGame)]"
		base_window = {
			vbox = {
				position = { 0 -60 }
				top_window_header_for_layout_centered = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(IsLocalPlayerReplayingCommands)]"
					blockoverride "Title_text" { text = "countries_with_missions" }
					blockoverride "White_buttons" {}
					using = tooltip_above
					tooltip = "unique_mission_tree_tt"
				}
			}
			movable = no
			size = { 742 173 }
			parentanchor = bottom
			blockoverride "BackgroundGradient" { visible = no }
			container = {
				name = "reccommended_nations_container"
				flowcontainer = {
					name = "reccommended_nations_tabs_container"
					position = { 13 55 }
					@mincategorybuttonwidth = 143
					@maxcategorybuttonwidth = 143
					@mincategorybuttonheight = 28
					@maxcategorybuttonheight = 32

					category_tab = {
						name = "greek_missions_tab"
						blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
						blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
						blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue( 'show_south_europe_missions', 'yes' ) )]" }
						blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue( 'show_south_europe_missions', 'yes' )]" }
						blockoverride "Center_text" { text = "south_europe" }
						blockoverride "Icon" { visible = no }
						blockoverride "ClickFunction"
						{
							onclick = "[GetVariableSystem.Set( 'show_south_europe_missions', 'yes' )]"
							onclick = "[GetVariableSystem.Set( 'show_north_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_africa_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_asia_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_indian_missions', 'no' )]"
						}
					}
					category_tab = {
						name = "german_missions_tab"
						blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
						blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
						blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue( 'show_north_europe_missions', 'yes' ) )]" }
						blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue( 'show_north_europe_missions', 'yes' )]" }
						blockoverride "Center_text" { text = "north_europe" }
						blockoverride "Icon" { visible = no }
						blockoverride "ClickFunction"
						{
							onclick = "[GetVariableSystem.Set( 'show_south_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_north_europe_missions', 'yes' )]"
							onclick = "[GetVariableSystem.Set( 'show_africa_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_asia_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_indian_missions', 'no' )]"
						}
					}
					category_tab = {
						name = "africa_missions_tab"
						blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
						blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
						blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue( 'show_africa_missions', 'yes' ) )]" }
						blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue( 'show_africa_missions', 'yes' )]" }
						blockoverride "Center_text" { text = "africa" }
						blockoverride "Icon" { visible = no }
						blockoverride "ClickFunction"
						{
							onclick = "[GetVariableSystem.Set( 'show_south_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_north_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_africa_missions', 'yes' )]"
							onclick = "[GetVariableSystem.Set( 'show_asia_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_indian_missions', 'no' )]"
						}
					}
					category_tab = {
						name = "asia_missions_tab"
						blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
						blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
						blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue( 'show_asia_missions', 'yes' ) )]" }
						blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue( 'show_asia_missions', 'yes' )]" }
						blockoverride "Center_text" { text = "asia" }
						blockoverride "Icon" { visible = no }
						blockoverride "ClickFunction"
						{
							onclick = "[GetVariableSystem.Set( 'show_south_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_north_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_africa_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_asia_missions', 'yes' )]"
							onclick = "[GetVariableSystem.Set( 'show_indian_missions', 'no' )]"
						}
					}
					category_tab = {
						name = "indian_missions_tab"
						blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
						blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
						blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue( 'show_indian_missions', 'yes' ) )]" }
						blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue( 'show_indian_missions', 'yes' )]" }
						blockoverride "Center_text" { text = "india" }
						blockoverride "Icon" { visible = no }
						blockoverride "ClickFunction"
						{
							onclick = "[GetVariableSystem.Set( 'show_south_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_north_europe_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_africa_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_asia_missions', 'no' )]"
							onclick = "[GetVariableSystem.Set( 'show_indian_missions', 'yes' )]"
						}
					}
				}
				missions_container = {
					blockoverride "visiblity"
					{
						visible = "[GetVariableSystem.HasValue( 'show_south_europe_missions', 'yes' )]"
					}
					blockoverride "missions"
					{
						using = south_europe_missions
					}
				}
				missions_container = {
					blockoverride "visiblity"
					{
						visible = "[GetVariableSystem.HasValue( 'show_north_europe_missions', 'yes' )]"
					}
					blockoverride "missions"
					{
						using = north_europe_missions
					}
				}
				missions_container = {
					blockoverride "visiblity"
					{
						visible = "[GetVariableSystem.HasValue( 'show_africa_missions', 'yes' )]"
					}
					blockoverride "missions"
					{
						using = africa_missions
					}
				}
				missions_container = {
					blockoverride "visiblity"
					{
						visible = "[GetVariableSystem.HasValue( 'show_asia_missions', 'yes' )]"
					}
					blockoverride "missions"
					{
						using = asian_missions
					}
				}
				missions_container = {
					blockoverride "visiblity"
					{
						visible = "[GetVariableSystem.HasValue( 'show_indian_missions', 'yes' )]"
					}
					blockoverride "missions"
					{
						using = indian_missions
					}
				}
			}
		}
	}

	base_window = {
		size = { 520 148 }
		parentanchor = bottom|hcenter
		filter_mouse = left|right
		alwaystransparent = no
		blockoverride "BackgroundGradient" { visible = no }
		visible = "[And(IsSaveGame, HasMigratingNations)]"
		vbox = {
			margin_top = 8
			top_window_header_for_layout_centered = {
				layoutpolicy_horizontal = expanding
				blockoverride "Title_text" { text = "MIGRATORY_NATIONS" }
				blockoverride "White_buttons" {}
			}
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin_widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 130 }
					margin_top = 10

					dynamicgridbox = {
						parentanchor = hcenter
						position = { 0 6 }
						size = { 300 300 }
						flipdirection = yes
						visible = "[And(IsSaveGame, HasMigratingNations)]"
						datamodel = "[GetMigratingNations]"

						item = {
							country_flag = {
								tooltip = "[Country.GetName]"

								blockoverride "flag"
								{
									texture = "[Country.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
									frame = "[Country.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
									framesize = { 120 120 }
								}

								blockoverride "size"
								{
									size = { 76 76 }
								}

								blockoverride "click"
								{
									onclick = "[SetLobbyCountry(Country.GetCountry)]"
									onclick = "[GetVariableSystem.Set('country_selection', 'selected')]"
									clicksound = "event:/SFX/UI/Province/sfx_ui_province_select"
									oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
								}
							}
						}
					}
				}
			}
		}
	}

	base_window = {
		movable = no
		size = { 332 55 }
		#visible = "[Not( GetVariableSystem.Exists('multiplayer_visible') )]"
		blockoverride "GradientAlpha" {
			alpha = 0.35
			size = { 100% 100% }
		}
		vbox = {
			using = MainWindowHeaderBoxState
			margin_bottom = 8

			blockoverride "Title_text"
			{
				text = "JOMINI_MULTIPLAYER_GUI_SESSION_HEADER"
			}

			blockoverride "Max_text_width"
			{
				max_width = 300
			}

			blockoverride "HideButton"
			{
				onclick = "[GetVariableSystem.Toggle('multiplayer_visible')]"
			}

			blockoverride "White_buttons"
			{
			}
		}
		flowcontainer = {
			ignoreinvisible = yes
			parentanchor = vcenter|right
			position = { -15 0 }
			white_button_round = {
				alwaystransparent = yes
				size = { 26 26 }
				visible = "[GetVariableSystem.Exists('multiplayer_visible')]"
				blockoverride "Icon" { texture = "gfx/interface/base_parts/up_arrow.dds" }
				blockoverride "On_click" { alwaystransparent = yes }
				layoutpolicy_horizontal = fixed
			}

			white_button_round = {
				alwaystransparent = yes
				layoutpolicy_horizontal = fixed
				size = { 26 26 }
				blockoverride "Icon" { texture = "gfx/interface/base_parts/down_arrow.dds" }
				visible = "[Not( GetVariableSystem.Exists('multiplayer_visible') )]"
				blockoverride "On_click" { alwaystransparent = yes }

			}
		}
	}

	#mod
	base_window = {
		movable = yes
		minimumsize = { -1 100 }
		parentanchor = center
		visible = "[GetVariableSystem.Exists('game_rules')]"

		vbox = {
			resizeparent = yes
			margin_bottom = 10
			margin_top = 8
			top_window_header_for_layout = {
				layoutpolicy_horizontal = expanding
				blockoverride "Title_text" { text = "game_rules" }
				blockoverride "White_buttons" {
					button_close = {
						tooltip = "CLOSE"
						onclick = "[GetVariableSystem.Clear('game_rules')]"
					}
				}
			}

			widget = {
				size = { 0 5 }
			}

			scrollarea = {
				#resize the window  here, also change @textwidth at the top
				maximumsize = { 650 600 }
				minimumsize = { 650 40 }
				scrollbar_vertical = {
					using = VerticalScrollBar
				}
				scrollbarpolicy_horizontal = always_off

				scrollwidget = {
					vbox = {
						resizeparent = yes
						margin = { 20 0 }
						margin_top = 15
						enabled = "[PlayerIsHost]"
						spacing = 5

						tag = {
							text = "host_rules"
							visible = "[And(GameIsMultiplayer, Not(PlayerIsHost))]"
						}

						#game_rule = {
						#	datacontext = "[GetScriptedGui('test_rule')]"
						#	blockoverride "name" {
						#		text = "Start with 1000 extra gold"
						#	}
						#	blockoverride "desc" {
						#		text = "[Select_CString(ScriptedGui.IsShown(GuiScope.SetRoot(Player.MakeScope).End), 'Every country receives 1000 gold on start', 'No gold bonus on start')]"
						#	}
						#}

						game_rule = {
							datacontext = "[GetScriptedGui('food_mechanic_game_rule')]"
							blockoverride "name" {
								text = "food_mechanic_game_rule"
							}
							blockoverride "desc" {
								text = "food_mechanic_game_rule_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('bigger_revolts_game_rule')]"
							blockoverride "name" {
								text = "bigger_revolts_game_rule"
							}
							blockoverride "desc" {
								text = "bigger_revolts_game_rule_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('diadochi_old')]"
							blockoverride "name" {
								text = "diadochi_old"
							}
							blockoverride "desc" {
								text = "diadochi_old_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('mauryan_collapse_game_rule')]"
							blockoverride "name" {
								text = "mauryan_collapse_game_rule"
							}
							blockoverride "desc" {
								text = "mauryan_collapse_game_rule_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('galation_invasion_game_rule')]"
							blockoverride "name" {
								text = "galation_invasion_game_rule"
							}
							blockoverride "desc" {
								text = "galation_invasion_game_rule_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('diadochi_names')]"
							blockoverride "name" {
								text = "diadochi_names"
							}
							blockoverride "desc" {
								text = "diadochi_names_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('ai_aggressiveness_major')]"
							blockoverride "name" {
								text = "ai_major_agressive_name"
							}
							blockoverride "desc" {
								text = "ai_major_agressive_desc"
							}
						}

						widget = {
							size = { 0 10 }
						}

						game_rule = {
							datacontext = "[GetScriptedGui('ai_aggressiveness_all')]"
							blockoverride "name" {
								text = "ai_all_agressive_name"
							}
							blockoverride "desc" {
								text = "ai_all_agressive_desc"
							}
						}

						#game_rule_radio = {
						#	datacontext = "[GetScriptedGui('test_radio_2')]"
						#	blockoverride "name" {
						#		text = "No stability bonus"
						#	}
						#}

						#game_rule_radio = {
						#	datacontext = "[GetScriptedGui('test_radio_2')]"
						#	blockoverride "name" {
						#		text = "Start with 10 extra stability"
						#		tooltip = "Applies to all countries"
						#	}
						#}

						#game_rule_radio = {
						#	datacontext = "[GetScriptedGui('test_radio_3')]"
						#	blockoverride "name" {
						#		text = "Start with 50 extra stability"
						#		tooltip = "Applies to all countries"
						#	}
						#}

						expand = {}
					}
				}
			}
		}
	}
}

JominiLobbyViewEndPreparationConfirmation = {
	blockoverride "properties"
	{
		modal = yes
		modality = all

		size = { 300 200 }
		parentanchor = center
		widgetanchor = center
	}

	blockoverride "content"
	{
		textbox = {
			name = "info"
			size = { 100% 50% }
			multiline = yes
			align = center|center
			text = "JOMINI_MULTIPLAYER_GUI_CONFIRMATION"
		}

		JominiLobbyViewButton = {
			onclick = "[EndPrepConfirm.Cancel]"
			text = "JOMINI_MULTIPLAYER_GUI_CANCEL"

			blockoverride "buttonstyle" {
				size = { 50% 19.999998% }
				parentanchor = bottom|left
				widgetanchor = bottom|left
				texture = "gfx/editor_gui/editor_button.dds"
				gfxtype = framedbuttongfx
				spriteType = CorneredStretched
				spriteborder = { 4 4 }
				effectname = "NoHighlight"
				framesize = { 16 16 }
				upframe = 1
				downframe = 2
				overframe = 3
				disableframe = 4
				intersectionmask = yes
			}
		}

		JominiLobbyViewButton = {
			onclick = "[EndPrepConfirm.Confirm]"
			text = "JOMINI_MULTIPLAYER_GUI_CONFIRM"

			blockoverride "buttonstyle" {
				size = { 50% 19.999998% }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				texture = "gfx/editor_gui/editor_button.dds"
				gfxtype = framedbuttongfx
				spriteType = CorneredStretched
				spriteborder = { 4 4 }
				effectname = "NoHighlight"
				framesize = { 16 16 }
				upframe = 1
				downframe = 2
				overframe = 3
				disableframe = 4
				intersectionmask = yes
			}
		}
	}
}

JominiMultiplayerJoinRequest = {
	blockoverride "joinrequest_background" {
		minimumsize = { 300 300 }

		background = {
			using = flat_background_white
			using = border_medium_torn_alpha
			shaderfile = "gfx/FX/pdxgui_default.shader"
			margin = { 6 10 }
		}

		#background = {
		#	texture = "gfx/interface/tiles/marble_tile_l.dds"
		#	spriteType = Corneredtiled
		#	spriteborder = { 0 0 }
		#	margin = { -6 -6 }
		#	shaderfile = "gfx/FX/pdxgui_default.shader"
		#}
	}

	blockoverride "buttonstyle" {
		text = "Words.."
		#gfxtype = buttongfx
		#shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

		#clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		#texture = "gfx/interface/tiles/marble_button_s.dds"
		#spriteType = Corneredtiled
		#spriteborder = { 60 0 }
		#size = { 124 38 }

		#buttonText = {
		#	textbox = {
		#		parentanchor = bottom|hcenter
		#		using = BaseFontM
		#		using = Black_FontColor
		#		autoresize = yes
		#		position = { 0 -12 }
		#	}
		#}

		size = { 124 28 }
		using = DropShadow
		using = button_tiled_texture
		spriteType = Corneredtiled
		spriteborder = { 200 200 }
		gfxtype = framedbuttongfx
		framesize = { 200 200 }
		upframe = 1
		overframe = 2
		downframe = 3
		disableframe = 4
		#block "On_click" { }
		maximumsize = { 999 28 }
		clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_primary"
		widget = {
			name = "Decorations"
			size = { 100% 100% }
			background = {
				spriteType = Corneredtiled
				texture = "gfx/interface/base_parts/button_lines_brown.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				alpha = 0.5
				spriteborder = { 22 0 }

				modify_texture = {
					name = "Decay"
					texture = "gfx/interface/base_parts/button_lines_alpha.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					alpha = 0.4
				}
			}
			background = {
				name = "side_pattern"
				texture = "gfx/interface/base_parts/button_pattern.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = Corneredtiled
				spriteborder = { 22 0 }
			}
		}
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = BaseFontM
				autoresize = yes
				position = { 0 -5 }
			}
		}
	}

	blockoverride "joinrequest_playername" {
		margin_bottom = 8
		size = { 180 20 }
		text = "[PlayerJoinRequest.GetPlayerName]"
		multiline = yes
		#autoresize = yes
		#layoutpolicy_horizontal = expanding
		#layoutpolicy_vertical = expanding
		using = BaseFontS
		using = Black_FontColor
	}

	blockoverride "joinrequest_margins" {
		margin_top = 32
		margin_left = 32
		margin_right = 32
	}

	blockoverride "joinrequest_font" {
		using = BaseFontM
		using = Black_FontColor
	}

	blockoverride "joinrequest_scrollarea_size" {
		size = { 500 0 }
	}

	blockoverride "joinrequest_scrollbar" {
		using = VerticalScrollBar
	}

	blockoverride "joinrequest_addrow" {
		addrow = 40
	}
}

JominiMultiplayerOosMessage = {
	blockoverride "oos_background" {
		minimumsize = { 400 300 }

		background = {
			using = flat_background_white
			using = border_medium_torn_alpha
			shaderfile = "gfx/FX/pdxgui_default.shader"
			margin = { 6 10 }
		}
	}

	blockoverride "oos_item" {
		layoutpolicy_horizontal = expanding

		hbox = {
			datacontext = "[OosData.GetPlayable.GetCountry]"
			layoutpolicy_horizontal = expanding
			spacing = 6

			widget = {
				size = { 100 110 }

				country_flag = {
					visible = "[Not( OosData.IsObserver )]"

					blockoverride "flag" {
						texture = "[Country.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
						frame = "[Country.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
						framesize = { 120 120 }
						size = { 100 100 }
					}

					blockoverride "size"
					{
						size = { 100 100 }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 6 2 }

				textbox = {
					text = "[Country.GetName]"
					visible = "[Not( OosData.IsObserver )]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
					using = BaseFontS
					using = Black_FontColor
				}

				textbox = {
					text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
					visible = "[OosData.IsObserver]"
					autoresize = yes
					layoutpolicy_horizontal = expanding
					using = BaseFontS
					using = Black_FontColor
				}

				textbox = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
					using = BaseFontS
					using = Black_FontColor
				}

				textbox = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
					using = BaseFontS
					using = Black_FontColor
				}

				textbox = {
					text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
					max_width = 490
					autoresize = yes
					layoutpolicy_horizontal = expanding
					using = BaseFontS
					using = Black_FontColor
					multiline = yes
				}
			}
		}
	}

	blockoverride "oos_textbox" {
		using = BaseFontS
		using = Black_FontColor
	}

	blockoverride "oos_button" {
		text = "Words.."
		#gfxtype = buttongfx
		#texture = "gfx/interface/tiles/text_button_tiles.dds"
		#spriteType = Corneredtiled
		#spriteborder = { 80 0 }
		size = { 300 28 }
		using = DropShadow
		using = button_tiled_texture
		spriteType = Corneredtiled
		spriteborder = { 200 200 }
		gfxtype = framedbuttongfx
		framesize = { 200 200 }
		upframe = 1
		overframe = 2
		downframe = 3
		disableframe = 4
		#block "On_click" { }
		maximumsize = { 999 28 }
		clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_primary"
		widget = {
			name = "Decorations"
			size = { 100% 100% }
			background = {
				spriteType = Corneredtiled
				texture = "gfx/interface/base_parts/button_lines_brown.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				alpha = 0.5
				spriteborder = { 22 0 }

				modify_texture = {
					name = "Decay"
					texture = "gfx/interface/base_parts/button_lines_alpha.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					alpha = 0.4
				}
			}
			background = {
				name = "side_pattern"
				texture = "gfx/interface/base_parts/button_pattern.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = Corneredtiled
				spriteborder = { 22 0 }
			}
		}
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = BaseFontM
				autoresize = yes
				position = { 0 -5 }
			}
		}
	}
}
