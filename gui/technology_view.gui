types TechTypes
{
	type invention_decoration_left = icon {
		texture = "gfx/interface/base_parts/button_allframes.dds"
		framesize = { 100 100 }
		frame = "[Select_int32( InventionNode.GetItem.IsOwned, '(int32)6', '(int32)4' )]"
		size = { 35 60 }
		position = { -14 0 }
		modify_texture = {
			name = "Alpha"
			block "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_left.dds" }
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 6 6 }
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			texture = "gfx/interface/base_parts/button_allframes.dds"
			framesize = { 100 100 }
			frame = "[Select_int32( InventionNode.GetItem.IsOwned, '(int32)6', '(int32)4' )]"
			color = { 0 0 0 1 }
			modify_texture = {
				name = "Alpha"
				block "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_left.dds" }
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 6 6 }
			}
			margin_left = 1
			margin_bottom = 1
			margin_top = 1
			alpha = 0.5
			visible = "[InventionNode.GetItem.IsAllowed]"
		}
	}

	type invention_decoration_right = icon {
		texture = "gfx/interface/base_parts/button_allframes.dds"
		framesize = { 100 100 }
		frame = "[Select_int32( InventionNode.GetItem.IsOwned, '(int32)6', '(int32)4' )]"
		size = { 35 60 }
		position = { 14 0 }
		parentanchor = right
		modify_texture = {
			name = "Alpha"
			spriteType = Corneredtiled
			spriteborder = { 6 6 }
			block "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_right.dds" }
			blend_mode = alphamultiply

		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			texture = "gfx/interface/base_parts/button_allframes.dds"
			framesize = { 100 100 }
			frame = "[Select_int32( InventionNode.GetItem.IsOwned, '(int32)6', '(int32)4' )]"
			color = { 0 0 0 1 }
			modify_texture = {
				name = "Alpha"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				block "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_right.dds" }
				blend_mode = alphamultiply
			}
			margin_left = -1
			margin_bottom = 1
			margin_top = -1
			alpha = 0.5
			visible = "[InventionNode.GetItem.IsAllowed]"
		}
	}

}

template DashedArrowLine {
	gfxtype = linegfx
	width = 4

	animation_speed = { 0 0 }
	uv_scale = { 1.0 1.0 }
	texture = "gfx/interface/missions/arrow_texture.dds"
	mask_uv_scale = { 1.0 1.0 }
	mask = "gfx/interface/missions/arrow_alpha.dds"
}

base_window = {
	gfxtype = windowgfx
	name = "technology_view"
	parentanchor = top|left
	size = { 1385 878 }
	using = main_window_template

	state = {
		name = select_tech
		trigger_on_create = yes
		on_start = "[GetVariableSystem.Set( 'tech_tabs', 'military_tech' )]"
	}

	### Audio ###
	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}
	state = {
		name = _hide
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}

	#state = {
	#	name = _hide
	#	on_start = "[PdxGuiTriggerAllAnimations('technology_view_closed')]"
	#}

	vbox = { #We will not use dynamic layout here, beyond title setup
		using = MainWindowHeaderBox

		blockoverride "Title_text" { text = "TECHNOLOGY_MENU_HEADER" }

		blockoverride "White_buttons"
		{
			button_back = {
				shortcut = "previous_window"
				onclick = "[TechnologyView.OnPrevious]"
				tooltip = "PREVIOUS_TECHNOLOGY_VIEW"
			}

			button_close = {
				onclick = "[TechnologyView.OnClose]"
				tooltip = "CLOSE"
				shortcut = "close_window"
			}
		}

		blockoverride "FlagOrIcon"
		{
			icon = {
				texture = "gfx/interface/base_parts/yellow_button_color_200fs.dds"
				framesize = { 100 100 }
				frame = 6
				position = { -2 -2 }
				size = { 32 32 }
				modify_texture = {
					texture = "gfx/interface/icons/menu_buttons/menu_technology.dds"
					blend_mode = alphamultiply
				}
			}
		}

		hbox = {
			layoutpolicy_vertical = expanding
		}

	}

	margin_widget = {
		size = { 100% 100% }

		#control margins

		margin = { 12 0 }

		container = {
			name = "stats"
			position = { 10 57 }
			flowcontainer = {
				spacing = 44
				icon_and_text = {
					size = { 110 0 }
					blockoverride "Text" { text = "[TechnologyView.GetResearchPointsInfo]" }
					blockoverride "Icon" { using = icon_research }
					tooltip = "[TechnologyView.GetMonthlyResearchDesc]"
				}
				icon_and_text = {
					size = { 110 0 }
					blockoverride "Text" { text = "[TechnologyView.GetResearchEfficiency|%2]" }
					blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/research_user.dds" }
					tooltip = "[TechnologyView.GetResearchEfficiencyDesc]"
				}
			}
		}


		icon = {
			name = "top line"
			position = { 290 87 }
			texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
			framesize = { 100 100 }
			frame = 4
			size = { 4 5 }
		}


		###Actual Trees

		margin_widget = {
			size = { 1098 835 } #Zoomarea doesn't like expandables
			position = { 246 40 }
			margin = { 18 18 }
			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/technology_parts/tech_pattern.dds"
			}
			icon = {
				texture = "gfx/interface/technology_parts/tech_stain_1.dds"
				parentanchor = right
				position = { 0 94 }
				alpha = 0.55
			}
			zoomarea = {
				name = "graph_zoomarea" # Do not change this name
				size = { 100% 92% }
				position = { 30 30 }
				using = NoninteractableBG
				blockoverride "EdgeAlpha" {  }
				blockoverride "Margins" {
					margin_right = 0
					margin_left = 0
					margin_bottom = 0
				}

				state = {
				  name = "_zoom_changed"
				  duration = 0.15
				}
				zoom = 1
				zoom_step = 0.2
				zoom_min = 0.2
				zoom_max = 1
				pan_position = { 0 0 }
				draggable_by = middle|left #This can be set to left, middle or right
				scissor = yes

				zoomwidget = {
					widget = {
						allow_outside = yes
						name = "node_graph_panel_scroll"
						focuspolicy = click
						size = { 100% 100% }

						container  = {
							flowcontainer = {
								margin_bottom = 150
								margin_left = 10
								margin_right = 10
								parentanchor = "top|hcenter"
								widgetanchor = "top|hcenter"
								ignoreinvisible = yes
								datamodel = "[TechnologyView.GetTrees]"
								item = {
									container = {
										visible = "[GetVariableSystem.HasValue( 'tech_tabs', TechTreeItem.GetTechTree.GetTable.GetUiKey )]"
										container = {
											position = { 0 40 }
											# don't remove this, it is needed for setting up the graph
											datamodel = "[TechTreeItem.SetupDataContexts(PdxGuiWidget.AccessSelf)]"

											# These two widgets determine the margin between graph nodes
											widget = {
												name = "margin_top_left" # Do not change this name
												size = { 10 25 }
											}
											widget = {
												name = "margin_bottom_right" # Do not change this name
												size = { 10 25 }
											}
											# This widget tells the layout how to offset and space the lines
											widget = {
												name = "line_offset" # Do not change this name
												position = { 1 -4 } # Fixed offset (i.e. to compensate for line width
												size = { 20 0 } # Spacing between edges
											}

											# Container for all the edges in the graph
											container = {
												name = "line_area" # Do not change this name

												position = { 0 36 }
												datamodel = "[TechTreeItem.GetLineItems]"
												item = {
													container = {
														position = "[InventionLineItem.GetPosition]"

														line = {
															using = ArrowLine
															line_type = BSpline
															points = "[InventionLineItem.GetPointsInContainer]"
															visible = "[Not( InventionLineItem.IsOrLine )]"
														}
														line = {
															using = DashedArrowLine
															width = 3
															line_type = BSpline
															points = "[InventionLineItem.GetPointsInContainer]"
															visible = "[InventionLineItem.IsOrLine]"
														}
													}
												}
											}

											# Container for all the nodes in the graph
											container = {
												name = "node_area" # Do not change this name
												position = { 0 36 }
												datamodel = "[TechTreeItem.GetItems]"

												item = {

													widget = {
														size = { 200 60 }
														widgetid = "[InventionNode.GetKey]"
														position = "[InventionNode.GetPosition]"

														#Military
														invention_decoration_left = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)1' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_martial_left.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														invention_decoration_right = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)1' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_martial_right.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														#Civic
														invention_decoration_left = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)2' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_civic_left.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														invention_decoration_right = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)2' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_civic_right.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														#Oratory
														invention_decoration_left = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)3' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_left.dds" }
														}

														invention_decoration_right = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)3' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" { texture = "gfx/interface/base_parts/technology_decoration_oratory_right.dds" }
														}

														#Religious
														invention_decoration_left = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)4' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_religion_left.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														invention_decoration_right = {
															visible = "[And( InventionNode.GetItem.GetInvention.IsKeystone, EqualTo_int32( TechTreeItem.GetIconFrame, '(int32)4' ) )]"
															enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															blockoverride "Icon" {
																texture = "gfx/interface/base_parts/technology_decoration_religion_right.dds"
																spritetype = Corneredtiled
																spriteborder = { 0 0 }
															}
														}

														invention_tree_button = {
															size = { 180 100% }
															parentanchor = hcenter
															# tooltip = "[InventionNode.GetItem.GetTooltip]"
															blockoverride "Glow" { visible = "[TechnologyView.ShouldHighlight( InventionNode.GetItem.GetInvention.Self )]" }

															tooltipwidget = {
																player_invention_pop_out = {
																	datacontext = "[InventionNode.GetItem.GetInvention]"
																	blockoverride "input_info_text" {
																		text = "GAME_GENERIC_UNLOCK_TEXT"
																		visible = "[And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) )]"
																	}
																}
															}
															blockoverride "On_click"
															{
																onclick = "[InventionNode.GetItem.OnPurchaseClick]"
																enabled = "[And( And( And( InventionNode.GetItem.IsUnlocked, Not( InventionNode.GetItem.IsOwned ) ), InventionNode.GetItem.IsAllowed ), InventionNode.GetItem.CanPurchase )]"
															}
															blockoverride "PatternVisible" { visible = no }
															#using = NoninteractableBG
															#visible = "[InventionNode.GetItem.CanPurchase]"
															#icon = {
															#	texture = "gfx/interface/icons/icon_alpha/star_filled.dds"
															#	size = { 28 28 }
															#	visible = "[InventionNode.GetItem.GetInvention.HasActivateEffect]"
															#	parentanchor = bottom
															#}
															flowcontainer = {
																direction = vertical
																parentanchor = hcenter|vcenter
																ignoreinvisible = yes

																container = {
																	parentanchor = top|hcenter
																	textbox = {
																		position = { 48 0 }
																		using = BaseFontM
																		using = Black_FontColor
																		size = { 106 42 }
																		text = "[InventionNode.GetItem.GetInvention.GetNameWithNoTooltip]"
																		multiline = yes
																		elide = right
																		maximumsize = { 106 42 }
																		fontsize_min = 12
																		align = center|nobaseline
																	}

																}
															}
														}
														icon = {
															texture = "[GetInventionIcon( InventionNode.GetItem.GetInvention.Self )]"
															size = { 40 44 }
															parentanchor = vcenter
															position = { 28 0 }
														}
														icon = {
															size = { 48 48 }
															parentanchor = top|right
															position = { 2 -12 }
															texture = "gfx/interface/icons/shared_icons/completed_task.dds"
															visible = "[InventionNode.GetItem.IsOwned]"
														}


														margin_widget = {
															size = { 100% 100% }
															margin = { 14 4 }
															icon = {
																alwaystransparent = yes
																size = { 100% 100% }
																texture = "gfx/interface/base_parts/background_black_texture.dds"
																parentanchor = center
																alpha = 0.25
																visible = "[And( Not( InventionNode.GetItem.IsUnlocked ), Or( Not( InventionNode.GetItem.IsMarked ), Or( GetVariableSystem.HasValue('show_plan', 'off'), Not( GetVariableSystem.Exists( 'show_plan' ) ) ) ) )]"
															}
															icon = {
																alwaystransparent = yes
																size = { 100% 100% }
																texture = "gfx/interface/base_parts/button_allframes.dds"
																framesize = { 100 100 }
																frame = 11
																parentanchor = center
																alpha = 0.25
																visible = "[And( And( Not( InventionNode.GetItem.IsOwned), InventionNode.GetItem.IsMarked ), Not( GetVariableSystem.HasValue('show_plan', 'off') ) )]"
																modify_texture = {
																	#spriteborder = { 16 16 }
																	spriteType = Corneredstretched
																	texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black.dds"
																	blend_mode = alphamultiply
																	alpha = 0.8
																}

															}
														}
														margin_widget = {
															size = { 100% 100% }
															margin = { 10 0 }
															visible = "[And( Not( InventionNode.GetItem.IsOwned ), GetVariableSystem.Exists( 'planning_mode' ) )]"
															button = {
																size = { 100% 100% }
																onclick = "[InventionNode.GetItem.MarkInvention]"
																datacontext = "[InventionNode]"
																tooltip = "INVENTION_MARK_TOOLTIP"
															}
														}

														#margin_widget = {
														#	size = { 100% 100% }
														#	icon = {
														#		alwaystransparent = no
														#		size = { 100% 100% }
														#		texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
														#		parentanchor = center
														#		alpha = 0.55
														#		visible = "[InventionNode.GetItem.IsOwned]"
														#	}
														#}

													}
												}
											}

											# Extra container for all the arrow heads on edges
											container = {
												position = { 0 32 }
												datamodel = "[TechTreeItem.GetLineItems]"
												item = {
													widget = {
														position = "[InventionLineItem.GetTo]"
														size = { 16 16 }

														visible = "[Not(InventionLineItem.IsToNodeVirtual)]"

														icon = {
															name = "arrow_head"
															position = { -13 -9 }

															texture = "gfx/interface/missions/arrow_tip_d.dds"
															visible = "[Not( InventionLineItem.IsOrLine )]"
														}
														icon = {
															name = "arrow_head_hollow"
															position = { -12 -5 }
															size = { 24 24 }
															texture = "gfx/interface/missions/arrow_tip_d_hollow.dds"
															visible = "[InventionLineItem.IsOrLine]"
														}
													}
												}
											}
										}
									}
								}
							}
						}

					}
				}
			}

			zoom_indicator = {
				parentanchor = bottom|right
				position = { 24 -8 }
				blockoverride "On_Click" {
					onclick = "[TechnologyView.ResetZoomAreaPosition]"
				}
			}

			widget = {
				parentanchor = bottom
				position = { 38 -10 }
				visible = "[Not( GetVariableSystem.Exists( 'tech_tabs' ) )]"
				background = {
					using = flat_background_white
					shaderfile = "gfx/FX/pdxgui_default.shader"
					spriteType = corneredtiled
					alpha = 0.98
					modify_texture = {
						name = "Alpha"
						spriteborder = { 16 16 }
						spriteType = Corneredtiled
						texture = "gfx/interface/base_parts/portrait_x32y32bd_alpha.dds"
						blend_mode = alphamultiply
					}
				}
				textbox = {
					multiline = yes
					size = { 190 100 }
					text = "TECH_HELPER_TEXT"
					elide = right
					using = BaseFontS
					using = Black_FontColor
					resizeparent = yes
					autoresize = yes
					margin = { 8 8 }
					visible = "[Not( GetVariableSystem.Exists( 'tech_tabs' ) )]"
				}
			}
			widget = {
				parentanchor = bottom
				position = { 38 -10 }
				visible = "[Not( GetVariableSystem.Exists( 'tech_tabs' ) )]"
				background = {
					using = flat_background_white
					shaderfile = "gfx/FX/pdxgui_default.shader"
					spriteType = corneredtiled
					alpha = 0.98
					modify_texture = {
						name = "Alpha"
						spriteborder = { 16 16 }
						spriteType = Corneredtiled
						texture = "gfx/interface/base_parts/portrait_x32y32bd_alpha.dds"
						blend_mode = alphamultiply
					}
				}
				textbox = {
					multiline = yes
					size = { 190 100 }
					text = "TECH_HELPER_TEXT"
					elide = right
					using = BaseFontS
					using = Black_FontColor
					resizeparent = yes
					autoresize = yes
					margin = { 8 8 }
					visible = "[Not( GetVariableSystem.Exists( 'tech_tabs' ) )]"
				}
			}
			margin_widget = { #header not appearing at first open??
				size = { 100% 32 }
				position = { 2 -1 }
				margin_right = 4
				margin_left = 24

				dynamicgridbox = {
					datamodel = "[TechnologyView.GetOffices]"
					item = {
						sub_header_v = {
							size = { 1066 100% }
							blockoverride "Icon_visible" { visible = yes }
							blockoverride "Icon" {
								texture = "gfx/interface/icons/icon_skills.dds"
								framesize = { 50 50 }
								frame = "[TechOfficeItem.GetIconFrame]"
								size = { 34 34 }
								#position = { 0 0 }

							}
							blockoverride "Title_text" { text = "[TechOfficeItem.GetName]" }
							visible = "[GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey )]"
						}
					}
				}
			}
		}

		flowcontainer = { #Weird flex but ok
			name = "tab border"
			datamodel = "[TechnologyView.GetOffices]"
			direction = vertical
			spacing = 3
			position = { 10 90 }
			item = {
				margin_widget = {
					size = { 284 190 }

					icon = {
						texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
						framesize = { 100 100 }
						frame = 4
						size = { 4 14 }
						position = { 0 -3 }
						parentanchor = right|top
					}

					widget = {
						size = { 284 180 }
						parentanchor = bottom


						widget = {
							size = { 100% 100% }
							alpha = 0.3
							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/technology_parts/military.dds"
								visible = "[And( EqualTo_int32( TechOfficeItem.GetIconFrame, '(int32)1' ), GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
								modify_texture = {
									name = "Alpha"
									texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
									blend_mode = alphamultiply
									spriteType = corneredstretched
									spriteborder = { 0 0 }
								}
							}
							icon = {
								#position = { -2 2 }
								name = "illustration background civic"
								size = { 100% 100% }
								texture = "gfx/interface/technology_parts/civic.dds"
								visible = "[And( EqualTo_int32( TechOfficeItem.GetIconFrame, '(int32)2' ), GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
								#alpha = 0.3
								modify_texture = {
									name = "Alpha"
									texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
									blend_mode = alphamultiply
									spriteType = corneredstretched
									spriteborder = { 0 0 }
								}
							}
							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/technology_parts/oratory.dds"
								visible = "[And( EqualTo_int32( TechOfficeItem.GetIconFrame, '(int32)3' ), GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
								modify_texture = {
									name = "Alpha"
									texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
									blend_mode = alphamultiply
									spriteType = corneredstretched
									spriteborder = { 0 0 }
								}
							}
							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/technology_parts/religious.dds"
								visible = "[And( EqualTo_int32( TechOfficeItem.GetIconFrame, '(int32)4' ), GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
								modify_texture = {
									name = "Alpha"
									texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
									blend_mode = alphamultiply
									spriteType = corneredstretched
									spriteborder = { 0 0 }
								}
							}
						}
						button = {
							size = { 100% 100% }
							onclick = "[GetVariableSystem.Set( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey )]"

							tab_button_vertical = {
								parentanchor = hcenter
								position = { 0 8 }
								size = { 264 28 }
								blockoverride "Icon" {
									texture = "gfx/interface/icons/icon_skills.dds"
									framesize = { 50 50 }
									frame = "[TechOfficeItem.GetIconFrame]"
								}
								blockoverride "Center_text" { text = "[TechOfficeItem.GetName]" }
								blockoverride "On_click" {
									onclick = "[GetVariableSystem.Set( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey )]"
									enabled = "[Not( GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
								}
							}
						}

						#beige borders
						icon = {
							position = { 0 0 }
							texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
							framesize = { 100 100 }
							frame = 4
							parentanchor = left
							size = { 4 100% }
						}

						icon = {
							position = { 0 0 }
							texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
							framesize = { 100 100 }
							frame = 4
							size = { 100% 4 }
						}

						icon = {
							position = { 0 0 }
							parentanchor = bottom
							texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
							framesize = { 100 100 }
							frame = 4
							size = { 100% 4 }
						}

						icon = {
							texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
							framesize = { 100 100 }
							frame = 4
							size = { 4 100% }
							visible = "[Not( GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey ) )]"
							parentanchor = right
						}
						using = NoninteractableBG
						blockoverride "EdgeAlpha" {
							visible = "[GetVariableSystem.HasValue( 'tech_tabs', TechOfficeItem.GetTable.GetUiKey )]"
						}
						blockoverride "Margins" { margin = { 0 0 } }
					}
				}
			}
		}

		flowcontainer = {
			name = "tab contents"
			position = { 10 87 }
			spacing = 3
			datamodel = "[TechnologyView.GetOffices]"
			direction = vertical

			item = {
				margin_widget = { #Bit hacky, but we should mirror the above
					size = { 284 190 }
					margin_widget = {
						size = { 284 180 }
						parentanchor = bottom

						margin_widget = {
							size = { 100% 146 }
							parentanchor = bottom

							icon = {
								using = flat_background_white
								position = { 10 -8 }
								parentanchor = bottom
								size = { 225 10 }
							}

							fixed_size_progressbar = {
								blockoverride "size" { size = { 225 10 } }
								position = { 10 -8 }
								parentanchor = bottom
								#blockoverride "ProgressAlpha" {}
								blockoverride "Value" { value = "[TechOfficeItem.GetProgress]" }
								tooltip = "[TechOfficeItem.GetProgressDesc]"
								blockoverride "ProgressAlpha" {
									alpha = 0.2
								}
								#using = DropShadow
								blockoverride "ShadowMargins" {
									margin_left = 4
									margin_bottom = 4
								}
								blockoverride "ShadowAlpha" { alpha = 0 }
							}

							icon = {
								using = flat_background_white
								size = { 275 32 }
								position = { 4 4 }
								alpha = 0.8
								using = border_medium_torn_alpha
							}

							flowcontainer = {
								ignoreinvisible = yes
								visible = "[TechOfficeItem.HasHolder]"
								position = { 100 47 }
								spacing = 0

								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/traits/obsessive.dds"
									datacontext = "[GetScriptedGui('is_obsessive')]"
									visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(TechOfficeItem.GetCharacter.MakeScope).End)]"
									tooltipwidget = {
										using = double_tooltip_vert
										blockoverride "TopText" {
											text = "obsessive"
										}
										blockoverride "BotText" {
											text = "inventive"
										}
										blockoverride "line" {}
									}
								}
								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/traits/intelligent.dds"
									datacontext = "[GetScriptedGui('is_intelligent')]"
									visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(TechOfficeItem.GetCharacter.MakeScope).End)]"
									tooltipwidget = {
										using = double_tooltip_vert
										blockoverride "TopText" {
											text = "intelligent"
										}
										blockoverride "BotText" {
											text = "inventive"
										}
										blockoverride "line" {}
									}
								}
								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/traits/polymath.dds"
									datacontext = "[GetScriptedGui('is_polymath')]"
									visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(TechOfficeItem.GetCharacter.MakeScope).End)]"
									tooltipwidget = {
										using = double_tooltip_vert
										blockoverride "TopText" {
											text = "polymath"
										}
										blockoverride "BotText" {
											text = "inventive"
										}
										blockoverride "line" {}
									}
								}
								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/traits/scholar.dds"
									datacontext = "[GetScriptedGui('is_scholar')]"
									visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(TechOfficeItem.GetCharacter.MakeScope).End)]"
									tooltipwidget = {
										using = double_tooltip_vert
										blockoverride "TopText" {
											text = "scholar"
										}
										blockoverride "BotText" {
											text = "inventive"
										}
										blockoverride "line" {}
									}
								}
							}

							container = {
								position = { 135 87 }

								icon = {
									position = { 26 2 }
									using = flat_background_white
									size = { 80 28 }
									alpha = 0.85

									modify_texture = {
										name = "Alpha"
										texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
										blend_mode = alphamultiply
										spriteType = corneredstretched
										spriteborder = { 0 0 }
									}
								}
								icon_and_text = {
									#position = { 95 40 }
									size = { 95 0 }
									blockoverride "Icon" {
										texture = "gfx/interface/icons/icon_skills.dds"
										framesize = { 50 50 }
										frame = "[TechOfficeItem.GetIconFrame]"
									}
									blockoverride "Text" {
										text = "[TechOfficeItem.GetSpeedModifier|0+%=]"
									}
									tooltip = "[TechOfficeItem.GetSpeedInfo]"

								}
							}

							tag = {
								parentanchor = top|left
								using = BaseFontM
								maximumsize = { 210 64 }
								using = Black_FontColor
								text = "[TechOfficeItem.GetCharacter.GetNameWithNoTooltip]"
								elide = right
								autoresize = yes
								align = left
								position = { 10 2 }
							}

							tag = {
								parentanchor = right
								using = BaseFontM
								size = { 100 64 }
								using = Black_FontColor
								text = "[TechOfficeItem.GetCharacter.GetFamily.GetNumberOfJobs]/[TechOfficeItem.GetCharacter.GetFamily.GetNumberOfJobs]"
								autoresize = yes
								align = right
								alpha = 0.7
								position = { -10 2 }
								visible = "[And( TechOfficeItem.HasHolder, Not(TechOfficeItem.GetCharacter.GetFamily.IsMinor))]"
							}

							cpt_button = {
								position = { 37 34 }
								size = { 56 86 }
								datacontext = "[TechOfficeItem.GetCharacter]"
								blockoverride "stats" {}
							}

							icon_button_square = {
								name = "change"
								size = { 34 34 }
								position = { 100 86 }
								blockoverride "On_click"
								{
									onclick = "[TechOfficeItem.OpenSelection]"
								}
								blockoverride "Icon"
								{
									size = { 28 28 }
									texture = "gfx/interface/icons/shared_icons/change.dds"
								}

								tooltip = "CLICK_TO_REPLACE_TECHOFF"
							}

							icon_card = {
								parentanchor = bottom|right
								position = { -8 -4 }
								size = { 34 34 }
								blockoverride "Icon" { visible = no }
								tooltip = "[TechOfficeItem.GetLevelInfo]"
								textbox  = {
									size = { 30 30 }
									using = HeaderFont
									fontsize = 26
									using = Black_FontColor
									text = "[TechOfficeItem.GetLevel]"
									parentanchor = hcenter
									autoresize = yes
									align = center|nobaseline
								}
							}
						}
					}
				}
			}
		}

		widget = {
			name = "innovations"
			size = { 120 50 }
			position = { 300 98 }
			background = {
				using = flat_background_white
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				alpha = 0.9
				using = border_medium_torn_alpha
			}
			icon_and_text = {
				parentanchor = center
				size = { 100 0 }
				position = { 0 -4 }
				blockoverride "Text"
				{
					text = "[Player.GetNumInnovations|0]"
				}
				blockoverride "Icon"
				{
					texture = "gfx/interface/icons/modifiers/innovations.dds"
				}
				tooltip = "INNOVATIONS_TOOLTIP"
			}
		}

		widget = {
			name = "planning_mode"
			size = { 220 50 }
			position = { 420 98 }
			visible = "[GetVariableSystem.Exists( 'tech_tabs' )]"
			background = {
				using = flat_background_white
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				alpha = 0.9
				using = border_medium_torn_alpha
			}
			checkbox_entry = {
				size = { 163 40 }
				parentanchor = left|vcenter
				position = { 8 0 }
				blockoverride "Text" { text = "PLANNING_MODE" }
				blockoverride "On_click" {
					onclick = "[GetVariableSystem.Toggle( 'planning_mode' )]"
					onclick = "[GetVariableSystem.Set( 'show_plan', 'on' )]"
				}
				blockoverride "Frame" { frame = "[BoolTo1And2( GetVariableSystem.Exists( 'planning_mode' ) )]" }
				tooltip = "PLANNING_MODE_TOOLTIP"
			}

			button = {
				texture = "gfx/interface/base_parts/button_allframes.dds"
				framesize = { 100 100 }
				frame = 9
				size = { 34 34 }
				parentanchor = right|vcenter
				visible = "[Or( GetVariableSystem.HasValue('show_plan', 'on'), Not( GetVariableSystem.Exists('show_plan') ) )]"
				position = { -12 0 }
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/eye.dds"
					blend_mode = alphamultiply
					spriteborder = { 4 0 }
					spriteType = Corneredstretched
				}
				onclick = "[GetVariableSystem.Set( 'show_plan', 'off' )]"
				tooltip = "SHOW_HIDE_PLAN"
				enabled = "[Not( GetVariableSystem.Exists( 'planning_mode' ) )]"
			}
			button = {
				using = button_tiled_texture
				framesize = { 200 200 }
				visible = "[GetVariableSystem.HasValue('show_plan', 'off')]"
				size = { 34 34 }
				parentanchor = right|vcenter
				position = { -12 0 }
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/eye.dds"
					blend_mode = alphamultiply
					spriteborder = { 4 0 }
					spriteType = Corneredstretched
				}
				onclick = "[GetVariableSystem.Set( 'show_plan', 'on' )]"
				tooltip = "SHOW_HIDE_PLAN"
				enabled = "[Not( GetVariableSystem.Exists( 'planning_mode' ) )]"
			}
		}

		icon = {
			position = { 290 -19 }
			parentanchor = bottom
			texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
			framesize = { 100 100 }
			frame = 4
			size = { 400 4 }

			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteborder = { 4 0 }
				spriteType = Corneredstretched
			}

		}

	}

	margin_widget = {
		size = { 400 40 }
		using = inputfield
		margin_right = 6
		margin_left = 6
		parentanchor = right
		position = { -38 102 }

		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = flat_background_white
			spriteType = Corneredtiled
			margin = { 10 6 }
			margin_top = 3
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/background_x60bd_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}

		editbox = {
			position = { 12 0 }
			size = { 260 34 }
			name = "find_text"
			text = ""
			using = BaseFontM
			using = Black_FontColor
			fontsize = 20
			maxcharacters = 26
			focuspolicy = all
			alwaystransparent = no
			multiline = no
			onreturnpressed = "[TechnologyView.OnFindTextChanged]"
		}
	}
}
